module gl;
 
define GLenum = CUInt;
define GLboolean = bool;
define GLbitfield = CUInt;
define GLbyte = ichar;
define GLubyte = char;
define GLshort = short;
define GLushort = ushort;
define GLint = CInt;
define GLuint = CUInt;
define GLclampx = int;
define GLsizei = CInt;
define GLfloat = float;
define GLclampf = float;
define GLdouble = double;
define GLclampd = double;
define GLeglClientBufferEXT = void;
define GLeglImageOES = void;
define GLchar = char;
define GLcharARB = char;

define GLhalf = ushort;
define GLhalfARB = ushort;
define GLfixed = int;
define GLintptr = usize;
define GLintptrARB = usize;
define GLsizeiptr = isize;
define GLsizeiptrARB = isize;
define GLint64 = long;
define GLint64EXT = long;
define GLuint64 = ulong;
define GLuint64EXT = ulong;
define GLsync = void*;
define GLdebugproc = void*;
define GLdebugprocarb = void*;
define GLdebugprockhr = void*;

 


/** 
* Constants 
*/ 
const GL_CURRENT_BIT = 0x00000001;
const GL_POINT_BIT = 0x00000002;
const GL_LINE_BIT = 0x00000004;
const GL_POLYGON_BIT = 0x00000008;
const GL_POLYGON_STIPPLE_BIT = 0x00000010;
const GL_PIXEL_MODE_BIT = 0x00000020;
const GL_LIGHTING_BIT = 0x00000040;
const GL_FOG_BIT = 0x00000080;
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_ACCUM_BUFFER_BIT = 0x00000200;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_VIEWPORT_BIT = 0x00000800;
const GL_TRANSFORM_BIT = 0x00001000;
const GL_ENABLE_BIT = 0x00002000;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_HINT_BIT = 0x00008000;
const GL_EVAL_BIT = 0x00010000;
const GL_LIST_BIT = 0x00020000;
const GL_TEXTURE_BIT = 0x00040000;
const GL_SCISSOR_BIT = 0x00080000;
const GL_MULTISAMPLE_BIT = 0x20000000;
const GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_DYNAMIC_STORAGE_BIT = 0x0100;
const GL_CLIENT_STORAGE_BIT = 0x0200;
const GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
const GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
const GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const GL_MAP_READ_BIT = 0x0001;
const GL_MAP_WRITE_BIT = 0x0002;
const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const GL_MAP_PERSISTENT_BIT = 0x0040;
const GL_MAP_COHERENT_BIT = 0x0080;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const GL_UNIFORM_BARRIER_BIT = 0x00000004;
const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GL_COMMAND_BARRIER_BIT = 0x00000040;
const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const GL_VERTEX_SHADER_BIT = 0x00000001;
const GL_FRAGMENT_SHADER_BIT = 0x00000002;
const GL_GEOMETRY_SHADER_BIT = 0x00000004;
const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const GL_COMPUTE_SHADER_BIT = 0x00000020;
const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const GL_FALSE = 0;
const GL_NO_ERROR = 0;
const GL_ZERO = 0;
const GL_NONE = 0;
const GL_TRUE = 1;
const GL_ONE = 1;
const GL_INVALID_INDEX = 0xFFFFFFFF;
const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
const GL_POINTS = 0x0000;
const GL_LINES = 0x0001;
const GL_LINE_LOOP = 0x0002;
const GL_LINE_STRIP = 0x0003;
const GL_TRIANGLES = 0x0004;
const GL_TRIANGLE_STRIP = 0x0005;
const GL_TRIANGLE_FAN = 0x0006;
const GL_QUADS = 0x0007;
const GL_QUAD_STRIP = 0x0008;
const GL_POLYGON = 0x0009;
const GL_LINES_ADJACENCY = 0x000A;
const GL_LINE_STRIP_ADJACENCY = 0x000B;
const GL_TRIANGLES_ADJACENCY = 0x000C;
const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const GL_PATCHES = 0x000E;
const GL_ACCUM = 0x0100;
const GL_LOAD = 0x0101;
const GL_RETURN = 0x0102;
const GL_MULT = 0x0103;
const GL_ADD = 0x0104;
const GL_NEVER = 0x0200;
const GL_LESS = 0x0201;
const GL_EQUAL = 0x0202;
const GL_LEQUAL = 0x0203;
const GL_GREATER = 0x0204;
const GL_NOTEQUAL = 0x0205;
const GL_GEQUAL = 0x0206;
const GL_ALWAYS = 0x0207;
const GL_SRC_COLOR = 0x0300;
const GL_ONE_MINUS_SRC_COLOR = 0x0301;
const GL_SRC_ALPHA = 0x0302;
const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const GL_DST_ALPHA = 0x0304;
const GL_ONE_MINUS_DST_ALPHA = 0x0305;
const GL_DST_COLOR = 0x0306;
const GL_ONE_MINUS_DST_COLOR = 0x0307;
const GL_SRC_ALPHA_SATURATE = 0x0308;
const GL_FRONT_LEFT = 0x0400;
const GL_FRONT_RIGHT = 0x0401;
const GL_BACK_LEFT = 0x0402;
const GL_BACK_RIGHT = 0x0403;
const GL_FRONT = 0x0404;
const GL_BACK = 0x0405;
const GL_LEFT = 0x0406;
const GL_RIGHT = 0x0407;
const GL_FRONT_AND_BACK = 0x0408;
const GL_AUX0 = 0x0409;
const GL_AUX1 = 0x040A;
const GL_AUX2 = 0x040B;
const GL_AUX3 = 0x040C;
const GL_INVALID_ENUM = 0x0500;
const GL_INVALID_VALUE = 0x0501;
const GL_INVALID_OPERATION = 0x0502;
const GL_STACK_OVERFLOW = 0x0503;
const GL_STACK_UNDERFLOW = 0x0504;
const GL_OUT_OF_MEMORY = 0x0505;
const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const GL_CONTEXT_LOST = 0x0507;
const GL_2D = 0x0600;
const GL_3D = 0x0601;
const GL_3D_COLOR = 0x0602;
const GL_3D_COLOR_TEXTURE = 0x0603;
const GL_4D_COLOR_TEXTURE = 0x0604;
const GL_PASS_THROUGH_TOKEN = 0x0700;
const GL_POINT_TOKEN = 0x0701;
const GL_LINE_TOKEN = 0x0702;
const GL_POLYGON_TOKEN = 0x0703;
const GL_BITMAP_TOKEN = 0x0704;
const GL_DRAW_PIXEL_TOKEN = 0x0705;
const GL_COPY_PIXEL_TOKEN = 0x0706;
const GL_LINE_RESET_TOKEN = 0x0707;
const GL_EXP = 0x0800;
const GL_EXP2 = 0x0801;
const GL_CW = 0x0900;
const GL_CCW = 0x0901;
const GL_COEFF = 0x0A00;
const GL_ORDER = 0x0A01;
const GL_DOMAIN = 0x0A02;
const GL_CURRENT_COLOR = 0x0B00;
const GL_CURRENT_INDEX = 0x0B01;
const GL_CURRENT_NORMAL = 0x0B02;
const GL_CURRENT_TEXTURE_COORDS = 0x0B03;
const GL_CURRENT_RASTER_COLOR = 0x0B04;
const GL_CURRENT_RASTER_INDEX = 0x0B05;
const GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
const GL_CURRENT_RASTER_POSITION = 0x0B07;
const GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
const GL_CURRENT_RASTER_DISTANCE = 0x0B09;
const GL_POINT_SMOOTH = 0x0B10;
const GL_POINT_SIZE = 0x0B11;
const GL_POINT_SIZE_RANGE = 0x0B12;
const GL_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_LINE_SMOOTH = 0x0B20;
const GL_LINE_WIDTH = 0x0B21;
const GL_LINE_WIDTH_RANGE = 0x0B22;
const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_LINE_STIPPLE = 0x0B24;
const GL_LINE_STIPPLE_PATTERN = 0x0B25;
const GL_LINE_STIPPLE_REPEAT = 0x0B26;
const GL_LIST_MODE = 0x0B30;
const GL_MAX_LIST_NESTING = 0x0B31;
const GL_LIST_BASE = 0x0B32;
const GL_LIST_INDEX = 0x0B33;
const GL_POLYGON_MODE = 0x0B40;
const GL_POLYGON_SMOOTH = 0x0B41;
const GL_POLYGON_STIPPLE = 0x0B42;
const GL_EDGE_FLAG = 0x0B43;
const GL_CULL_FACE = 0x0B44;
const GL_CULL_FACE_MODE = 0x0B45;
const GL_FRONT_FACE = 0x0B46;
const GL_LIGHTING = 0x0B50;
const GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
const GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
const GL_LIGHT_MODEL_AMBIENT = 0x0B53;
const GL_SHADE_MODEL = 0x0B54;
const GL_COLOR_MATERIAL_FACE = 0x0B55;
const GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
const GL_COLOR_MATERIAL = 0x0B57;
const GL_FOG = 0x0B60;
const GL_FOG_INDEX = 0x0B61;
const GL_FOG_DENSITY = 0x0B62;
const GL_FOG_START = 0x0B63;
const GL_FOG_END = 0x0B64;
const GL_FOG_MODE = 0x0B65;
const GL_FOG_COLOR = 0x0B66;
const GL_DEPTH_RANGE = 0x0B70;
const GL_DEPTH_TEST = 0x0B71;
const GL_DEPTH_WRITEMASK = 0x0B72;
const GL_DEPTH_CLEAR_VALUE = 0x0B73;
const GL_DEPTH_FUNC = 0x0B74;
const GL_ACCUM_CLEAR_VALUE = 0x0B80;
const GL_STENCIL_TEST = 0x0B90;
const GL_STENCIL_CLEAR_VALUE = 0x0B91;
const GL_STENCIL_FUNC = 0x0B92;
const GL_STENCIL_VALUE_MASK = 0x0B93;
const GL_STENCIL_FAIL = 0x0B94;
const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const GL_STENCIL_REF = 0x0B97;
const GL_STENCIL_WRITEMASK = 0x0B98;
const GL_MATRIX_MODE = 0x0BA0;
const GL_NORMALIZE = 0x0BA1;
const GL_VIEWPORT = 0x0BA2;
const GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
const GL_PROJECTION_STACK_DEPTH = 0x0BA4;
const GL_TEXTURE_STACK_DEPTH = 0x0BA5;
const GL_MODELVIEW_MATRIX = 0x0BA6;
const GL_PROJECTION_MATRIX = 0x0BA7;
const GL_TEXTURE_MATRIX = 0x0BA8;
const GL_ATTRIB_STACK_DEPTH = 0x0BB0;
const GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
const GL_ALPHA_TEST = 0x0BC0;
const GL_ALPHA_TEST_FUNC = 0x0BC1;
const GL_ALPHA_TEST_REF = 0x0BC2;
const GL_DITHER = 0x0BD0;
const GL_BLEND_DST = 0x0BE0;
const GL_BLEND_SRC = 0x0BE1;
const GL_BLEND = 0x0BE2;
const GL_LOGIC_OP_MODE = 0x0BF0;
const GL_INDEX_LOGIC_OP = 0x0BF1;
const GL_LOGIC_OP = 0x0BF1;
const GL_COLOR_LOGIC_OP = 0x0BF2;
const GL_AUX_BUFFERS = 0x0C00;
const GL_DRAW_BUFFER = 0x0C01;
const GL_READ_BUFFER = 0x0C02;
const GL_SCISSOR_BOX = 0x0C10;
const GL_SCISSOR_TEST = 0x0C11;
const GL_INDEX_CLEAR_VALUE = 0x0C20;
const GL_INDEX_WRITEMASK = 0x0C21;
const GL_COLOR_CLEAR_VALUE = 0x0C22;
const GL_COLOR_WRITEMASK = 0x0C23;
const GL_INDEX_MODE = 0x0C30;
const GL_RGBA_MODE = 0x0C31;
const GL_DOUBLEBUFFER = 0x0C32;
const GL_STEREO = 0x0C33;
const GL_RENDER_MODE = 0x0C40;
const GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
const GL_POINT_SMOOTH_HINT = 0x0C51;
const GL_LINE_SMOOTH_HINT = 0x0C52;
const GL_POLYGON_SMOOTH_HINT = 0x0C53;
const GL_FOG_HINT = 0x0C54;
const GL_TEXTURE_GEN_S = 0x0C60;
const GL_TEXTURE_GEN_T = 0x0C61;
const GL_TEXTURE_GEN_R = 0x0C62;
const GL_TEXTURE_GEN_Q = 0x0C63;
const GL_PIXEL_MAP_I_TO_I = 0x0C70;
const GL_PIXEL_MAP_S_TO_S = 0x0C71;
const GL_PIXEL_MAP_I_TO_R = 0x0C72;
const GL_PIXEL_MAP_I_TO_G = 0x0C73;
const GL_PIXEL_MAP_I_TO_B = 0x0C74;
const GL_PIXEL_MAP_I_TO_A = 0x0C75;
const GL_PIXEL_MAP_R_TO_R = 0x0C76;
const GL_PIXEL_MAP_G_TO_G = 0x0C77;
const GL_PIXEL_MAP_B_TO_B = 0x0C78;
const GL_PIXEL_MAP_A_TO_A = 0x0C79;
const GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
const GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
const GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
const GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
const GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
const GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
const GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
const GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
const GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
const GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
const GL_UNPACK_SWAP_BYTES = 0x0CF0;
const GL_UNPACK_LSB_FIRST = 0x0CF1;
const GL_UNPACK_ROW_LENGTH = 0x0CF2;
const GL_UNPACK_SKIP_ROWS = 0x0CF3;
const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const GL_UNPACK_ALIGNMENT = 0x0CF5;
const GL_PACK_SWAP_BYTES = 0x0D00;
const GL_PACK_LSB_FIRST = 0x0D01;
const GL_PACK_ROW_LENGTH = 0x0D02;
const GL_PACK_SKIP_ROWS = 0x0D03;
const GL_PACK_SKIP_PIXELS = 0x0D04;
const GL_PACK_ALIGNMENT = 0x0D05;
const GL_MAP_COLOR = 0x0D10;
const GL_MAP_STENCIL = 0x0D11;
const GL_INDEX_SHIFT = 0x0D12;
const GL_INDEX_OFFSET = 0x0D13;
const GL_RED_SCALE = 0x0D14;
const GL_RED_BIAS = 0x0D15;
const GL_ZOOM_X = 0x0D16;
const GL_ZOOM_Y = 0x0D17;
const GL_GREEN_SCALE = 0x0D18;
const GL_GREEN_BIAS = 0x0D19;
const GL_BLUE_SCALE = 0x0D1A;
const GL_BLUE_BIAS = 0x0D1B;
const GL_ALPHA_SCALE = 0x0D1C;
const GL_ALPHA_BIAS = 0x0D1D;
const GL_DEPTH_SCALE = 0x0D1E;
const GL_DEPTH_BIAS = 0x0D1F;
const GL_MAX_EVAL_ORDER = 0x0D30;
const GL_MAX_LIGHTS = 0x0D31;
const GL_MAX_CLIP_PLANES = 0x0D32;
const GL_MAX_CLIP_DISTANCES = 0x0D32;
const GL_MAX_TEXTURE_SIZE = 0x0D33;
const GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
const GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
const GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
const GL_MAX_NAME_STACK_DEPTH = 0x0D37;
const GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
const GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
const GL_SUBPIXEL_BITS = 0x0D50;
const GL_INDEX_BITS = 0x0D51;
const GL_RED_BITS = 0x0D52;
const GL_GREEN_BITS = 0x0D53;
const GL_BLUE_BITS = 0x0D54;
const GL_ALPHA_BITS = 0x0D55;
const GL_DEPTH_BITS = 0x0D56;
const GL_STENCIL_BITS = 0x0D57;
const GL_ACCUM_RED_BITS = 0x0D58;
const GL_ACCUM_GREEN_BITS = 0x0D59;
const GL_ACCUM_BLUE_BITS = 0x0D5A;
const GL_ACCUM_ALPHA_BITS = 0x0D5B;
const GL_NAME_STACK_DEPTH = 0x0D70;
const GL_AUTO_NORMAL = 0x0D80;
const GL_MAP1_COLOR_4 = 0x0D90;
const GL_MAP1_INDEX = 0x0D91;
const GL_MAP1_NORMAL = 0x0D92;
const GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
const GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
const GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
const GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
const GL_MAP1_VERTEX_3 = 0x0D97;
const GL_MAP1_VERTEX_4 = 0x0D98;
const GL_MAP2_COLOR_4 = 0x0DB0;
const GL_MAP2_INDEX = 0x0DB1;
const GL_MAP2_NORMAL = 0x0DB2;
const GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
const GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
const GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
const GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
const GL_MAP2_VERTEX_3 = 0x0DB7;
const GL_MAP2_VERTEX_4 = 0x0DB8;
const GL_MAP1_GRID_DOMAIN = 0x0DD0;
const GL_MAP1_GRID_SEGMENTS = 0x0DD1;
const GL_MAP2_GRID_DOMAIN = 0x0DD2;
const GL_MAP2_GRID_SEGMENTS = 0x0DD3;
const GL_TEXTURE_1D = 0x0DE0;
const GL_TEXTURE_2D = 0x0DE1;
const GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
const GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
const GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
const GL_SELECTION_BUFFER_POINTER = 0x0DF3;
const GL_SELECTION_BUFFER_SIZE = 0x0DF4;
const GL_TEXTURE_WIDTH = 0x1000;
const GL_TEXTURE_HEIGHT = 0x1001;
const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const GL_TEXTURE_COMPONENTS = 0x1003;
const GL_TEXTURE_BORDER_COLOR = 0x1004;
const GL_TEXTURE_BORDER = 0x1005;
const GL_TEXTURE_TARGET = 0x1006;
const GL_DONT_CARE = 0x1100;
const GL_FASTEST = 0x1101;
const GL_NICEST = 0x1102;
const GL_AMBIENT = 0x1200;
const GL_DIFFUSE = 0x1201;
const GL_SPECULAR = 0x1202;
const GL_POSITION = 0x1203;
const GL_SPOT_DIRECTION = 0x1204;
const GL_SPOT_EXPONENT = 0x1205;
const GL_SPOT_CUTOFF = 0x1206;
const GL_CONSTANT_ATTENUATION = 0x1207;
const GL_LINEAR_ATTENUATION = 0x1208;
const GL_QUADRATIC_ATTENUATION = 0x1209;
const GL_COMPILE = 0x1300;
const GL_COMPILE_AND_EXECUTE = 0x1301;
const GL_BYTE = 0x1400;
const GL_UNSIGNED_BYTE = 0x1401;
const GL_SHORT = 0x1402;
const GL_UNSIGNED_SHORT = 0x1403;
const GL_INT = 0x1404;
const GL_UNSIGNED_INT = 0x1405;
const GL_FLOAT = 0x1406;
const GL_2_BYTES = 0x1407;
const GL_3_BYTES = 0x1408;
const GL_4_BYTES = 0x1409;
const GL_DOUBLE = 0x140A;
const GL_HALF_FLOAT = 0x140B;
const GL_FIXED = 0x140C;
const GL_CLEAR = 0x1500;
const GL_AND = 0x1501;
const GL_AND_REVERSE = 0x1502;
const GL_COPY = 0x1503;
const GL_AND_INVERTED = 0x1504;
const GL_NOOP = 0x1505;
const GL_XOR = 0x1506;
const GL_OR = 0x1507;
const GL_NOR = 0x1508;
const GL_EQUIV = 0x1509;
const GL_INVERT = 0x150A;
const GL_OR_REVERSE = 0x150B;
const GL_COPY_INVERTED = 0x150C;
const GL_OR_INVERTED = 0x150D;
const GL_NAND = 0x150E;
const GL_SET = 0x150F;
const GL_EMISSION = 0x1600;
const GL_SHININESS = 0x1601;
const GL_AMBIENT_AND_DIFFUSE = 0x1602;
const GL_COLOR_INDEXES = 0x1603;
const GL_MODELVIEW = 0x1700;
const GL_PROJECTION = 0x1701;
const GL_TEXTURE = 0x1702;
const GL_COLOR = 0x1800;
const GL_DEPTH = 0x1801;
const GL_STENCIL = 0x1802;
const GL_COLOR_INDEX = 0x1900;
const GL_STENCIL_INDEX = 0x1901;
const GL_DEPTH_COMPONENT = 0x1902;
const GL_RED = 0x1903;
const GL_GREEN = 0x1904;
const GL_BLUE = 0x1905;
const GL_ALPHA = 0x1906;
const GL_RGB = 0x1907;
const GL_RGBA = 0x1908;
const GL_LUMINANCE = 0x1909;
const GL_LUMINANCE_ALPHA = 0x190A;
const GL_BITMAP = 0x1A00;
const GL_POINT = 0x1B00;
const GL_LINE = 0x1B01;
const GL_FILL = 0x1B02;
const GL_RENDER = 0x1C00;
const GL_FEEDBACK = 0x1C01;
const GL_SELECT = 0x1C02;
const GL_FLAT = 0x1D00;
const GL_SMOOTH = 0x1D01;
const GL_KEEP = 0x1E00;
const GL_REPLACE = 0x1E01;
const GL_INCR = 0x1E02;
const GL_DECR = 0x1E03;
const GL_VENDOR = 0x1F00;
const GL_RENDERER = 0x1F01;
const GL_VERSION = 0x1F02;
const GL_EXTENSIONS = 0x1F03;
const GL_S = 0x2000;
const GL_T = 0x2001;
const GL_R = 0x2002;
const GL_Q = 0x2003;
const GL_MODULATE = 0x2100;
const GL_DECAL = 0x2101;
const GL_TEXTURE_ENV_MODE = 0x2200;
const GL_TEXTURE_ENV_COLOR = 0x2201;
const GL_TEXTURE_ENV = 0x2300;
const GL_EYE_LINEAR = 0x2400;
const GL_OBJECT_LINEAR = 0x2401;
const GL_SPHERE_MAP = 0x2402;
const GL_TEXTURE_GEN_MODE = 0x2500;
const GL_OBJECT_PLANE = 0x2501;
const GL_EYE_PLANE = 0x2502;
const GL_NEAREST = 0x2600;
const GL_LINEAR = 0x2601;
const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const GL_TEXTURE_MAG_FILTER = 0x2800;
const GL_TEXTURE_MIN_FILTER = 0x2801;
const GL_TEXTURE_WRAP_S = 0x2802;
const GL_TEXTURE_WRAP_T = 0x2803;
const GL_CLAMP = 0x2900;
const GL_REPEAT = 0x2901;
const GL_POLYGON_OFFSET_UNITS = 0x2A00;
const GL_POLYGON_OFFSET_POINT = 0x2A01;
const GL_POLYGON_OFFSET_LINE = 0x2A02;
const GL_R3_G3_B2 = 0x2A10;
const GL_V2F = 0x2A20;
const GL_V3F = 0x2A21;
const GL_C4UB_V2F = 0x2A22;
const GL_C4UB_V3F = 0x2A23;
const GL_C3F_V3F = 0x2A24;
const GL_N3F_V3F = 0x2A25;
const GL_C4F_N3F_V3F = 0x2A26;
const GL_T2F_V3F = 0x2A27;
const GL_T4F_V4F = 0x2A28;
const GL_T2F_C4UB_V3F = 0x2A29;
const GL_T2F_C3F_V3F = 0x2A2A;
const GL_T2F_N3F_V3F = 0x2A2B;
const GL_T2F_C4F_N3F_V3F = 0x2A2C;
const GL_T4F_C4F_N3F_V4F = 0x2A2D;
const GL_CLIP_PLANE0 = 0x3000;
const GL_CLIP_DISTANCE0 = 0x3000;
const GL_CLIP_PLANE1 = 0x3001;
const GL_CLIP_DISTANCE1 = 0x3001;
const GL_CLIP_PLANE2 = 0x3002;
const GL_CLIP_DISTANCE2 = 0x3002;
const GL_CLIP_PLANE3 = 0x3003;
const GL_CLIP_DISTANCE3 = 0x3003;
const GL_CLIP_PLANE4 = 0x3004;
const GL_CLIP_DISTANCE4 = 0x3004;
const GL_CLIP_PLANE5 = 0x3005;
const GL_CLIP_DISTANCE5 = 0x3005;
const GL_CLIP_DISTANCE6 = 0x3006;
const GL_CLIP_DISTANCE7 = 0x3007;
const GL_LIGHT0 = 0x4000;
const GL_LIGHT1 = 0x4001;
const GL_LIGHT2 = 0x4002;
const GL_LIGHT3 = 0x4003;
const GL_LIGHT4 = 0x4004;
const GL_LIGHT5 = 0x4005;
const GL_LIGHT6 = 0x4006;
const GL_LIGHT7 = 0x4007;
const GL_BLEND_EQUATION_RGB = 0x8009;
const GL_CONVOLUTION_1D = 0x8010;
const GL_CONVOLUTION_2D = 0x8011;
const GL_SEPARABLE_2D = 0x8012;
const GL_HISTOGRAM = 0x8024;
const GL_PROXY_HISTOGRAM = 0x8025;
const GL_MINMAX = 0x802E;
const GL_POLYGON_OFFSET_FILL = 0x8037;
const GL_POLYGON_OFFSET_FACTOR = 0x8038;
const GL_RESCALE_NORMAL = 0x803A;
const GL_ALPHA4 = 0x803B;
const GL_ALPHA8 = 0x803C;
const GL_ALPHA12 = 0x803D;
const GL_ALPHA16 = 0x803E;
const GL_LUMINANCE4 = 0x803F;
const GL_LUMINANCE8 = 0x8040;
const GL_LUMINANCE12 = 0x8041;
const GL_LUMINANCE16 = 0x8042;
const GL_LUMINANCE4_ALPHA4 = 0x8043;
const GL_LUMINANCE6_ALPHA2 = 0x8044;
const GL_LUMINANCE8_ALPHA8 = 0x8045;
const GL_LUMINANCE12_ALPHA4 = 0x8046;
const GL_LUMINANCE12_ALPHA12 = 0x8047;
const GL_LUMINANCE16_ALPHA16 = 0x8048;
const GL_INTENSITY = 0x8049;
const GL_INTENSITY4 = 0x804A;
const GL_INTENSITY8 = 0x804B;
const GL_INTENSITY12 = 0x804C;
const GL_INTENSITY16 = 0x804D;
const GL_RGB4 = 0x804F;
const GL_RGB5 = 0x8050;
const GL_RGB8 = 0x8051;
const GL_RGB10 = 0x8052;
const GL_RGB12 = 0x8053;
const GL_RGB16 = 0x8054;
const GL_RGBA2 = 0x8055;
const GL_RGBA4 = 0x8056;
const GL_RGB5_A1 = 0x8057;
const GL_RGBA8 = 0x8058;
const GL_RGB10_A2 = 0x8059;
const GL_RGBA12 = 0x805A;
const GL_RGBA16 = 0x805B;
const GL_TEXTURE_RED_SIZE = 0x805C;
const GL_TEXTURE_GREEN_SIZE = 0x805D;
const GL_TEXTURE_BLUE_SIZE = 0x805E;
const GL_TEXTURE_ALPHA_SIZE = 0x805F;
const GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
const GL_TEXTURE_INTENSITY_SIZE = 0x8061;
const GL_PROXY_TEXTURE_1D = 0x8063;
const GL_PROXY_TEXTURE_2D = 0x8064;
const GL_TEXTURE_PRIORITY = 0x8066;
const GL_TEXTURE_RESIDENT = 0x8067;
const GL_TEXTURE_BINDING_1D = 0x8068;
const GL_TEXTURE_BINDING_2D = 0x8069;
const GL_TEXTURE_BINDING_3D = 0x806A;
const GL_VERTEX_ARRAY = 0x8074;
const GL_NORMAL_ARRAY = 0x8075;
const GL_COLOR_ARRAY = 0x8076;
const GL_INDEX_ARRAY = 0x8077;
const GL_TEXTURE_COORD_ARRAY = 0x8078;
const GL_EDGE_FLAG_ARRAY = 0x8079;
const GL_VERTEX_ARRAY_SIZE = 0x807A;
const GL_VERTEX_ARRAY_TYPE = 0x807B;
const GL_VERTEX_ARRAY_STRIDE = 0x807C;
const GL_NORMAL_ARRAY_TYPE = 0x807E;
const GL_NORMAL_ARRAY_STRIDE = 0x807F;
const GL_COLOR_ARRAY_SIZE = 0x8081;
const GL_COLOR_ARRAY_TYPE = 0x8082;
const GL_COLOR_ARRAY_STRIDE = 0x8083;
const GL_INDEX_ARRAY_TYPE = 0x8085;
const GL_INDEX_ARRAY_STRIDE = 0x8086;
const GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
const GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
const GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
const GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
const GL_VERTEX_ARRAY_POINTER = 0x808E;
const GL_NORMAL_ARRAY_POINTER = 0x808F;
const GL_COLOR_ARRAY_POINTER = 0x8090;
const GL_INDEX_ARRAY_POINTER = 0x8091;
const GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
const GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
const GL_COLOR_TABLE = 0x80D0;
const GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
const GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
const GL_PROXY_COLOR_TABLE = 0x80D3;
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
const GL_PARAMETER_BUFFER = 0x80EE;
const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
const GL_POINT_SIZE_MIN = 0x8126;
const GL_POINT_SIZE_MAX = 0x8127;
const GL_POINT_DISTANCE_ATTENUATION = 0x8129;
const GL_GENERATE_MIPMAP = 0x8191;
const GL_GENERATE_MIPMAP_HINT = 0x8192;
const GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
const GL_SINGLE_COLOR = 0x81F9;
const GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GL_FRAMEBUFFER_DEFAULT = 0x8218;
const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const GL_MAJOR_VERSION = 0x821B;
const GL_MINOR_VERSION = 0x821C;
const GL_NUM_EXTENSIONS = 0x821D;
const GL_CONTEXT_FLAGS = 0x821E;
const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
const GL_BUFFER_STORAGE_FLAGS = 0x8220;
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
const GL_INDEX = 0x8222;
const GL_COMPRESSED_RED = 0x8225;
const GL_COMPRESSED_RG = 0x8226;
const GL_RG = 0x8227;
const GL_RG_INTEGER = 0x8228;
const GL_R8 = 0x8229;
const GL_R16 = 0x822A;
const GL_RG8 = 0x822B;
const GL_RG16 = 0x822C;
const GL_R16F = 0x822D;
const GL_R32F = 0x822E;
const GL_RG16F = 0x822F;
const GL_RG32F = 0x8230;
const GL_R8I = 0x8231;
const GL_R8UI = 0x8232;
const GL_R16I = 0x8233;
const GL_R16UI = 0x8234;
const GL_R32I = 0x8235;
const GL_R32UI = 0x8236;
const GL_RG8I = 0x8237;
const GL_RG8UI = 0x8238;
const GL_RG16I = 0x8239;
const GL_RG16UI = 0x823A;
const GL_RG32I = 0x823B;
const GL_RG32UI = 0x823C;
const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const GL_DEBUG_SOURCE_API = 0x8246;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const GL_DEBUG_SOURCE_OTHER = 0x824B;
const GL_DEBUG_TYPE_ERROR = 0x824C;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const GL_DEBUG_TYPE_OTHER = 0x8251;
const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
const GL_GUILTY_CONTEXT_RESET = 0x8253;
const GL_INNOCENT_CONTEXT_RESET = 0x8254;
const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GL_PROGRAM_SEPARABLE = 0x8258;
const GL_ACTIVE_PROGRAM = 0x8259;
const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const GL_MAX_VIEWPORTS = 0x825B;
const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const GL_LAYER_PROVOKING_VERTEX = 0x825E;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GL_UNDEFINED_VERTEX = 0x8260;
const GL_NO_RESET_NOTIFICATION = 0x8261;
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const GL_DEBUG_TYPE_MARKER = 0x8268;
const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const GL_INTERNALFORMAT_PREFERRED = 0x8270;
const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const GL_MAX_WIDTH = 0x827E;
const GL_MAX_HEIGHT = 0x827F;
const GL_MAX_DEPTH = 0x8280;
const GL_MAX_LAYERS = 0x8281;
const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const GL_COLOR_COMPONENTS = 0x8283;
const GL_DEPTH_COMPONENTS = 0x8284;
const GL_STENCIL_COMPONENTS = 0x8285;
const GL_COLOR_RENDERABLE = 0x8286;
const GL_DEPTH_RENDERABLE = 0x8287;
const GL_STENCIL_RENDERABLE = 0x8288;
const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GL_FRAMEBUFFER_BLEND = 0x828B;
const GL_READ_PIXELS = 0x828C;
const GL_READ_PIXELS_FORMAT = 0x828D;
const GL_READ_PIXELS_TYPE = 0x828E;
const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const GL_TEXTURE_IMAGE_TYPE = 0x8290;
const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const GL_MIPMAP = 0x8293;
const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const GL_AUTO_GENERATE_MIPMAP = 0x8295;
const GL_COLOR_ENCODING = 0x8296;
const GL_SRGB_READ = 0x8297;
const GL_SRGB_WRITE = 0x8298;
const GL_FILTER = 0x829A;
const GL_VERTEX_TEXTURE = 0x829B;
const GL_TESS_CONTROL_TEXTURE = 0x829C;
const GL_TESS_EVALUATION_TEXTURE = 0x829D;
const GL_GEOMETRY_TEXTURE = 0x829E;
const GL_FRAGMENT_TEXTURE = 0x829F;
const GL_COMPUTE_TEXTURE = 0x82A0;
const GL_TEXTURE_SHADOW = 0x82A1;
const GL_TEXTURE_GATHER = 0x82A2;
const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const GL_SHADER_IMAGE_LOAD = 0x82A4;
const GL_SHADER_IMAGE_STORE = 0x82A5;
const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const GL_IMAGE_TEXEL_SIZE = 0x82A7;
const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const GL_IMAGE_PIXEL_TYPE = 0x82AA;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const GL_CLEAR_BUFFER = 0x82B4;
const GL_TEXTURE_VIEW = 0x82B5;
const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const GL_FULL_SUPPORT = 0x82B7;
const GL_CAVEAT_SUPPORT = 0x82B8;
const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const GL_VIEW_CLASS_128_BITS = 0x82C4;
const GL_VIEW_CLASS_96_BITS = 0x82C5;
const GL_VIEW_CLASS_64_BITS = 0x82C6;
const GL_VIEW_CLASS_48_BITS = 0x82C7;
const GL_VIEW_CLASS_32_BITS = 0x82C8;
const GL_VIEW_CLASS_24_BITS = 0x82C9;
const GL_VIEW_CLASS_16_BITS = 0x82CA;
const GL_VIEW_CLASS_8_BITS = 0x82CB;
const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const GL_VERTEX_BINDING_OFFSET = 0x82D7;
const GL_VERTEX_BINDING_STRIDE = 0x82D8;
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const GL_BUFFER = 0x82E0;
const GL_SHADER = 0x82E1;
const GL_PROGRAM = 0x82E2;
const GL_QUERY = 0x82E3;
const GL_PROGRAM_PIPELINE = 0x82E4;
const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
const GL_SAMPLER = 0x82E6;
const GL_DISPLAY_LIST = 0x82E7;
const GL_MAX_LABEL_LENGTH = 0x82E8;
const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const GL_QUERY_TARGET = 0x82EA;
const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
const GL_VERTICES_SUBMITTED = 0x82EE;
const GL_PRIMITIVES_SUBMITTED = 0x82EF;
const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
const GL_MAX_CULL_DISTANCES = 0x82F9;
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
const GL_FOG_COORDINATE_SOURCE = 0x8450;
const GL_FOG_COORD_SRC = 0x8450;
const GL_FOG_COORDINATE = 0x8451;
const GL_FOG_COORD = 0x8451;
const GL_FRAGMENT_DEPTH = 0x8452;
const GL_CURRENT_FOG_COORDINATE = 0x8453;
const GL_CURRENT_FOG_COORD = 0x8453;
const GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
const GL_FOG_COORD_ARRAY_TYPE = 0x8454;
const GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
const GL_FOG_COORD_ARRAY_POINTER = 0x8456;
const GL_FOG_COORDINATE_ARRAY = 0x8457;
const GL_FOG_COORD_ARRAY = 0x8457;
const GL_COLOR_SUM = 0x8458;
const GL_CURRENT_SECONDARY_COLOR = 0x8459;
const GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
const GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
const GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
const GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
const GL_SECONDARY_COLOR_ARRAY = 0x845E;
const GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
const GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
const GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
const GL_MAX_TEXTURE_UNITS = 0x84E2;
const GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
const GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
const GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
const GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
const GL_SUBTRACT = 0x84E7;
const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const GL_COMPRESSED_ALPHA = 0x84E9;
const GL_COMPRESSED_LUMINANCE = 0x84EA;
const GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
const GL_COMPRESSED_INTENSITY = 0x84EC;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const GL_TEXTURE_RECTANGLE = 0x84F5;
const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const GL_DEPTH_STENCIL = 0x84F9;
const GL_UNSIGNED_INT_24_8 = 0x84FA;
const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
const GL_TEXTURE_FILTER_CONTROL = 0x8500;
const GL_NORMAL_MAP = 0x8511;
const GL_REFLECTION_MAP = 0x8512;
const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const GL_COMBINE = 0x8570;
const GL_COMBINE_RGB = 0x8571;
const GL_COMBINE_ALPHA = 0x8572;
const GL_RGB_SCALE = 0x8573;
const GL_ADD_SIGNED = 0x8574;
const GL_INTERPOLATE = 0x8575;
const GL_CONSTANT = 0x8576;
const GL_PRIMARY_COLOR = 0x8577;
const GL_PREVIOUS = 0x8578;
const GL_SOURCE0_RGB = 0x8580;
const GL_SRC0_RGB = 0x8580;
const GL_SOURCE1_RGB = 0x8581;
const GL_SRC1_RGB = 0x8581;
const GL_SOURCE2_RGB = 0x8582;
const GL_SRC2_RGB = 0x8582;
const GL_SOURCE0_ALPHA = 0x8588;
const GL_SRC0_ALPHA = 0x8588;
const GL_SOURCE1_ALPHA = 0x8589;
const GL_SRC1_ALPHA = 0x8589;
const GL_SOURCE2_ALPHA = 0x858A;
const GL_SRC2_ALPHA = 0x858A;
const GL_OPERAND0_RGB = 0x8590;
const GL_OPERAND1_RGB = 0x8591;
const GL_OPERAND2_RGB = 0x8592;
const GL_OPERAND0_ALPHA = 0x8598;
const GL_OPERAND1_ALPHA = 0x8599;
const GL_OPERAND2_ALPHA = 0x859A;
const GL_VERTEX_ARRAY_BINDING = 0x85B5;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const GL_PROGRAM_POINT_SIZE = 0x8642;
const GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const GL_DEPTH_CLAMP = 0x864F;
const GL_DOT3_RGB = 0x86AE;
const GL_DOT3_RGBA = 0x86AF;
const GL_PROGRAM_BINARY_LENGTH = 0x8741;
const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const GL_BUFFER_SIZE = 0x8764;
const GL_BUFFER_USAGE = 0x8765;
const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const GL_STENCIL_BACK_FUNC = 0x8800;
const GL_STENCIL_BACK_FAIL = 0x8801;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const GL_RGBA32F = 0x8814;
const GL_RGB32F = 0x8815;
const GL_RGBA16F = 0x881A;
const GL_RGB16F = 0x881B;
const GL_MAX_DRAW_BUFFERS = 0x8824;
const GL_DRAW_BUFFER0 = 0x8825;
const GL_DRAW_BUFFER1 = 0x8826;
const GL_DRAW_BUFFER2 = 0x8827;
const GL_DRAW_BUFFER3 = 0x8828;
const GL_DRAW_BUFFER4 = 0x8829;
const GL_DRAW_BUFFER5 = 0x882A;
const GL_DRAW_BUFFER6 = 0x882B;
const GL_DRAW_BUFFER7 = 0x882C;
const GL_DRAW_BUFFER8 = 0x882D;
const GL_DRAW_BUFFER9 = 0x882E;
const GL_DRAW_BUFFER10 = 0x882F;
const GL_DRAW_BUFFER11 = 0x8830;
const GL_DRAW_BUFFER12 = 0x8831;
const GL_DRAW_BUFFER13 = 0x8832;
const GL_DRAW_BUFFER14 = 0x8833;
const GL_DRAW_BUFFER15 = 0x8834;
const GL_BLEND_EQUATION_ALPHA = 0x883D;
const GL_DEPTH_TEXTURE_MODE = 0x884B;
const GL_COMPARE_R_TO_TEXTURE = 0x884E;
const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const GL_POINT_SPRITE = 0x8861;
const GL_COORD_REPLACE = 0x8862;
const GL_QUERY_COUNTER_BITS = 0x8864;
const GL_CURRENT_QUERY = 0x8865;
const GL_QUERY_RESULT = 0x8866;
const GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GL_MAX_VERTEX_ATTRIBS = 0x8869;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const GL_MAX_TEXTURE_COORDS = 0x8871;
const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const GL_ARRAY_BUFFER = 0x8892;
const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const GL_ARRAY_BUFFER_BINDING = 0x8894;
const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
const GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
const GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
const GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
const GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GL_READ_ONLY = 0x88B8;
const GL_WRITE_ONLY = 0x88B9;
const GL_READ_WRITE = 0x88BA;
const GL_BUFFER_ACCESS = 0x88BB;
const GL_BUFFER_MAPPED = 0x88BC;
const GL_BUFFER_MAP_POINTER = 0x88BD;
const GL_TIME_ELAPSED = 0x88BF;
const GL_STREAM_DRAW = 0x88E0;
const GL_STREAM_READ = 0x88E1;
const GL_STREAM_COPY = 0x88E2;
const GL_STATIC_DRAW = 0x88E4;
const GL_STATIC_READ = 0x88E5;
const GL_STATIC_COPY = 0x88E6;
const GL_DYNAMIC_DRAW = 0x88E8;
const GL_DYNAMIC_READ = 0x88E9;
const GL_DYNAMIC_COPY = 0x88EA;
const GL_PIXEL_PACK_BUFFER = 0x88EB;
const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const GL_DEPTH24_STENCIL8 = 0x88F0;
const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const GL_SRC1_COLOR = 0x88F9;
const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const GL_SAMPLES_PASSED = 0x8914;
const GL_GEOMETRY_VERTICES_OUT = 0x8916;
const GL_GEOMETRY_INPUT_TYPE = 0x8917;
const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const GL_SAMPLER_BINDING = 0x8919;
const GL_CLAMP_VERTEX_COLOR = 0x891A;
const GL_CLAMP_FRAGMENT_COLOR = 0x891B;
const GL_CLAMP_READ_COLOR = 0x891C;
const GL_FIXED_ONLY = 0x891D;
const GL_UNIFORM_BUFFER = 0x8A11;
const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const GL_UNIFORM_BUFFER_START = 0x8A29;
const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const GL_UNIFORM_TYPE = 0x8A37;
const GL_UNIFORM_SIZE = 0x8A38;
const GL_UNIFORM_NAME_LENGTH = 0x8A39;
const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const GL_UNIFORM_OFFSET = 0x8A3B;
const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GL_FRAGMENT_SHADER = 0x8B30;
const GL_VERTEX_SHADER = 0x8B31;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const GL_MAX_VARYING_FLOATS = 0x8B4B;
const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GL_SHADER_TYPE = 0x8B4F;
const GL_FLOAT_VEC2 = 0x8B50;
const GL_FLOAT_VEC3 = 0x8B51;
const GL_FLOAT_VEC4 = 0x8B52;
const GL_INT_VEC2 = 0x8B53;
const GL_INT_VEC3 = 0x8B54;
const GL_INT_VEC4 = 0x8B55;
const GL_BOOL = 0x8B56;
const GL_BOOL_VEC2 = 0x8B57;
const GL_BOOL_VEC3 = 0x8B58;
const GL_BOOL_VEC4 = 0x8B59;
const GL_FLOAT_MAT2 = 0x8B5A;
const GL_FLOAT_MAT3 = 0x8B5B;
const GL_FLOAT_MAT4 = 0x8B5C;
const GL_SAMPLER_1D = 0x8B5D;
const GL_SAMPLER_2D = 0x8B5E;
const GL_SAMPLER_3D = 0x8B5F;
const GL_SAMPLER_CUBE = 0x8B60;
const GL_SAMPLER_1D_SHADOW = 0x8B61;
const GL_SAMPLER_2D_SHADOW = 0x8B62;
const GL_SAMPLER_2D_RECT = 0x8B63;
const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const GL_FLOAT_MAT2X3 = 0x8B65;
const GL_FLOAT_MAT2X4 = 0x8B66;
const GL_FLOAT_MAT3X2 = 0x8B67;
const GL_FLOAT_MAT3X4 = 0x8B68;
const GL_FLOAT_MAT4X2 = 0x8B69;
const GL_FLOAT_MAT4X3 = 0x8B6A;
const GL_DELETE_STATUS = 0x8B80;
const GL_COMPILE_STATUS = 0x8B81;
const GL_LINK_STATUS = 0x8B82;
const GL_VALIDATE_STATUS = 0x8B83;
const GL_INFO_LOG_LENGTH = 0x8B84;
const GL_ATTACHED_SHADERS = 0x8B85;
const GL_ACTIVE_UNIFORMS = 0x8B86;
const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const GL_SHADER_SOURCE_LENGTH = 0x8B88;
const GL_ACTIVE_ATTRIBUTES = 0x8B89;
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const GL_CURRENT_PROGRAM = 0x8B8D;
const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GL_TEXTURE_RED_TYPE = 0x8C10;
const GL_TEXTURE_GREEN_TYPE = 0x8C11;
const GL_TEXTURE_BLUE_TYPE = 0x8C12;
const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
const GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const GL_UNSIGNED_NORMALIZED = 0x8C17;
const GL_TEXTURE_1D_ARRAY = 0x8C18;
const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const GL_TEXTURE_2D_ARRAY = 0x8C1A;
const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const GL_TEXTURE_BUFFER = 0x8C2A;
const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const GL_ANY_SAMPLES_PASSED = 0x8C2F;
const GL_SAMPLE_SHADING = 0x8C36;
const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const GL_R11F_G11F_B10F = 0x8C3A;
const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const GL_RGB9_E5 = 0x8C3D;
const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const GL_SRGB = 0x8C40;
const GL_SRGB8 = 0x8C41;
const GL_SRGB_ALPHA = 0x8C42;
const GL_SRGB8_ALPHA8 = 0x8C43;
const GL_SLUMINANCE_ALPHA = 0x8C44;
const GL_SLUMINANCE8_ALPHA8 = 0x8C45;
const GL_SLUMINANCE = 0x8C46;
const GL_SLUMINANCE8 = 0x8C47;
const GL_COMPRESSED_SRGB = 0x8C48;
const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const GL_COMPRESSED_SLUMINANCE = 0x8C4A;
const GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GL_PRIMITIVES_GENERATED = 0x8C87;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GL_RASTERIZER_DISCARD = 0x8C89;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const GL_SEPARATE_ATTRIBS = 0x8C8D;
const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const GL_LOWER_LEFT = 0x8CA1;
const GL_UPPER_LEFT = 0x8CA2;
const GL_STENCIL_BACK_REF = 0x8CA3;
const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_RENDERBUFFER_BINDING = 0x8CA7;
const GL_READ_FRAMEBUFFER = 0x8CA8;
const GL_DRAW_FRAMEBUFFER = 0x8CA9;
const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const GL_DEPTH_COMPONENT32F = 0x8CAC;
const GL_DEPTH32F_STENCIL8 = 0x8CAD;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const GL_COLOR_ATTACHMENT0 = 0x8CE0;
const GL_COLOR_ATTACHMENT1 = 0x8CE1;
const GL_COLOR_ATTACHMENT2 = 0x8CE2;
const GL_COLOR_ATTACHMENT3 = 0x8CE3;
const GL_COLOR_ATTACHMENT4 = 0x8CE4;
const GL_COLOR_ATTACHMENT5 = 0x8CE5;
const GL_COLOR_ATTACHMENT6 = 0x8CE6;
const GL_COLOR_ATTACHMENT7 = 0x8CE7;
const GL_COLOR_ATTACHMENT8 = 0x8CE8;
const GL_COLOR_ATTACHMENT9 = 0x8CE9;
const GL_COLOR_ATTACHMENT10 = 0x8CEA;
const GL_COLOR_ATTACHMENT11 = 0x8CEB;
const GL_COLOR_ATTACHMENT12 = 0x8CEC;
const GL_COLOR_ATTACHMENT13 = 0x8CED;
const GL_COLOR_ATTACHMENT14 = 0x8CEE;
const GL_COLOR_ATTACHMENT15 = 0x8CEF;
const GL_COLOR_ATTACHMENT16 = 0x8CF0;
const GL_COLOR_ATTACHMENT17 = 0x8CF1;
const GL_COLOR_ATTACHMENT18 = 0x8CF2;
const GL_COLOR_ATTACHMENT19 = 0x8CF3;
const GL_COLOR_ATTACHMENT20 = 0x8CF4;
const GL_COLOR_ATTACHMENT21 = 0x8CF5;
const GL_COLOR_ATTACHMENT22 = 0x8CF6;
const GL_COLOR_ATTACHMENT23 = 0x8CF7;
const GL_COLOR_ATTACHMENT24 = 0x8CF8;
const GL_COLOR_ATTACHMENT25 = 0x8CF9;
const GL_COLOR_ATTACHMENT26 = 0x8CFA;
const GL_COLOR_ATTACHMENT27 = 0x8CFB;
const GL_COLOR_ATTACHMENT28 = 0x8CFC;
const GL_COLOR_ATTACHMENT29 = 0x8CFD;
const GL_COLOR_ATTACHMENT30 = 0x8CFE;
const GL_COLOR_ATTACHMENT31 = 0x8CFF;
const GL_DEPTH_ATTACHMENT = 0x8D00;
const GL_STENCIL_ATTACHMENT = 0x8D20;
const GL_FRAMEBUFFER = 0x8D40;
const GL_RENDERBUFFER = 0x8D41;
const GL_RENDERBUFFER_WIDTH = 0x8D42;
const GL_RENDERBUFFER_HEIGHT = 0x8D43;
const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const GL_STENCIL_INDEX1 = 0x8D46;
const GL_STENCIL_INDEX4 = 0x8D47;
const GL_STENCIL_INDEX8 = 0x8D48;
const GL_STENCIL_INDEX16 = 0x8D49;
const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GL_MAX_SAMPLES = 0x8D57;
const GL_RGB565 = 0x8D62;
const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GL_MAX_ELEMENT_INDEX = 0x8D6B;
const GL_RGBA32UI = 0x8D70;
const GL_RGB32UI = 0x8D71;
const GL_RGBA16UI = 0x8D76;
const GL_RGB16UI = 0x8D77;
const GL_RGBA8UI = 0x8D7C;
const GL_RGB8UI = 0x8D7D;
const GL_RGBA32I = 0x8D82;
const GL_RGB32I = 0x8D83;
const GL_RGBA16I = 0x8D88;
const GL_RGB16I = 0x8D89;
const GL_RGBA8I = 0x8D8E;
const GL_RGB8I = 0x8D8F;
const GL_RED_INTEGER = 0x8D94;
const GL_GREEN_INTEGER = 0x8D95;
const GL_BLUE_INTEGER = 0x8D96;
const GL_ALPHA_INTEGER = 0x8D97;
const GL_RGB_INTEGER = 0x8D98;
const GL_RGBA_INTEGER = 0x8D99;
const GL_BGR_INTEGER = 0x8D9A;
const GL_BGRA_INTEGER = 0x8D9B;
const GL_INT_2_10_10_10_REV = 0x8D9F;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GL_FRAMEBUFFER_SRGB = 0x8DB9;
const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const GL_SAMPLER_1D_ARRAY = 0x8DC0;
const GL_SAMPLER_2D_ARRAY = 0x8DC1;
const GL_SAMPLER_BUFFER = 0x8DC2;
const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const GL_INT_SAMPLER_1D = 0x8DC9;
const GL_INT_SAMPLER_2D = 0x8DCA;
const GL_INT_SAMPLER_3D = 0x8DCB;
const GL_INT_SAMPLER_CUBE = 0x8DCC;
const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const GL_INT_SAMPLER_BUFFER = 0x8DD0;
const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const GL_GEOMETRY_SHADER = 0x8DD9;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const GL_ACTIVE_SUBROUTINES = 0x8DE5;
const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const GL_MAX_SUBROUTINES = 0x8DE7;
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const GL_LOW_FLOAT = 0x8DF0;
const GL_MEDIUM_FLOAT = 0x8DF1;
const GL_HIGH_FLOAT = 0x8DF2;
const GL_LOW_INT = 0x8DF3;
const GL_MEDIUM_INT = 0x8DF4;
const GL_HIGH_INT = 0x8DF5;
const GL_SHADER_BINARY_FORMATS = 0x8DF8;
const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const GL_SHADER_COMPILER = 0x8DFA;
const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const GL_MAX_VARYING_VECTORS = 0x8DFC;
const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const GL_QUERY_WAIT = 0x8E13;
const GL_QUERY_NO_WAIT = 0x8E14;
const GL_QUERY_BY_REGION_WAIT = 0x8E15;
const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const GL_QUERY_WAIT_INVERTED = 0x8E17;
const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const GL_TRANSFORM_FEEDBACK = 0x8E22;
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const GL_TIMESTAMP = 0x8E28;
const GL_TEXTURE_SWIZZLE_R = 0x8E42;
const GL_TEXTURE_SWIZZLE_G = 0x8E43;
const GL_TEXTURE_SWIZZLE_B = 0x8E44;
const GL_TEXTURE_SWIZZLE_A = 0x8E45;
const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const GL_PROVOKING_VERTEX = 0x8E4F;
const GL_SAMPLE_POSITION = 0x8E50;
const GL_SAMPLE_MASK = 0x8E51;
const GL_SAMPLE_MASK_VALUE = 0x8E52;
const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const GL_MAX_VERTEX_STREAMS = 0x8E71;
const GL_PATCH_VERTICES = 0x8E72;
const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const GL_TESS_GEN_MODE = 0x8E76;
const GL_TESS_GEN_SPACING = 0x8E77;
const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const GL_TESS_GEN_POINT_MODE = 0x8E79;
const GL_ISOLINES = 0x8E7A;
const GL_FRACTIONAL_ODD = 0x8E7B;
const GL_FRACTIONAL_EVEN = 0x8E7C;
const GL_MAX_PATCH_VERTICES = 0x8E7D;
const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const GL_TESS_EVALUATION_SHADER = 0x8E87;
const GL_TESS_CONTROL_SHADER = 0x8E88;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GL_COPY_READ_BUFFER = 0x8F36;
const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
const GL_COPY_WRITE_BUFFER = 0x8F37;
const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
const GL_MAX_IMAGE_UNITS = 0x8F38;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GL_IMAGE_BINDING_NAME = 0x8F3A;
const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const GL_IMAGE_BINDING_LAYER = 0x8F3D;
const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const GL_DOUBLE_MAT2 = 0x8F46;
const GL_DOUBLE_MAT3 = 0x8F47;
const GL_DOUBLE_MAT4 = 0x8F48;
const GL_DOUBLE_MAT2X3 = 0x8F49;
const GL_DOUBLE_MAT2X4 = 0x8F4A;
const GL_DOUBLE_MAT3X2 = 0x8F4B;
const GL_DOUBLE_MAT3X4 = 0x8F4C;
const GL_DOUBLE_MAT4X2 = 0x8F4D;
const GL_DOUBLE_MAT4X3 = 0x8F4E;
const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
const GL_R8_SNORM = 0x8F94;
const GL_RG8_SNORM = 0x8F95;
const GL_RGB8_SNORM = 0x8F96;
const GL_RGBA8_SNORM = 0x8F97;
const GL_R16_SNORM = 0x8F98;
const GL_RG16_SNORM = 0x8F99;
const GL_RGB16_SNORM = 0x8F9A;
const GL_RGBA16_SNORM = 0x8F9B;
const GL_SIGNED_NORMALIZED = 0x8F9C;
const GL_PRIMITIVE_RESTART = 0x8F9D;
const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const GL_DOUBLE_VEC2 = 0x8FFC;
const GL_DOUBLE_VEC3 = 0x8FFD;
const GL_DOUBLE_VEC4 = 0x8FFE;
const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const GL_IMAGE_1D = 0x904C;
const GL_IMAGE_2D = 0x904D;
const GL_IMAGE_3D = 0x904E;
const GL_IMAGE_2D_RECT = 0x904F;
const GL_IMAGE_CUBE = 0x9050;
const GL_IMAGE_BUFFER = 0x9051;
const GL_IMAGE_1D_ARRAY = 0x9052;
const GL_IMAGE_2D_ARRAY = 0x9053;
const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const GL_INT_IMAGE_1D = 0x9057;
const GL_INT_IMAGE_2D = 0x9058;
const GL_INT_IMAGE_3D = 0x9059;
const GL_INT_IMAGE_2D_RECT = 0x905A;
const GL_INT_IMAGE_CUBE = 0x905B;
const GL_INT_IMAGE_BUFFER = 0x905C;
const GL_INT_IMAGE_1D_ARRAY = 0x905D;
const GL_INT_IMAGE_2D_ARRAY = 0x905E;
const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GL_MAX_IMAGE_SAMPLES = 0x906D;
const GL_IMAGE_BINDING_FORMAT = 0x906E;
const GL_RGB10_A2UI = 0x906F;
const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const GL_SHADER_STORAGE_BUFFER = 0x90D2;
const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const GL_TEXTURE_SAMPLES = 0x9106;
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const GL_MAX_INTEGER_SAMPLES = 0x9110;
const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const GL_OBJECT_TYPE = 0x9112;
const GL_SYNC_CONDITION = 0x9113;
const GL_SYNC_STATUS = 0x9114;
const GL_SYNC_FLAGS = 0x9115;
const GL_SYNC_FENCE = 0x9116;
const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const GL_UNSIGNALED = 0x9118;
const GL_SIGNALED = 0x9119;
const GL_ALREADY_SIGNALED = 0x911A;
const GL_TIMEOUT_EXPIRED = 0x911B;
const GL_CONDITION_SATISFIED = 0x911C;
const GL_WAIT_FAILED = 0x911D;
const GL_BUFFER_ACCESS_FLAGS = 0x911F;
const GL_BUFFER_MAP_LENGTH = 0x9120;
const GL_BUFFER_MAP_OFFSET = 0x9121;
const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const GL_CONTEXT_PROFILE_MASK = 0x9126;
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const GL_DEBUG_SEVERITY_HIGH = 0x9146;
const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const GL_DEBUG_SEVERITY_LOW = 0x9148;
const GL_QUERY_BUFFER = 0x9192;
const GL_QUERY_BUFFER_BINDING = 0x9193;
const GL_QUERY_RESULT_NO_WAIT = 0x9194;
const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const GL_TEXTURE_BUFFER_SIZE = 0x919E;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GL_COMPUTE_SHADER = 0x91B9;
const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const GL_COMPRESSED_R11_EAC = 0x9270;
const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const GL_COMPRESSED_RG11_EAC = 0x9272;
const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GL_DEBUG_OUTPUT = 0x92E0;
const GL_UNIFORM = 0x92E1;
const GL_UNIFORM_BLOCK = 0x92E2;
const GL_PROGRAM_INPUT = 0x92E3;
const GL_PROGRAM_OUTPUT = 0x92E4;
const GL_BUFFER_VARIABLE = 0x92E5;
const GL_SHADER_STORAGE_BLOCK = 0x92E6;
const GL_IS_PER_PATCH = 0x92E7;
const GL_VERTEX_SUBROUTINE = 0x92E8;
const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const GL_GEOMETRY_SUBROUTINE = 0x92EB;
const GL_FRAGMENT_SUBROUTINE = 0x92EC;
const GL_COMPUTE_SUBROUTINE = 0x92ED;
const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const GL_ACTIVE_RESOURCES = 0x92F5;
const GL_MAX_NAME_LENGTH = 0x92F6;
const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GL_NAME_LENGTH = 0x92F9;
const GL_TYPE = 0x92FA;
const GL_ARRAY_SIZE = 0x92FB;
const GL_OFFSET = 0x92FC;
const GL_BLOCK_INDEX = 0x92FD;
const GL_ARRAY_STRIDE = 0x92FE;
const GL_MATRIX_STRIDE = 0x92FF;
const GL_IS_ROW_MAJOR = 0x9300;
const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const GL_BUFFER_BINDING = 0x9302;
const GL_BUFFER_DATA_SIZE = 0x9303;
const GL_NUM_ACTIVE_VARIABLES = 0x9304;
const GL_ACTIVE_VARIABLES = 0x9305;
const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const GL_LOCATION = 0x930E;
const GL_LOCATION_INDEX = 0x930F;
const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const GL_LOCATION_COMPONENT = 0x934A;
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
const GL_CLIP_ORIGIN = 0x935C;
const GL_CLIP_DEPTH_MODE = 0x935D;
const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
const GL_ZERO_TO_ONE = 0x935F;
const GL_CLEAR_TEXTURE = 0x9365;
const GL_NUM_SAMPLE_COUNTS = 0x9380;
const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
const GL_SPIR_V_BINARY = 0x9552;
const GL_SPIR_V_EXTENSIONS = 0x9553;
const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
 


/** 
* Function definitions 
*/ 
define GL_Accum = fn void  (GLenum op, GLfloat value );
define GL_ActiveShaderProgram = fn void  (GLuint pipeline, GLuint program );
define GL_AlphaFunc = fn void  (GLenum func_param, GLfloat ref );
define GL_AreTexturesResident = fn GLboolean  (GLsizei n,  GLuint *textures, GLboolean *residences );
define GL_ArrayElement = fn void  (GLint i );
define GL_AttachShader = fn void  (GLuint program, GLuint shader );
define GL_Begin = fn void  (GLenum mode );
define GL_BeginConditionalRender = fn void  (GLuint id, GLenum mode );
define GL_BeginQuery = fn void  (GLenum target, GLuint id );
define GL_BeginQueryIndexed = fn void  (GLenum target, GLuint index, GLuint id );
define GL_BeginTransformFeedback = fn void  (GLenum primitiveMode );
define GL_BindAttribLocation = fn void  (GLuint program, GLuint index,  GLchar *name );
define GL_BindBuffer = fn void  (GLenum target, GLuint buffer );
define GL_BindBufferBase = fn void  (GLenum target, GLuint index, GLuint buffer );
define GL_BindBufferRange = fn void  (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
define GL_BindBuffersBase = fn void  (GLenum target, GLuint first, GLsizei count,  GLuint *buffers );
define GL_BindBuffersRange = fn void  (GLenum target, GLuint first, GLsizei count,  GLuint *buffers,  GLintptr *offsets,  GLsizeiptr *sizes );
define GL_BindFragDataLocation = fn void  (GLuint program, GLuint color,  GLchar *name );
define GL_BindFragDataLocationIndexed = fn void  (GLuint program, GLuint colorNumber, GLuint index,  GLchar *name );
define GL_BindFramebuffer = fn void  (GLenum target, GLuint framebuffer );
define GL_BindImageTexture = fn void  (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format );
define GL_BindImageTextures = fn void  (GLuint first, GLsizei count,  GLuint *textures );
define GL_BindProgramPipeline = fn void  (GLuint pipeline );
define GL_BindRenderbuffer = fn void  (GLenum target, GLuint renderbuffer );
define GL_BindSampler = fn void  (GLuint unit, GLuint sampler );
define GL_BindSamplers = fn void  (GLuint first, GLsizei count,  GLuint *samplers );
define GL_BindTexture = fn void  (GLenum target, GLuint texture );
define GL_BindTextureUnit = fn void  (GLuint unit, GLuint texture );
define GL_BindTextures = fn void  (GLuint first, GLsizei count,  GLuint *textures );
define GL_BindTransformFeedback = fn void  (GLenum target, GLuint id );
define GL_BindVertexArray = fn void  (GLuint array );
define GL_BindVertexBuffer = fn void  (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
define GL_BindVertexBuffers = fn void  (GLuint first, GLsizei count,  GLuint *buffers,  GLintptr *offsets,  GLsizei *strides );
define GL_Bitmap = fn void  (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove,  GLubyte *bitmap );
define GL_BlendEquationSeparate = fn void  (GLenum modeRGB, GLenum modeAlpha );
define GL_BlendEquationSeparatei = fn void  (GLuint buf, GLenum modeRGB, GLenum modeAlpha );
define GL_BlendEquationi = fn void  (GLuint buf, GLenum mode );
define GL_BlendFunc = fn void  (GLenum sfactor, GLenum dfactor );
define GL_BlendFuncSeparatei = fn void  (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
define GL_BlendFunci = fn void  (GLuint buf, GLenum src, GLenum dst );
define GL_BlitFramebuffer = fn void  (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
define GL_BlitNamedFramebuffer = fn void  (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
define GL_BufferData = fn void  (GLenum target, GLsizeiptr size,  void *data, GLenum usage );
define GL_BufferStorage = fn void  (GLenum target, GLsizeiptr size,  void *data, GLbitfield flags );
define GL_BufferSubData = fn void  (GLenum target, GLintptr offset, GLsizeiptr size,  void *data );
define GL_CallList = fn void  (GLuint list );
define GL_CallLists = fn void  (GLsizei n, GLenum value_type,  void *lists );
define GL_CheckFramebufferStatus = fn GLenum  (GLenum target );
define GL_CheckNamedFramebufferStatus = fn GLenum  (GLuint framebuffer, GLenum target );
define GL_ClampColor = fn void  (GLenum target, GLenum clamp );
define GL_Clear = fn void  (GLbitfield mask );
define GL_ClearAccum = fn void  (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
define GL_ClearBufferData = fn void  (GLenum target, GLenum internalformat, GLenum format, GLenum value_type,  void *data );
define GL_ClearBufferSubData = fn void  (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum value_type,  void *data );
define GL_ClearBufferfi = fn void  (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
define GL_ClearBufferfv = fn void  (GLenum buffer, GLint drawbuffer,  GLfloat *value );
define GL_ClearBufferiv = fn void  (GLenum buffer, GLint drawbuffer,  GLint *value );
define GL_ClearBufferuiv = fn void  (GLenum buffer, GLint drawbuffer,  GLuint *value );
define GL_ClearColor = fn void  (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
define GL_ClearDepth = fn void  (GLdouble depth );
define GL_ClearDepthf = fn void  (GLfloat d );
define GL_ClearIndex = fn void  (GLfloat c );
define GL_ClearNamedBufferData = fn void  (GLuint buffer, GLenum internalformat, GLenum format, GLenum value_type,  void *data );
define GL_ClearNamedBufferSubData = fn void  (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum value_type,  void *data );
define GL_ClearNamedFramebufferfi = fn void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
define GL_ClearNamedFramebufferfv = fn void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer,  GLfloat *value );
define GL_ClearNamedFramebufferiv = fn void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer,  GLint *value );
define GL_ClearNamedFramebufferuiv = fn void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer,  GLuint *value );
define GL_ClearStencil = fn void  (GLint s );
define GL_ClearTexImage = fn void  (GLuint texture, GLint level, GLenum format, GLenum value_type,  void *data );
define GL_ClearTexSubImage = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum value_type,  void *data );
define GL_ClientActiveTexture = fn void  (GLenum texture );
define GL_ClientWaitSync = fn GLenum  (GLsync sync, GLbitfield flags, GLuint64 timeout );
define GL_ClipControl = fn void  (GLenum origin, GLenum depth );
define GL_ClipPlane = fn void  (GLenum plane,  GLdouble *equation );
define GL_Color3b = fn void  (GLbyte red, GLbyte green, GLbyte blue );
define GL_Color3bv = fn void  ( GLbyte *v );
define GL_Color3d = fn void  (GLdouble red, GLdouble green, GLdouble blue );
define GL_Color3dv = fn void  ( GLdouble *v );
define GL_Color3f = fn void  (GLfloat red, GLfloat green, GLfloat blue );
define GL_Color3fv = fn void  ( GLfloat *v );
define GL_Color3i = fn void  (GLint red, GLint green, GLint blue );
define GL_Color3iv = fn void  ( GLint *v );
define GL_Color3s = fn void  (GLshort red, GLshort green, GLshort blue );
define GL_Color3sv = fn void  ( GLshort *v );
define GL_Color3ub = fn void  (GLubyte red, GLubyte green, GLubyte blue );
define GL_Color3ubv = fn void  ( GLubyte *v );
define GL_Color3ui = fn void  (GLuint red, GLuint green, GLuint blue );
define GL_Color3uiv = fn void  ( GLuint *v );
define GL_Color3us = fn void  (GLushort red, GLushort green, GLushort blue );
define GL_Color3usv = fn void  ( GLushort *v );
define GL_Color4b = fn void  (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
define GL_Color4bv = fn void  ( GLbyte *v );
define GL_Color4d = fn void  (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
define GL_Color4dv = fn void  ( GLdouble *v );
define GL_Color4f = fn void  (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
define GL_Color4fv = fn void  ( GLfloat *v );
define GL_Color4i = fn void  (GLint red, GLint green, GLint blue, GLint alpha );
define GL_Color4iv = fn void  ( GLint *v );
define GL_Color4s = fn void  (GLshort red, GLshort green, GLshort blue, GLshort alpha );
define GL_Color4sv = fn void  ( GLshort *v );
define GL_Color4ub = fn void  (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
define GL_Color4ubv = fn void  ( GLubyte *v );
define GL_Color4ui = fn void  (GLuint red, GLuint green, GLuint blue, GLuint alpha );
define GL_Color4uiv = fn void  ( GLuint *v );
define GL_Color4us = fn void  (GLushort red, GLushort green, GLushort blue, GLushort alpha );
define GL_Color4usv = fn void  ( GLushort *v );
define GL_ColorMask = fn void  (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
define GL_ColorMaski = fn void  (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
define GL_ColorMaterial = fn void  (GLenum face, GLenum mode );
define GL_ColorP3ui = fn void  (GLenum value_type, GLuint color );
define GL_ColorP3uiv = fn void  (GLenum value_type,  GLuint *color );
define GL_ColorP4ui = fn void  (GLenum value_type, GLuint color );
define GL_ColorP4uiv = fn void  (GLenum value_type,  GLuint *color );
define GL_ColorPointer = fn void  (GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_CompileShader = fn void  (GLuint shader );
define GL_CompressedTextureSubImage1D = fn void  (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize,  void *data );
define GL_CompressedTextureSubImage2D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize,  void *data );
define GL_CompressedTextureSubImage3D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize,  void *data );
define GL_CopyBufferSubData = fn void  (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
define GL_CopyImageSubData = fn void  (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
define GL_CopyNamedBufferSubData = fn void  (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
define GL_CopyPixels = fn void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum value_type );
define GL_CopyTexImage1D = fn void  (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
define GL_CopyTexImage2D = fn void  (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
define GL_CopyTexSubImage1D = fn void  (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
define GL_CopyTexSubImage2D = fn void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
define GL_CopyTextureSubImage1D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
define GL_CopyTextureSubImage2D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
define GL_CopyTextureSubImage3D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
define GL_CreateBuffers = fn void  (GLsizei n, GLuint *buffers );
define GL_CreateFramebuffers = fn void  (GLsizei n, GLuint *framebuffers );
define GL_CreateProgram = fn GLuint  ( );
define GL_CreateProgramPipelines = fn void  (GLsizei n, GLuint *pipelines );
define GL_CreateQueries = fn void  (GLenum target, GLsizei n, GLuint *ids );
define GL_CreateRenderbuffers = fn void  (GLsizei n, GLuint *renderbuffers );
define GL_CreateSamplers = fn void  (GLsizei n, GLuint *samplers );
define GL_CreateShader = fn GLuint  (GLenum value_type );
define GL_CreateShaderProgramv = fn GLuint  (GLenum value_type, GLsizei count,  GLchar **strings );
define GL_CreateTextures = fn void  (GLenum target, GLsizei n, GLuint *textures );
define GL_CreateTransformFeedbacks = fn void  (GLsizei n, GLuint *ids );
define GL_CreateVertexArrays = fn void  (GLsizei n, GLuint *arrays );
define GL_CullFace = fn void  (GLenum mode );
define GL_DebugMessageCallback = fn void  (GLdebugproc callback,  void *userParam );
define GL_DebugMessageControl = fn void  (GLenum source, GLenum value_type, GLenum severity, GLsizei count,  GLuint *ids, GLboolean enabled );
define GL_DebugMessageInsert = fn void  (GLenum source, GLenum value_type, GLuint id, GLenum severity, GLsizei length,  GLchar *buf );
define GL_DeleteBuffers = fn void  (GLsizei n,  GLuint *buffers );
define GL_DeleteFramebuffers = fn void  (GLsizei n,  GLuint *framebuffers );
define GL_DeleteLists = fn void  (GLuint list, GLsizei range );
define GL_DeleteProgram = fn void  (GLuint program );
define GL_DeleteProgramPipelines = fn void  (GLsizei n,  GLuint *pipelines );
define GL_DeleteQueries = fn void  (GLsizei n,  GLuint *ids );
define GL_DeleteRenderbuffers = fn void  (GLsizei n,  GLuint *renderbuffers );
define GL_DeleteSamplers = fn void  (GLsizei count,  GLuint *samplers );
define GL_DeleteShader = fn void  (GLuint shader );
define GL_DeleteSync = fn void  (GLsync sync );
define GL_DeleteTextures = fn void  (GLsizei n,  GLuint *textures );
define GL_DeleteTransformFeedbacks = fn void  (GLsizei n,  GLuint *ids );
define GL_DeleteVertexArrays = fn void  (GLsizei n,  GLuint *arrays );
define GL_DepthFunc = fn void  (GLenum func_param );
define GL_DepthMask = fn void  (GLboolean flag );
define GL_DepthRange = fn void  (GLdouble n, GLdouble f );
define GL_DepthRangeArrayv = fn void  (GLuint first, GLsizei count,  GLdouble *v );
define GL_DepthRangeIndexed = fn void  (GLuint index, GLdouble n, GLdouble f );
define GL_DepthRangef = fn void  (GLfloat n, GLfloat f );
define GL_DetachShader = fn void  (GLuint program, GLuint shader );
define GL_Disable = fn void  (GLenum cap );
define GL_DisableClientState = fn void  (GLenum array );
define GL_DisableVertexArrayAttrib = fn void  (GLuint vaobj, GLuint index );
define GL_DisableVertexAttribArray = fn void  (GLuint index );
define GL_Disablei = fn void  (GLenum target, GLuint index );
define GL_DispatchCompute = fn void  (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z );
define GL_DispatchComputeIndirect = fn void  (GLintptr indirect );
define GL_DrawArrays = fn void  (GLenum mode, GLint first, GLsizei count );
define GL_DrawArraysIndirect = fn void  (GLenum mode,  void *indirect );
define GL_DrawArraysInstanced = fn void  (GLenum mode, GLint first, GLsizei count, GLsizei instancecount );
define GL_DrawArraysInstancedBaseInstance = fn void  (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance );
define GL_DrawBuffer = fn void  (GLenum buf );
define GL_DrawBuffers = fn void  (GLsizei n,  GLenum *bufs );
define GL_DrawElements = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices );
define GL_DrawElementsBaseVertex = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices, GLint basevertex );
define GL_DrawElementsIndirect = fn void  (GLenum mode, GLenum value_type,  void *indirect );
define GL_DrawElementsInstanced = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices, GLsizei instancecount );
define GL_DrawElementsInstancedBaseInstance = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices, GLsizei instancecount, GLuint baseinstance );
define GL_DrawElementsInstancedBaseVertex = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices, GLsizei instancecount, GLint basevertex );
define GL_DrawElementsInstancedBaseVertexBaseInstance = fn void  (GLenum mode, GLsizei count, GLenum value_type,  void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance );
define GL_DrawPixels = fn void  (GLsizei width, GLsizei height, GLenum format, GLenum value_type,  void *pixels );
define GL_DrawRangeElementsBaseVertex = fn void  (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum value_type,  void *indices, GLint basevertex );
define GL_DrawTransformFeedback = fn void  (GLenum mode, GLuint id );
define GL_DrawTransformFeedbackInstanced = fn void  (GLenum mode, GLuint id, GLsizei instancecount );
define GL_DrawTransformFeedbackStream = fn void  (GLenum mode, GLuint id, GLuint stream );
define GL_DrawTransformFeedbackStreamInstanced = fn void  (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount );
define GL_EdgeFlag = fn void  (GLboolean flag );
define GL_EdgeFlagPointer = fn void  (GLsizei stride,  void *pointer );
define GL_EdgeFlagv = fn void  ( GLboolean *flag );
define GL_Enable = fn void  (GLenum cap );
define GL_EnableClientState = fn void  (GLenum array );
define GL_EnableVertexArrayAttrib = fn void  (GLuint vaobj, GLuint index );
define GL_EnableVertexAttribArray = fn void  (GLuint index );
define GL_Enablei = fn void  (GLenum target, GLuint index );
define GL_End = fn void  ( );
define GL_EndConditionalRender = fn void  ( );
define GL_EndList = fn void  ( );
define GL_EndQuery = fn void  (GLenum target );
define GL_EndQueryIndexed = fn void  (GLenum target, GLuint index );
define GL_EndTransformFeedback = fn void  ( );
define GL_EvalCoord1d = fn void  (GLdouble u );
define GL_EvalCoord1dv = fn void  ( GLdouble *u );
define GL_EvalCoord1f = fn void  (GLfloat u );
define GL_EvalCoord1fv = fn void  ( GLfloat *u );
define GL_EvalCoord2d = fn void  (GLdouble u, GLdouble v );
define GL_EvalCoord2dv = fn void  ( GLdouble *u );
define GL_EvalCoord2f = fn void  (GLfloat u, GLfloat v );
define GL_EvalCoord2fv = fn void  ( GLfloat *u );
define GL_EvalMesh1 = fn void  (GLenum mode, GLint i1, GLint i2 );
define GL_EvalMesh2 = fn void  (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
define GL_EvalPoint1 = fn void  (GLint i );
define GL_EvalPoint2 = fn void  (GLint i, GLint j );
define GL_FeedbackBuffer = fn void  (GLsizei size, GLenum value_type, GLfloat *buffer );
define GL_FenceSync = fn GLsync  (GLenum condition, GLbitfield flags );
define GL_Finish = fn void  ( );
define GL_Flush = fn void  ( );
define GL_FlushMappedBufferRange = fn void  (GLenum target, GLintptr offset, GLsizeiptr length );
define GL_FlushMappedNamedBufferRange = fn void  (GLuint buffer, GLintptr offset, GLsizeiptr length );
define GL_FogCoordPointer = fn void  (GLenum value_type, GLsizei stride,  void *pointer );
define GL_FogCoordd = fn void  (GLdouble coord );
define GL_FogCoorddv = fn void  ( GLdouble *coord );
define GL_FogCoordf = fn void  (GLfloat coord );
define GL_FogCoordfv = fn void  ( GLfloat *coord );
define GL_Fogf = fn void  (GLenum pname, GLfloat param );
define GL_Fogfv = fn void  (GLenum pname,  GLfloat *params );
define GL_Fogi = fn void  (GLenum pname, GLint param );
define GL_Fogiv = fn void  (GLenum pname,  GLint *params );
define GL_FramebufferParameteri = fn void  (GLenum target, GLenum pname, GLint param );
define GL_FramebufferRenderbuffer = fn void  (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
define GL_FramebufferTexture = fn void  (GLenum target, GLenum attachment, GLuint texture, GLint level );
define GL_FramebufferTexture1D = fn void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
define GL_FramebufferTexture2D = fn void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
define GL_FramebufferTexture3D = fn void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
define GL_FramebufferTextureLayer = fn void  (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
define GL_FrontFace = fn void  (GLenum mode );
define GL_Frustum = fn void  (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
define GL_GenBuffers = fn void  (GLsizei n, GLuint *buffers );
define GL_GenFramebuffers = fn void  (GLsizei n, GLuint *framebuffers );
define GL_GenLists = fn GLuint  (GLsizei range );
define GL_GenProgramPipelines = fn void  (GLsizei n, GLuint *pipelines );
define GL_GenQueries = fn void  (GLsizei n, GLuint *ids );
define GL_GenRenderbuffers = fn void  (GLsizei n, GLuint *renderbuffers );
define GL_GenSamplers = fn void  (GLsizei count, GLuint *samplers );
define GL_GenTextures = fn void  (GLsizei n, GLuint *textures );
define GL_GenTransformFeedbacks = fn void  (GLsizei n, GLuint *ids );
define GL_GenVertexArrays = fn void  (GLsizei n, GLuint *arrays );
define GL_GenerateMipmap = fn void  (GLenum target );
define GL_GenerateTextureMipmap = fn void  (GLuint texture );
define GL_GetActiveAtomicCounterBufferiv = fn void  (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params );
define GL_GetActiveAttrib = fn void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *value_type, GLchar *name );
define GL_GetActiveSubroutineName = fn void  (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
define GL_GetActiveSubroutineUniformName = fn void  (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
define GL_GetActiveSubroutineUniformiv = fn void  (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values );
define GL_GetActiveUniform = fn void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *value_type, GLchar *name );
define GL_GetActiveUniformBlockName = fn void  (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName );
define GL_GetActiveUniformBlockiv = fn void  (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params );
define GL_GetActiveUniformName = fn void  (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName );
define GL_GetActiveUniformsiv = fn void  (GLuint program, GLsizei uniformCount,  GLuint *uniformIndices, GLenum pname, GLint *params );
define GL_GetAttachedShaders = fn void  (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders );
define GL_GetAttribLocation = fn GLint  (GLuint program,  GLchar *name );
define GL_GetBooleani_v = fn void  (GLenum target, GLuint index, GLboolean *data );
define GL_GetBooleanv = fn void  (GLenum pname, GLboolean *data );
define GL_GetBufferParameteri64v = fn void  (GLenum target, GLenum pname, GLint64 *params );
define GL_GetBufferParameteriv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetBufferPointerv = fn void  (GLenum target, GLenum pname, void **params );
define GL_GetBufferSubData = fn void  (GLenum target, GLintptr offset, GLsizeiptr size, void *data );
define GL_GetClipPlane = fn void  (GLenum plane, GLdouble *equation );
define GL_GetCompressedTextureImage = fn void  (GLuint texture, GLint level, GLsizei bufSize, void *pixels );
define GL_GetCompressedTextureSubImage = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels );
define GL_GetDebugMessageLog = fn GLuint  (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
define GL_GetDoublei_v = fn void  (GLenum target, GLuint index, GLdouble *data );
define GL_GetDoublev = fn void  (GLenum pname, GLdouble *data );
define GL_GetError = fn GLenum  ( );
define GL_GetFloati_v = fn void  (GLenum target, GLuint index, GLfloat *data );
define GL_GetFloatv = fn void  (GLenum pname, GLfloat *data );
define GL_GetFragDataIndex = fn GLint  (GLuint program,  GLchar *name );
define GL_GetFragDataLocation = fn GLint  (GLuint program,  GLchar *name );
define GL_GetFramebufferAttachmentParameteriv = fn void  (GLenum target, GLenum attachment, GLenum pname, GLint *params );
define GL_GetFramebufferParameteriv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetGraphicsResetStatus = fn GLenum  ( );
define GL_GetInteger64i_v = fn void  (GLenum target, GLuint index, GLint64 *data );
define GL_GetInteger64v = fn void  (GLenum pname, GLint64 *data );
define GL_GetIntegeri_v = fn void  (GLenum target, GLuint index, GLint *data );
define GL_GetIntegerv = fn void  (GLenum pname, GLint *data );
define GL_GetInternalformati64v = fn void  (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params );
define GL_GetInternalformativ = fn void  (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params );
define GL_GetLightfv = fn void  (GLenum light, GLenum pname, GLfloat *params );
define GL_GetLightiv = fn void  (GLenum light, GLenum pname, GLint *params );
define GL_GetMapdv = fn void  (GLenum target, GLenum query, GLdouble *v );
define GL_GetMapfv = fn void  (GLenum target, GLenum query, GLfloat *v );
define GL_GetMapiv = fn void  (GLenum target, GLenum query, GLint *v );
define GL_GetMaterialfv = fn void  (GLenum face, GLenum pname, GLfloat *params );
define GL_GetMaterialiv = fn void  (GLenum face, GLenum pname, GLint *params );
define GL_GetMultisamplefv = fn void  (GLenum pname, GLuint index, GLfloat *val );
define GL_GetNamedBufferParameteri64v = fn void  (GLuint buffer, GLenum pname, GLint64 *params );
define GL_GetNamedBufferParameteriv = fn void  (GLuint buffer, GLenum pname, GLint *params );
define GL_GetNamedBufferPointerv = fn void  (GLuint buffer, GLenum pname, void **params );
define GL_GetNamedBufferSubData = fn void  (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
define GL_GetNamedFramebufferAttachmentParameteriv = fn void  (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
define GL_GetNamedFramebufferParameteriv = fn void  (GLuint framebuffer, GLenum pname, GLint *param );
define GL_GetNamedRenderbufferParameteriv = fn void  (GLuint renderbuffer, GLenum pname, GLint *params );
define GL_GetObjectLabel = fn void  (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
define GL_GetObjectPtrLabel = fn void  ( void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
define GL_GetPixelMapfv = fn void  (GLenum map, GLfloat *values );
define GL_GetPixelMapuiv = fn void  (GLenum map, GLuint *values );
define GL_GetPixelMapusv = fn void  (GLenum map, GLushort *values );
define GL_GetPointerv = fn void  (GLenum pname, void **params );
define GL_GetPolygonStipple = fn void  (GLubyte *mask );
define GL_GetProgramBinary = fn void  (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary );
define GL_GetProgramInfoLog = fn void  (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
define GL_GetProgramInterfaceiv = fn void  (GLuint program, GLenum programInterface, GLenum pname, GLint *params );
define GL_GetProgramPipelineInfoLog = fn void  (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
define GL_GetProgramPipelineiv = fn void  (GLuint pipeline, GLenum pname, GLint *params );
define GL_GetProgramResourceIndex = fn GLuint  (GLuint program, GLenum programInterface,  GLchar *name );
define GL_GetProgramResourceLocation = fn GLint  (GLuint program, GLenum programInterface,  GLchar *name );
define GL_GetProgramResourceLocationIndex = fn GLint  (GLuint program, GLenum programInterface,  GLchar *name );
define GL_GetProgramResourceName = fn void  (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
define GL_GetProgramResourceiv = fn void  (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount,  GLenum *props, GLsizei count, GLsizei *length, GLint *params );
define GL_GetProgramStageiv = fn void  (GLuint program, GLenum shadertype, GLenum pname, GLint *values );
define GL_GetProgramiv = fn void  (GLuint program, GLenum pname, GLint *params );
define GL_GetQueryBufferObjecti64v = fn void  (GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
define GL_GetQueryBufferObjectiv = fn void  (GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
define GL_GetQueryBufferObjectui64v = fn void  (GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
define GL_GetQueryBufferObjectuiv = fn void  (GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
define GL_GetQueryIndexediv = fn void  (GLenum target, GLuint index, GLenum pname, GLint *params );
define GL_GetQueryObjecti64v = fn void  (GLuint id, GLenum pname, GLint64 *params );
define GL_GetQueryObjectiv = fn void  (GLuint id, GLenum pname, GLint *params );
define GL_GetQueryObjectui64v = fn void  (GLuint id, GLenum pname, GLuint64 *params );
define GL_GetQueryObjectuiv = fn void  (GLuint id, GLenum pname, GLuint *params );
define GL_GetQueryiv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetRenderbufferParameteriv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetSamplerParameterIiv = fn void  (GLuint sampler, GLenum pname, GLint *params );
define GL_GetSamplerParameterIuiv = fn void  (GLuint sampler, GLenum pname, GLuint *params );
define GL_GetSamplerParameterfv = fn void  (GLuint sampler, GLenum pname, GLfloat *params );
define GL_GetSamplerParameteriv = fn void  (GLuint sampler, GLenum pname, GLint *params );
define GL_GetShaderInfoLog = fn void  (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
define GL_GetShaderPrecisionFormat = fn void  (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision );
define GL_GetShaderSource = fn void  (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source );
define GL_GetShaderiv = fn void  (GLuint shader, GLenum pname, GLint *params );
define GL_GetString = fn  GLubyte * (GLenum name );
define GL_GetStringi = fn  GLubyte * (GLenum name, GLuint index );
define GL_GetSubroutineIndex = fn GLuint  (GLuint program, GLenum shadertype,  GLchar *name );
define GL_GetSubroutineUniformLocation = fn GLint  (GLuint program, GLenum shadertype,  GLchar *name );
define GL_GetSynciv = fn void  (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
define GL_GetTexEnvfv = fn void  (GLenum target, GLenum pname, GLfloat *params );
define GL_GetTexEnviv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetTexGendv = fn void  (GLenum coord, GLenum pname, GLdouble *params );
define GL_GetTexGenfv = fn void  (GLenum coord, GLenum pname, GLfloat *params );
define GL_GetTexGeniv = fn void  (GLenum coord, GLenum pname, GLint *params );
define GL_GetTexImage = fn void  (GLenum target, GLint level, GLenum format, GLenum value_type, void *pixels );
define GL_GetTexLevelParameterfv = fn void  (GLenum target, GLint level, GLenum pname, GLfloat *params );
define GL_GetTexLevelParameteriv = fn void  (GLenum target, GLint level, GLenum pname, GLint *params );
define GL_GetTexParameterIiv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetTexParameterIuiv = fn void  (GLenum target, GLenum pname, GLuint *params );
define GL_GetTexParameterfv = fn void  (GLenum target, GLenum pname, GLfloat *params );
define GL_GetTexParameteriv = fn void  (GLenum target, GLenum pname, GLint *params );
define GL_GetTextureImage = fn void  (GLuint texture, GLint level, GLenum format, GLenum value_type, GLsizei bufSize, void *pixels );
define GL_GetTextureLevelParameterfv = fn void  (GLuint texture, GLint level, GLenum pname, GLfloat *params );
define GL_GetTextureLevelParameteriv = fn void  (GLuint texture, GLint level, GLenum pname, GLint *params );
define GL_GetTextureParameterIiv = fn void  (GLuint texture, GLenum pname, GLint *params );
define GL_GetTextureParameterIuiv = fn void  (GLuint texture, GLenum pname, GLuint *params );
define GL_GetTextureParameterfv = fn void  (GLuint texture, GLenum pname, GLfloat *params );
define GL_GetTextureParameteriv = fn void  (GLuint texture, GLenum pname, GLint *params );
define GL_GetTextureSubImage = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum value_type, GLsizei bufSize, void *pixels );
define GL_GetTransformFeedbackVarying = fn void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *value_type, GLchar *name );
define GL_GetTransformFeedbacki64_v = fn void  (GLuint xfb, GLenum pname, GLuint index, GLint64 *param );
define GL_GetTransformFeedbacki_v = fn void  (GLuint xfb, GLenum pname, GLuint index, GLint *param );
define GL_GetTransformFeedbackiv = fn void  (GLuint xfb, GLenum pname, GLint *param );
define GL_GetUniformBlockIndex = fn GLuint  (GLuint program,  GLchar *uniformBlockName );
define GL_GetUniformIndices = fn void  (GLuint program, GLsizei uniformCount,  GLchar **uniformNames, GLuint *uniformIndices );
define GL_GetUniformLocation = fn GLint  (GLuint program,  GLchar *name );
define GL_GetUniformSubroutineuiv = fn void  (GLenum shadertype, GLint location, GLuint *params );
define GL_GetUniformdv = fn void  (GLuint program, GLint location, GLdouble *params );
define GL_GetUniformfv = fn void  (GLuint program, GLint location, GLfloat *params );
define GL_GetUniformiv = fn void  (GLuint program, GLint location, GLint *params );
define GL_GetUniformuiv = fn void  (GLuint program, GLint location, GLuint *params );
define GL_GetVertexArrayIndexed64iv = fn void  (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param );
define GL_GetVertexArrayIndexediv = fn void  (GLuint vaobj, GLuint index, GLenum pname, GLint *param );
define GL_GetVertexArrayiv = fn void  (GLuint vaobj, GLenum pname, GLint *param );
define GL_GetVertexAttribIiv = fn void  (GLuint index, GLenum pname, GLint *params );
define GL_GetVertexAttribIuiv = fn void  (GLuint index, GLenum pname, GLuint *params );
define GL_GetVertexAttribLdv = fn void  (GLuint index, GLenum pname, GLdouble *params );
define GL_GetVertexAttribPointerv = fn void  (GLuint index, GLenum pname, void **pointer );
define GL_GetVertexAttribdv = fn void  (GLuint index, GLenum pname, GLdouble *params );
define GL_GetVertexAttribfv = fn void  (GLuint index, GLenum pname, GLfloat *params );
define GL_GetVertexAttribiv = fn void  (GLuint index, GLenum pname, GLint *params );
define GL_GetnColorTable = fn void  (GLenum target, GLenum format, GLenum value_type, GLsizei bufSize, void *table );
define GL_GetnCompressedTexImage = fn void  (GLenum target, GLint lod, GLsizei bufSize, void *pixels );
define GL_GetnConvolutionFilter = fn void  (GLenum target, GLenum format, GLenum value_type, GLsizei bufSize, void *image );
define GL_GetnHistogram = fn void  (GLenum target, GLboolean reset, GLenum format, GLenum value_type, GLsizei bufSize, void *values );
define GL_GetnMapdv = fn void  (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
define GL_GetnMapfv = fn void  (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
define GL_GetnMapiv = fn void  (GLenum target, GLenum query, GLsizei bufSize, GLint *v );
define GL_GetnMinmax = fn void  (GLenum target, GLboolean reset, GLenum format, GLenum value_type, GLsizei bufSize, void *values );
define GL_GetnPixelMapfv = fn void  (GLenum map, GLsizei bufSize, GLfloat *values );
define GL_GetnPixelMapuiv = fn void  (GLenum map, GLsizei bufSize, GLuint *values );
define GL_GetnPixelMapusv = fn void  (GLenum map, GLsizei bufSize, GLushort *values );
define GL_GetnPolygonStipple = fn void  (GLsizei bufSize, GLubyte *pattern );
define GL_GetnSeparableFilter = fn void  (GLenum target, GLenum format, GLenum value_type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
define GL_GetnTexImage = fn void  (GLenum target, GLint level, GLenum format, GLenum value_type, GLsizei bufSize, void *pixels );
define GL_GetnUniformdv = fn void  (GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
define GL_GetnUniformfv = fn void  (GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
define GL_GetnUniformiv = fn void  (GLuint program, GLint location, GLsizei bufSize, GLint *params );
define GL_GetnUniformuiv = fn void  (GLuint program, GLint location, GLsizei bufSize, GLuint *params );
define GL_Hint = fn void  (GLenum target, GLenum mode );
define GL_IndexMask = fn void  (GLuint mask );
define GL_IndexPointer = fn void  (GLenum value_type, GLsizei stride,  void *pointer );
define GL_Indexd = fn void  (GLdouble c );
define GL_Indexdv = fn void  ( GLdouble *c );
define GL_Indexf = fn void  (GLfloat c );
define GL_Indexfv = fn void  ( GLfloat *c );
define GL_Indexi = fn void  (GLint c );
define GL_Indexiv = fn void  ( GLint *c );
define GL_Indexs = fn void  (GLshort c );
define GL_Indexsv = fn void  ( GLshort *c );
define GL_Indexub = fn void  (GLubyte c );
define GL_Indexubv = fn void  ( GLubyte *c );
define GL_InitNames = fn void  ( );
define GL_InterleavedArrays = fn void  (GLenum format, GLsizei stride,  void *pointer );
define GL_InvalidateBufferData = fn void  (GLuint buffer );
define GL_InvalidateBufferSubData = fn void  (GLuint buffer, GLintptr offset, GLsizeiptr length );
define GL_InvalidateFramebuffer = fn void  (GLenum target, GLsizei numAttachments,  GLenum *attachments );
define GL_InvalidateNamedFramebufferData = fn void  (GLuint framebuffer, GLsizei numAttachments,  GLenum *attachments );
define GL_InvalidateNamedFramebufferSubData = fn void  (GLuint framebuffer, GLsizei numAttachments,  GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
define GL_InvalidateSubFramebuffer = fn void  (GLenum target, GLsizei numAttachments,  GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
define GL_InvalidateTexImage = fn void  (GLuint texture, GLint level );
define GL_InvalidateTexSubImage = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth );
define GL_IsBuffer = fn GLboolean  (GLuint buffer );
define GL_IsEnabled = fn GLboolean  (GLenum cap );
define GL_IsEnabledi = fn GLboolean  (GLenum target, GLuint index );
define GL_IsFramebuffer = fn GLboolean  (GLuint framebuffer );
define GL_IsList = fn GLboolean  (GLuint list );
define GL_IsProgram = fn GLboolean  (GLuint program );
define GL_IsProgramPipeline = fn GLboolean  (GLuint pipeline );
define GL_IsQuery = fn GLboolean  (GLuint id );
define GL_IsRenderbuffer = fn GLboolean  (GLuint renderbuffer );
define GL_IsSampler = fn GLboolean  (GLuint sampler );
define GL_IsShader = fn GLboolean  (GLuint shader );
define GL_IsSync = fn GLboolean  (GLsync sync );
define GL_IsTexture = fn GLboolean  (GLuint texture );
define GL_IsTransformFeedback = fn GLboolean  (GLuint id );
define GL_IsVertexArray = fn GLboolean  (GLuint array );
define GL_LightModelf = fn void  (GLenum pname, GLfloat param );
define GL_LightModelfv = fn void  (GLenum pname,  GLfloat *params );
define GL_LightModeli = fn void  (GLenum pname, GLint param );
define GL_LightModeliv = fn void  (GLenum pname,  GLint *params );
define GL_Lightf = fn void  (GLenum light, GLenum pname, GLfloat param );
define GL_Lightfv = fn void  (GLenum light, GLenum pname,  GLfloat *params );
define GL_Lighti = fn void  (GLenum light, GLenum pname, GLint param );
define GL_Lightiv = fn void  (GLenum light, GLenum pname,  GLint *params );
define GL_LineStipple = fn void  (GLint factor, GLushort pattern );
define GL_LineWidth = fn void  (GLfloat width );
define GL_LinkProgram = fn void  (GLuint program );
define GL_ListBase = fn void  (GLuint base );
define GL_LoadIdentity = fn void  ( );
define GL_LoadMatrixd = fn void  ( GLdouble *m );
define GL_LoadMatrixf = fn void  ( GLfloat *m );
define GL_LoadName = fn void  (GLuint name );
define GL_LoadTransposeMatrixd = fn void  ( GLdouble *m );
define GL_LoadTransposeMatrixf = fn void  ( GLfloat *m );
define GL_LogicOp = fn void  (GLenum opcode );
define GL_Map1d = fn void  (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order,  GLdouble *points );
define GL_Map1f = fn void  (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order,  GLfloat *points );
define GL_Map2d = fn void  (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,  GLdouble *points );
define GL_Map2f = fn void  (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,  GLfloat *points );
define GL_MapBuffer = fn void * (GLenum target, GLenum access );
define GL_MapBufferRange = fn void * (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
define GL_MapGrid1d = fn void  (GLint un, GLdouble u1, GLdouble u2 );
define GL_MapGrid1f = fn void  (GLint un, GLfloat u1, GLfloat u2 );
define GL_MapGrid2d = fn void  (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
define GL_MapGrid2f = fn void  (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
define GL_MapNamedBuffer = fn void * (GLuint buffer, GLenum access );
define GL_MapNamedBufferRange = fn void * (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
define GL_Materialf = fn void  (GLenum face, GLenum pname, GLfloat param );
define GL_Materialfv = fn void  (GLenum face, GLenum pname,  GLfloat *params );
define GL_Materiali = fn void  (GLenum face, GLenum pname, GLint param );
define GL_Materialiv = fn void  (GLenum face, GLenum pname,  GLint *params );
define GL_MatrixMode = fn void  (GLenum mode );
define GL_MemoryBarrier = fn void  (GLbitfield barriers );
define GL_MemoryBarrierByRegion = fn void  (GLbitfield barriers );
define GL_MinSampleShading = fn void  (GLfloat value );
define GL_MultMatrixd = fn void  ( GLdouble *m );
define GL_MultMatrixf = fn void  ( GLfloat *m );
define GL_MultTransposeMatrixd = fn void  ( GLdouble *m );
define GL_MultTransposeMatrixf = fn void  ( GLfloat *m );
define GL_MultiDrawArraysIndirect = fn void  (GLenum mode,  void *indirect, GLsizei drawcount, GLsizei stride );
define GL_MultiDrawArraysIndirectCount = fn void  (GLenum mode,  void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
define GL_MultiDrawElementsBaseVertex = fn void  (GLenum mode,  GLsizei *count, GLenum value_type,  void **indices, GLsizei drawcount,  GLint *basevertex );
define GL_MultiDrawElementsIndirect = fn void  (GLenum mode, GLenum value_type,  void *indirect, GLsizei drawcount, GLsizei stride );
define GL_MultiDrawElementsIndirectCount = fn void  (GLenum mode, GLenum value_type,  void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
define GL_MultiTexCoord1d = fn void  (GLenum target, GLdouble s );
define GL_MultiTexCoord1dv = fn void  (GLenum target,  GLdouble *v );
define GL_MultiTexCoord1f = fn void  (GLenum target, GLfloat s );
define GL_MultiTexCoord1fv = fn void  (GLenum target,  GLfloat *v );
define GL_MultiTexCoord1i = fn void  (GLenum target, GLint s );
define GL_MultiTexCoord1iv = fn void  (GLenum target,  GLint *v );
define GL_MultiTexCoord1s = fn void  (GLenum target, GLshort s );
define GL_MultiTexCoord1sv = fn void  (GLenum target,  GLshort *v );
define GL_MultiTexCoord2d = fn void  (GLenum target, GLdouble s, GLdouble t );
define GL_MultiTexCoord2dv = fn void  (GLenum target,  GLdouble *v );
define GL_MultiTexCoord2f = fn void  (GLenum target, GLfloat s, GLfloat t );
define GL_MultiTexCoord2fv = fn void  (GLenum target,  GLfloat *v );
define GL_MultiTexCoord2i = fn void  (GLenum target, GLint s, GLint t );
define GL_MultiTexCoord2iv = fn void  (GLenum target,  GLint *v );
define GL_MultiTexCoord2s = fn void  (GLenum target, GLshort s, GLshort t );
define GL_MultiTexCoord2sv = fn void  (GLenum target,  GLshort *v );
define GL_MultiTexCoord3d = fn void  (GLenum target, GLdouble s, GLdouble t, GLdouble r );
define GL_MultiTexCoord3dv = fn void  (GLenum target,  GLdouble *v );
define GL_MultiTexCoord3f = fn void  (GLenum target, GLfloat s, GLfloat t, GLfloat r );
define GL_MultiTexCoord3fv = fn void  (GLenum target,  GLfloat *v );
define GL_MultiTexCoord3i = fn void  (GLenum target, GLint s, GLint t, GLint r );
define GL_MultiTexCoord3iv = fn void  (GLenum target,  GLint *v );
define GL_MultiTexCoord3s = fn void  (GLenum target, GLshort s, GLshort t, GLshort r );
define GL_MultiTexCoord3sv = fn void  (GLenum target,  GLshort *v );
define GL_MultiTexCoord4d = fn void  (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
define GL_MultiTexCoord4dv = fn void  (GLenum target,  GLdouble *v );
define GL_MultiTexCoord4f = fn void  (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
define GL_MultiTexCoord4fv = fn void  (GLenum target,  GLfloat *v );
define GL_MultiTexCoord4i = fn void  (GLenum target, GLint s, GLint t, GLint r, GLint q );
define GL_MultiTexCoord4iv = fn void  (GLenum target,  GLint *v );
define GL_MultiTexCoord4s = fn void  (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
define GL_MultiTexCoord4sv = fn void  (GLenum target,  GLshort *v );
define GL_MultiTexCoordP1ui = fn void  (GLenum texture, GLenum value_type, GLuint coords );
define GL_MultiTexCoordP1uiv = fn void  (GLenum texture, GLenum value_type,  GLuint *coords );
define GL_MultiTexCoordP2ui = fn void  (GLenum texture, GLenum value_type, GLuint coords );
define GL_MultiTexCoordP2uiv = fn void  (GLenum texture, GLenum value_type,  GLuint *coords );
define GL_MultiTexCoordP3ui = fn void  (GLenum texture, GLenum value_type, GLuint coords );
define GL_MultiTexCoordP3uiv = fn void  (GLenum texture, GLenum value_type,  GLuint *coords );
define GL_MultiTexCoordP4ui = fn void  (GLenum texture, GLenum value_type, GLuint coords );
define GL_MultiTexCoordP4uiv = fn void  (GLenum texture, GLenum value_type,  GLuint *coords );
define GL_NamedBufferData = fn void  (GLuint buffer, GLsizeiptr size,  void *data, GLenum usage );
define GL_NamedBufferStorage = fn void  (GLuint buffer, GLsizeiptr size,  void *data, GLbitfield flags );
define GL_NamedBufferSubData = fn void  (GLuint buffer, GLintptr offset, GLsizeiptr size,  void *data );
define GL_NamedFramebufferDrawBuffer = fn void  (GLuint framebuffer, GLenum buf );
define GL_NamedFramebufferDrawBuffers = fn void  (GLuint framebuffer, GLsizei n,  GLenum *bufs );
define GL_NamedFramebufferParameteri = fn void  (GLuint framebuffer, GLenum pname, GLint param );
define GL_NamedFramebufferReadBuffer = fn void  (GLuint framebuffer, GLenum src );
define GL_NamedFramebufferRenderbuffer = fn void  (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
define GL_NamedFramebufferTexture = fn void  (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
define GL_NamedFramebufferTextureLayer = fn void  (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
define GL_NamedRenderbufferStorage = fn void  (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
define GL_NamedRenderbufferStorageMultisample = fn void  (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
define GL_NewList = fn void  (GLuint list, GLenum mode );
define GL_Normal3b = fn void  (GLbyte nx, GLbyte ny, GLbyte nz );
define GL_Normal3bv = fn void  ( GLbyte *v );
define GL_Normal3d = fn void  (GLdouble nx, GLdouble ny, GLdouble nz );
define GL_Normal3dv = fn void  ( GLdouble *v );
define GL_Normal3f = fn void  (GLfloat nx, GLfloat ny, GLfloat nz );
define GL_Normal3fv = fn void  ( GLfloat *v );
define GL_Normal3i = fn void  (GLint nx, GLint ny, GLint nz );
define GL_Normal3iv = fn void  ( GLint *v );
define GL_Normal3s = fn void  (GLshort nx, GLshort ny, GLshort nz );
define GL_Normal3sv = fn void  ( GLshort *v );
define GL_NormalP3ui = fn void  (GLenum value_type, GLuint coords );
define GL_NormalP3uiv = fn void  (GLenum value_type,  GLuint *coords );
define GL_NormalPointer = fn void  (GLenum value_type, GLsizei stride,  void *pointer );
define GL_ObjectLabel = fn void  (GLenum identifier, GLuint name, GLsizei length,  GLchar *label );
define GL_ObjectPtrLabel = fn void  ( void *ptr, GLsizei length,  GLchar *label );
define GL_Ortho = fn void  (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
define GL_PassThrough = fn void  (GLfloat token );
define GL_PatchParameterfv = fn void  (GLenum pname,  GLfloat *values );
define GL_PatchParameteri = fn void  (GLenum pname, GLint value );
define GL_PauseTransformFeedback = fn void  ( );
define GL_PixelMapfv = fn void  (GLenum map, GLsizei mapsize,  GLfloat *values );
define GL_PixelMapuiv = fn void  (GLenum map, GLsizei mapsize,  GLuint *values );
define GL_PixelMapusv = fn void  (GLenum map, GLsizei mapsize,  GLushort *values );
define GL_PixelStoref = fn void  (GLenum pname, GLfloat param );
define GL_PixelStorei = fn void  (GLenum pname, GLint param );
define GL_PixelTransferf = fn void  (GLenum pname, GLfloat param );
define GL_PixelTransferi = fn void  (GLenum pname, GLint param );
define GL_PixelZoom = fn void  (GLfloat xfactor, GLfloat yfactor );
define GL_PointSize = fn void  (GLfloat size );
define GL_PolygonMode = fn void  (GLenum face, GLenum mode );
define GL_PolygonOffset = fn void  (GLfloat factor, GLfloat units );
define GL_PolygonOffsetClamp = fn void  (GLfloat factor, GLfloat units, GLfloat clamp );
define GL_PolygonStipple = fn void  ( GLubyte *mask );
define GL_PopAttrib = fn void  ( );
define GL_PopClientAttrib = fn void  ( );
define GL_PopDebugGroup = fn void  ( );
define GL_PopMatrix = fn void  ( );
define GL_PopName = fn void  ( );
define GL_PrimitiveRestartIndex = fn void  (GLuint index );
define GL_PrioritizeTextures = fn void  (GLsizei n,  GLuint *textures,  GLfloat *priorities );
define GL_ProgramBinary = fn void  (GLuint program, GLenum binaryFormat,  void *binary, GLsizei length );
define GL_ProgramParameteri = fn void  (GLuint program, GLenum pname, GLint value );
define GL_ProgramUniform1d = fn void  (GLuint program, GLint location, GLdouble v0 );
define GL_ProgramUniform1dv = fn void  (GLuint program, GLint location, GLsizei count,  GLdouble *value );
define GL_ProgramUniform1f = fn void  (GLuint program, GLint location, GLfloat v0 );
define GL_ProgramUniform1fv = fn void  (GLuint program, GLint location, GLsizei count,  GLfloat *value );
define GL_ProgramUniform1i = fn void  (GLuint program, GLint location, GLint v0 );
define GL_ProgramUniform1iv = fn void  (GLuint program, GLint location, GLsizei count,  GLint *value );
define GL_ProgramUniform1ui = fn void  (GLuint program, GLint location, GLuint v0 );
define GL_ProgramUniform1uiv = fn void  (GLuint program, GLint location, GLsizei count,  GLuint *value );
define GL_ProgramUniform2d = fn void  (GLuint program, GLint location, GLdouble v0, GLdouble v1 );
define GL_ProgramUniform2dv = fn void  (GLuint program, GLint location, GLsizei count,  GLdouble *value );
define GL_ProgramUniform2f = fn void  (GLuint program, GLint location, GLfloat v0, GLfloat v1 );
define GL_ProgramUniform2fv = fn void  (GLuint program, GLint location, GLsizei count,  GLfloat *value );
define GL_ProgramUniform2i = fn void  (GLuint program, GLint location, GLint v0, GLint v1 );
define GL_ProgramUniform2iv = fn void  (GLuint program, GLint location, GLsizei count,  GLint *value );
define GL_ProgramUniform2ui = fn void  (GLuint program, GLint location, GLuint v0, GLuint v1 );
define GL_ProgramUniform2uiv = fn void  (GLuint program, GLint location, GLsizei count,  GLuint *value );
define GL_ProgramUniform3d = fn void  (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 );
define GL_ProgramUniform3dv = fn void  (GLuint program, GLint location, GLsizei count,  GLdouble *value );
define GL_ProgramUniform3f = fn void  (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
define GL_ProgramUniform3fv = fn void  (GLuint program, GLint location, GLsizei count,  GLfloat *value );
define GL_ProgramUniform3i = fn void  (GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
define GL_ProgramUniform3iv = fn void  (GLuint program, GLint location, GLsizei count,  GLint *value );
define GL_ProgramUniform3ui = fn void  (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
define GL_ProgramUniform3uiv = fn void  (GLuint program, GLint location, GLsizei count,  GLuint *value );
define GL_ProgramUniform4d = fn void  (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 );
define GL_ProgramUniform4dv = fn void  (GLuint program, GLint location, GLsizei count,  GLdouble *value );
define GL_ProgramUniform4f = fn void  (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
define GL_ProgramUniform4fv = fn void  (GLuint program, GLint location, GLsizei count,  GLfloat *value );
define GL_ProgramUniform4i = fn void  (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
define GL_ProgramUniform4iv = fn void  (GLuint program, GLint location, GLsizei count,  GLint *value );
define GL_ProgramUniform4ui = fn void  (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
define GL_ProgramUniform4uiv = fn void  (GLuint program, GLint location, GLsizei count,  GLuint *value );
define GL_ProgramUniformMatrix2dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix2fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix2x3dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix2x3fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix2x4dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix2x4fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix3dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix3fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix3x2dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix3x2fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix3x4dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix3x4fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix4dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix4fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix4x2dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix4x2fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProgramUniformMatrix4x3dv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_ProgramUniformMatrix4x3fv = fn void  (GLuint program, GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_ProvokingVertex = fn void  (GLenum mode );
define GL_PushAttrib = fn void  (GLbitfield mask );
define GL_PushClientAttrib = fn void  (GLbitfield mask );
define GL_PushDebugGroup = fn void  (GLenum source, GLuint id, GLsizei length,  GLchar *message );
define GL_PushMatrix = fn void  ( );
define GL_PushName = fn void  (GLuint name );
define GL_QueryCounter = fn void  (GLuint id, GLenum target );
define GL_RasterPos2d = fn void  (GLdouble x, GLdouble y );
define GL_RasterPos2dv = fn void  ( GLdouble *v );
define GL_RasterPos2f = fn void  (GLfloat x, GLfloat y );
define GL_RasterPos2fv = fn void  ( GLfloat *v );
define GL_RasterPos2i = fn void  (GLint x, GLint y );
define GL_RasterPos2iv = fn void  ( GLint *v );
define GL_RasterPos2s = fn void  (GLshort x, GLshort y );
define GL_RasterPos2sv = fn void  ( GLshort *v );
define GL_RasterPos3d = fn void  (GLdouble x, GLdouble y, GLdouble z );
define GL_RasterPos3dv = fn void  ( GLdouble *v );
define GL_RasterPos3f = fn void  (GLfloat x, GLfloat y, GLfloat z );
define GL_RasterPos3fv = fn void  ( GLfloat *v );
define GL_RasterPos3i = fn void  (GLint x, GLint y, GLint z );
define GL_RasterPos3iv = fn void  ( GLint *v );
define GL_RasterPos3s = fn void  (GLshort x, GLshort y, GLshort z );
define GL_RasterPos3sv = fn void  ( GLshort *v );
define GL_RasterPos4d = fn void  (GLdouble x, GLdouble y, GLdouble z, GLdouble w );
define GL_RasterPos4dv = fn void  ( GLdouble *v );
define GL_RasterPos4f = fn void  (GLfloat x, GLfloat y, GLfloat z, GLfloat w );
define GL_RasterPos4fv = fn void  ( GLfloat *v );
define GL_RasterPos4i = fn void  (GLint x, GLint y, GLint z, GLint w );
define GL_RasterPos4iv = fn void  ( GLint *v );
define GL_RasterPos4s = fn void  (GLshort x, GLshort y, GLshort z, GLshort w );
define GL_RasterPos4sv = fn void  ( GLshort *v );
define GL_ReadBuffer = fn void  (GLenum src );
define GL_ReadPixels = fn void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum value_type, void *pixels );
define GL_ReadnPixels = fn void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum value_type, GLsizei bufSize, void *data );
define GL_Rectd = fn void  (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
define GL_Rectdv = fn void  ( GLdouble *v1,  GLdouble *v2 );
define GL_Rectf = fn void  (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
define GL_Rectfv = fn void  ( GLfloat *v1,  GLfloat *v2 );
define GL_Recti = fn void  (GLint x1, GLint y1, GLint x2, GLint y2 );
define GL_Rectiv = fn void  ( GLint *v1,  GLint *v2 );
define GL_Rects = fn void  (GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
define GL_Rectsv = fn void  ( GLshort *v1,  GLshort *v2 );
define GL_ReleaseShaderCompiler = fn void  ( );
define GL_RenderMode = fn GLint  (GLenum mode );
define GL_RenderbufferStorage = fn void  (GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
define GL_RenderbufferStorageMultisample = fn void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
define GL_ResumeTransformFeedback = fn void  ( );
define GL_Rotated = fn void  (GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
define GL_Rotatef = fn void  (GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
define GL_SampleMaski = fn void  (GLuint maskNumber, GLbitfield mask );
define GL_SamplerParameterIiv = fn void  (GLuint sampler, GLenum pname,  GLint *param );
define GL_SamplerParameterIuiv = fn void  (GLuint sampler, GLenum pname,  GLuint *param );
define GL_SamplerParameterf = fn void  (GLuint sampler, GLenum pname, GLfloat param );
define GL_SamplerParameterfv = fn void  (GLuint sampler, GLenum pname,  GLfloat *param );
define GL_SamplerParameteri = fn void  (GLuint sampler, GLenum pname, GLint param );
define GL_SamplerParameteriv = fn void  (GLuint sampler, GLenum pname,  GLint *param );
define GL_Scaled = fn void  (GLdouble x, GLdouble y, GLdouble z );
define GL_Scalef = fn void  (GLfloat x, GLfloat y, GLfloat z );
define GL_Scissor = fn void  (GLint x, GLint y, GLsizei width, GLsizei height );
define GL_ScissorArrayv = fn void  (GLuint first, GLsizei count,  GLint *v );
define GL_ScissorIndexed = fn void  (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height );
define GL_ScissorIndexedv = fn void  (GLuint index,  GLint *v );
define GL_SecondaryColor3b = fn void  (GLbyte red, GLbyte green, GLbyte blue );
define GL_SecondaryColor3bv = fn void  ( GLbyte *v );
define GL_SecondaryColor3d = fn void  (GLdouble red, GLdouble green, GLdouble blue );
define GL_SecondaryColor3dv = fn void  ( GLdouble *v );
define GL_SecondaryColor3f = fn void  (GLfloat red, GLfloat green, GLfloat blue );
define GL_SecondaryColor3fv = fn void  ( GLfloat *v );
define GL_SecondaryColor3i = fn void  (GLint red, GLint green, GLint blue );
define GL_SecondaryColor3iv = fn void  ( GLint *v );
define GL_SecondaryColor3s = fn void  (GLshort red, GLshort green, GLshort blue );
define GL_SecondaryColor3sv = fn void  ( GLshort *v );
define GL_SecondaryColor3ub = fn void  (GLubyte red, GLubyte green, GLubyte blue );
define GL_SecondaryColor3ubv = fn void  ( GLubyte *v );
define GL_SecondaryColor3ui = fn void  (GLuint red, GLuint green, GLuint blue );
define GL_SecondaryColor3uiv = fn void  ( GLuint *v );
define GL_SecondaryColor3us = fn void  (GLushort red, GLushort green, GLushort blue );
define GL_SecondaryColor3usv = fn void  ( GLushort *v );
define GL_SecondaryColorP3ui = fn void  (GLenum value_type, GLuint color );
define GL_SecondaryColorP3uiv = fn void  (GLenum value_type,  GLuint *color );
define GL_SecondaryColorPointer = fn void  (GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_SelectBuffer = fn void  (GLsizei size, GLuint *buffer );
define GL_ShadeModel = fn void  (GLenum mode );
define GL_ShaderBinary = fn void  (GLsizei count,  GLuint *shaders, GLenum binaryFormat,  void *binary, GLsizei length );
define GL_ShaderSource = fn void  (GLuint shader, GLsizei count,  GLchar **string,  GLint *length );
define GL_ShaderStorageBlockBinding = fn void  (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding );
define GL_SpecializeShader = fn void  (GLuint shader,  GLchar *pEntryPoint, GLuint numSpecializationConstants,  GLuint *pConstantIndex,  GLuint *pConstantValue );
define GL_StencilFunc = fn void  (GLenum func_param, GLint ref, GLuint mask );
define GL_StencilFuncSeparate = fn void  (GLenum face, GLenum func_param, GLint ref, GLuint mask );
define GL_StencilMask = fn void  (GLuint mask );
define GL_StencilMaskSeparate = fn void  (GLenum face, GLuint mask );
define GL_StencilOp = fn void  (GLenum fail, GLenum zfail, GLenum zpass );
define GL_StencilOpSeparate = fn void  (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
define GL_TexBuffer = fn void  (GLenum target, GLenum internalformat, GLuint buffer );
define GL_TexBufferRange = fn void  (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
define GL_TexCoord1d = fn void  (GLdouble s );
define GL_TexCoord1dv = fn void  ( GLdouble *v );
define GL_TexCoord1f = fn void  (GLfloat s );
define GL_TexCoord1fv = fn void  ( GLfloat *v );
define GL_TexCoord1i = fn void  (GLint s );
define GL_TexCoord1iv = fn void  ( GLint *v );
define GL_TexCoord1s = fn void  (GLshort s );
define GL_TexCoord1sv = fn void  ( GLshort *v );
define GL_TexCoord2d = fn void  (GLdouble s, GLdouble t );
define GL_TexCoord2dv = fn void  ( GLdouble *v );
define GL_TexCoord2f = fn void  (GLfloat s, GLfloat t );
define GL_TexCoord2fv = fn void  ( GLfloat *v );
define GL_TexCoord2i = fn void  (GLint s, GLint t );
define GL_TexCoord2iv = fn void  ( GLint *v );
define GL_TexCoord2s = fn void  (GLshort s, GLshort t );
define GL_TexCoord2sv = fn void  ( GLshort *v );
define GL_TexCoord3d = fn void  (GLdouble s, GLdouble t, GLdouble r );
define GL_TexCoord3dv = fn void  ( GLdouble *v );
define GL_TexCoord3f = fn void  (GLfloat s, GLfloat t, GLfloat r );
define GL_TexCoord3fv = fn void  ( GLfloat *v );
define GL_TexCoord3i = fn void  (GLint s, GLint t, GLint r );
define GL_TexCoord3iv = fn void  ( GLint *v );
define GL_TexCoord3s = fn void  (GLshort s, GLshort t, GLshort r );
define GL_TexCoord3sv = fn void  ( GLshort *v );
define GL_TexCoord4d = fn void  (GLdouble s, GLdouble t, GLdouble r, GLdouble q );
define GL_TexCoord4dv = fn void  ( GLdouble *v );
define GL_TexCoord4f = fn void  (GLfloat s, GLfloat t, GLfloat r, GLfloat q );
define GL_TexCoord4fv = fn void  ( GLfloat *v );
define GL_TexCoord4i = fn void  (GLint s, GLint t, GLint r, GLint q );
define GL_TexCoord4iv = fn void  ( GLint *v );
define GL_TexCoord4s = fn void  (GLshort s, GLshort t, GLshort r, GLshort q );
define GL_TexCoord4sv = fn void  ( GLshort *v );
define GL_TexCoordP1ui = fn void  (GLenum value_type, GLuint coords );
define GL_TexCoordP1uiv = fn void  (GLenum value_type,  GLuint *coords );
define GL_TexCoordP2ui = fn void  (GLenum value_type, GLuint coords );
define GL_TexCoordP2uiv = fn void  (GLenum value_type,  GLuint *coords );
define GL_TexCoordP3ui = fn void  (GLenum value_type, GLuint coords );
define GL_TexCoordP3uiv = fn void  (GLenum value_type,  GLuint *coords );
define GL_TexCoordP4ui = fn void  (GLenum value_type, GLuint coords );
define GL_TexCoordP4uiv = fn void  (GLenum value_type,  GLuint *coords );
define GL_TexCoordPointer = fn void  (GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_TexEnvf = fn void  (GLenum target, GLenum pname, GLfloat param );
define GL_TexEnvfv = fn void  (GLenum target, GLenum pname,  GLfloat *params );
define GL_TexEnvi = fn void  (GLenum target, GLenum pname, GLint param );
define GL_TexEnviv = fn void  (GLenum target, GLenum pname,  GLint *params );
define GL_TexGend = fn void  (GLenum coord, GLenum pname, GLdouble param );
define GL_TexGendv = fn void  (GLenum coord, GLenum pname,  GLdouble *params );
define GL_TexGenf = fn void  (GLenum coord, GLenum pname, GLfloat param );
define GL_TexGenfv = fn void  (GLenum coord, GLenum pname,  GLfloat *params );
define GL_TexGeni = fn void  (GLenum coord, GLenum pname, GLint param );
define GL_TexGeniv = fn void  (GLenum coord, GLenum pname,  GLint *params );
define GL_TexImage1D = fn void  (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum value_type,  void *pixels );
define GL_TexImage2D = fn void  (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum value_type,  void *pixels );
define GL_TexImage2DMultisample = fn void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
define GL_TexImage3DMultisample = fn void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
define GL_TexParameterIiv = fn void  (GLenum target, GLenum pname,  GLint *params );
define GL_TexParameterIuiv = fn void  (GLenum target, GLenum pname,  GLuint *params );
define GL_TexParameterf = fn void  (GLenum target, GLenum pname, GLfloat param );
define GL_TexParameterfv = fn void  (GLenum target, GLenum pname,  GLfloat *params );
define GL_TexParameteri = fn void  (GLenum target, GLenum pname, GLint param );
define GL_TexParameteriv = fn void  (GLenum target, GLenum pname,  GLint *params );
define GL_TexStorage1D = fn void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
define GL_TexStorage2D = fn void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
define GL_TexStorage2DMultisample = fn void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
define GL_TexStorage3D = fn void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
define GL_TexStorage3DMultisample = fn void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
define GL_TexSubImage1D = fn void  (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum value_type,  void *pixels );
define GL_TexSubImage2D = fn void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum value_type,  void *pixels );
define GL_TextureBarrier = fn void  ( );
define GL_TextureBuffer = fn void  (GLuint texture, GLenum internalformat, GLuint buffer );
define GL_TextureBufferRange = fn void  (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
define GL_TextureParameterIiv = fn void  (GLuint texture, GLenum pname,  GLint *params );
define GL_TextureParameterIuiv = fn void  (GLuint texture, GLenum pname,  GLuint *params );
define GL_TextureParameterf = fn void  (GLuint texture, GLenum pname, GLfloat param );
define GL_TextureParameterfv = fn void  (GLuint texture, GLenum pname,  GLfloat *param );
define GL_TextureParameteri = fn void  (GLuint texture, GLenum pname, GLint param );
define GL_TextureParameteriv = fn void  (GLuint texture, GLenum pname,  GLint *param );
define GL_TextureStorage1D = fn void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width );
define GL_TextureStorage2D = fn void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
define GL_TextureStorage2DMultisample = fn void  (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
define GL_TextureStorage3D = fn void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
define GL_TextureStorage3DMultisample = fn void  (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
define GL_TextureSubImage1D = fn void  (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum value_type,  void *pixels );
define GL_TextureSubImage2D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum value_type,  void *pixels );
define GL_TextureSubImage3D = fn void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum value_type,  void *pixels );
define GL_TextureView = fn void  (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers );
define GL_TransformFeedbackBufferBase = fn void  (GLuint xfb, GLuint index, GLuint buffer );
define GL_TransformFeedbackBufferRange = fn void  (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
define GL_TransformFeedbackVaryings = fn void  (GLuint program, GLsizei count,  GLchar **varyings, GLenum bufferMode );
define GL_Translated = fn void  (GLdouble x, GLdouble y, GLdouble z );
define GL_Translatef = fn void  (GLfloat x, GLfloat y, GLfloat z );
define GL_Uniform1d = fn void  (GLint location, GLdouble x );
define GL_Uniform1dv = fn void  (GLint location, GLsizei count,  GLdouble *value );
define GL_Uniform1f = fn void  (GLint location, GLfloat v0 );
define GL_Uniform1fv = fn void  (GLint location, GLsizei count,  GLfloat *value );
define GL_Uniform1i = fn void  (GLint location, GLint v0 );
define GL_Uniform1iv = fn void  (GLint location, GLsizei count,  GLint *value );
define GL_Uniform1ui = fn void  (GLint location, GLuint v0 );
define GL_Uniform1uiv = fn void  (GLint location, GLsizei count,  GLuint *value );
define GL_Uniform2d = fn void  (GLint location, GLdouble x, GLdouble y );
define GL_Uniform2dv = fn void  (GLint location, GLsizei count,  GLdouble *value );
define GL_Uniform2f = fn void  (GLint location, GLfloat v0, GLfloat v1 );
define GL_Uniform2fv = fn void  (GLint location, GLsizei count,  GLfloat *value );
define GL_Uniform2i = fn void  (GLint location, GLint v0, GLint v1 );
define GL_Uniform2iv = fn void  (GLint location, GLsizei count,  GLint *value );
define GL_Uniform2ui = fn void  (GLint location, GLuint v0, GLuint v1 );
define GL_Uniform2uiv = fn void  (GLint location, GLsizei count,  GLuint *value );
define GL_Uniform3d = fn void  (GLint location, GLdouble x, GLdouble y, GLdouble z );
define GL_Uniform3dv = fn void  (GLint location, GLsizei count,  GLdouble *value );
define GL_Uniform3f = fn void  (GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
define GL_Uniform3fv = fn void  (GLint location, GLsizei count,  GLfloat *value );
define GL_Uniform3i = fn void  (GLint location, GLint v0, GLint v1, GLint v2 );
define GL_Uniform3iv = fn void  (GLint location, GLsizei count,  GLint *value );
define GL_Uniform3ui = fn void  (GLint location, GLuint v0, GLuint v1, GLuint v2 );
define GL_Uniform3uiv = fn void  (GLint location, GLsizei count,  GLuint *value );
define GL_Uniform4d = fn void  (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
define GL_Uniform4dv = fn void  (GLint location, GLsizei count,  GLdouble *value );
define GL_Uniform4f = fn void  (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
define GL_Uniform4fv = fn void  (GLint location, GLsizei count,  GLfloat *value );
define GL_Uniform4i = fn void  (GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
define GL_Uniform4iv = fn void  (GLint location, GLsizei count,  GLint *value );
define GL_Uniform4ui = fn void  (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
define GL_Uniform4uiv = fn void  (GLint location, GLsizei count,  GLuint *value );
define GL_UniformBlockBinding = fn void  (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
define GL_UniformMatrix2dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix2fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix2x3dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix2x3fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix2x4dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix2x4fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix3dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix3fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix3x2dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix3x2fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix3x4dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix3x4fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix4dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix4fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix4x2dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix4x2fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformMatrix4x3dv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLdouble *value );
define GL_UniformMatrix4x3fv = fn void  (GLint location, GLsizei count, GLboolean transpose,  GLfloat *value );
define GL_UniformSubroutinesuiv = fn void  (GLenum shadertype, GLsizei count,  GLuint *indices );
define GL_UnmapBuffer = fn GLboolean  (GLenum target );
define GL_UnmapNamedBuffer = fn GLboolean  (GLuint buffer );
define GL_UseProgram = fn void  (GLuint program );
define GL_UseProgramStages = fn void  (GLuint pipeline, GLbitfield stages, GLuint program );
define GL_ValidateProgram = fn void  (GLuint program );
define GL_ValidateProgramPipeline = fn void  (GLuint pipeline );
define GL_Vertex2d = fn void  (GLdouble x, GLdouble y );
define GL_Vertex2dv = fn void  ( GLdouble *v );
define GL_Vertex2f = fn void  (GLfloat x, GLfloat y );
define GL_Vertex2fv = fn void  ( GLfloat *v );
define GL_Vertex2i = fn void  (GLint x, GLint y );
define GL_Vertex2iv = fn void  ( GLint *v );
define GL_Vertex2s = fn void  (GLshort x, GLshort y );
define GL_Vertex2sv = fn void  ( GLshort *v );
define GL_Vertex3d = fn void  (GLdouble x, GLdouble y, GLdouble z );
define GL_Vertex3dv = fn void  ( GLdouble *v );
define GL_Vertex3f = fn void  (GLfloat x, GLfloat y, GLfloat z );
define GL_Vertex3fv = fn void  ( GLfloat *v );
define GL_Vertex3i = fn void  (GLint x, GLint y, GLint z );
define GL_Vertex3iv = fn void  ( GLint *v );
define GL_Vertex3s = fn void  (GLshort x, GLshort y, GLshort z );
define GL_Vertex3sv = fn void  ( GLshort *v );
define GL_Vertex4d = fn void  (GLdouble x, GLdouble y, GLdouble z, GLdouble w );
define GL_Vertex4dv = fn void  ( GLdouble *v );
define GL_Vertex4f = fn void  (GLfloat x, GLfloat y, GLfloat z, GLfloat w );
define GL_Vertex4fv = fn void  ( GLfloat *v );
define GL_Vertex4i = fn void  (GLint x, GLint y, GLint z, GLint w );
define GL_Vertex4iv = fn void  ( GLint *v );
define GL_Vertex4s = fn void  (GLshort x, GLshort y, GLshort z, GLshort w );
define GL_Vertex4sv = fn void  ( GLshort *v );
define GL_VertexArrayAttribBinding = fn void  (GLuint vaobj, GLuint attribindex, GLuint bindingindex );
define GL_VertexArrayAttribFormat = fn void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum value_type, GLboolean normalized, GLuint relativeoffset );
define GL_VertexArrayAttribIFormat = fn void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum value_type, GLuint relativeoffset );
define GL_VertexArrayAttribLFormat = fn void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum value_type, GLuint relativeoffset );
define GL_VertexArrayBindingDivisor = fn void  (GLuint vaobj, GLuint bindingindex, GLuint divisor );
define GL_VertexArrayElementBuffer = fn void  (GLuint vaobj, GLuint buffer );
define GL_VertexArrayVertexBuffer = fn void  (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
define GL_VertexArrayVertexBuffers = fn void  (GLuint vaobj, GLuint first, GLsizei count,  GLuint *buffers,  GLintptr *offsets,  GLsizei *strides );
define GL_VertexAttrib1d = fn void  (GLuint index, GLdouble x );
define GL_VertexAttrib1dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttrib1f = fn void  (GLuint index, GLfloat x );
define GL_VertexAttrib1fv = fn void  (GLuint index,  GLfloat *v );
define GL_VertexAttrib1s = fn void  (GLuint index, GLshort x );
define GL_VertexAttrib1sv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttrib2d = fn void  (GLuint index, GLdouble x, GLdouble y );
define GL_VertexAttrib2dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttrib2f = fn void  (GLuint index, GLfloat x, GLfloat y );
define GL_VertexAttrib2fv = fn void  (GLuint index,  GLfloat *v );
define GL_VertexAttrib2s = fn void  (GLuint index, GLshort x, GLshort y );
define GL_VertexAttrib2sv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttrib3d = fn void  (GLuint index, GLdouble x, GLdouble y, GLdouble z );
define GL_VertexAttrib3dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttrib3f = fn void  (GLuint index, GLfloat x, GLfloat y, GLfloat z );
define GL_VertexAttrib3fv = fn void  (GLuint index,  GLfloat *v );
define GL_VertexAttrib3s = fn void  (GLuint index, GLshort x, GLshort y, GLshort z );
define GL_VertexAttrib3sv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttrib4Nbv = fn void  (GLuint index,  GLbyte *v );
define GL_VertexAttrib4Niv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttrib4Nsv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttrib4Nub = fn void  (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
define GL_VertexAttrib4Nubv = fn void  (GLuint index,  GLubyte *v );
define GL_VertexAttrib4Nuiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttrib4Nusv = fn void  (GLuint index,  GLushort *v );
define GL_VertexAttrib4bv = fn void  (GLuint index,  GLbyte *v );
define GL_VertexAttrib4d = fn void  (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
define GL_VertexAttrib4dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttrib4f = fn void  (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
define GL_VertexAttrib4fv = fn void  (GLuint index,  GLfloat *v );
define GL_VertexAttrib4iv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttrib4s = fn void  (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
define GL_VertexAttrib4sv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttrib4ubv = fn void  (GLuint index,  GLubyte *v );
define GL_VertexAttrib4uiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttrib4usv = fn void  (GLuint index,  GLushort *v );
define GL_VertexAttribBinding = fn void  (GLuint attribindex, GLuint bindingindex );
define GL_VertexAttribDivisor = fn void  (GLuint index, GLuint divisor );
define GL_VertexAttribFormat = fn void  (GLuint attribindex, GLint size, GLenum value_type, GLboolean normalized, GLuint relativeoffset );
define GL_VertexAttribI1i = fn void  (GLuint index, GLint x );
define GL_VertexAttribI1iv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttribI1ui = fn void  (GLuint index, GLuint x );
define GL_VertexAttribI1uiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttribI2i = fn void  (GLuint index, GLint x, GLint y );
define GL_VertexAttribI2iv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttribI2ui = fn void  (GLuint index, GLuint x, GLuint y );
define GL_VertexAttribI2uiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttribI3i = fn void  (GLuint index, GLint x, GLint y, GLint z );
define GL_VertexAttribI3iv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttribI3ui = fn void  (GLuint index, GLuint x, GLuint y, GLuint z );
define GL_VertexAttribI3uiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttribI4bv = fn void  (GLuint index,  GLbyte *v );
define GL_VertexAttribI4i = fn void  (GLuint index, GLint x, GLint y, GLint z, GLint w );
define GL_VertexAttribI4iv = fn void  (GLuint index,  GLint *v );
define GL_VertexAttribI4sv = fn void  (GLuint index,  GLshort *v );
define GL_VertexAttribI4ubv = fn void  (GLuint index,  GLubyte *v );
define GL_VertexAttribI4ui = fn void  (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
define GL_VertexAttribI4uiv = fn void  (GLuint index,  GLuint *v );
define GL_VertexAttribI4usv = fn void  (GLuint index,  GLushort *v );
define GL_VertexAttribIFormat = fn void  (GLuint attribindex, GLint size, GLenum value_type, GLuint relativeoffset );
define GL_VertexAttribIPointer = fn void  (GLuint index, GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_VertexAttribL1d = fn void  (GLuint index, GLdouble x );
define GL_VertexAttribL1dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttribL2d = fn void  (GLuint index, GLdouble x, GLdouble y );
define GL_VertexAttribL2dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttribL3d = fn void  (GLuint index, GLdouble x, GLdouble y, GLdouble z );
define GL_VertexAttribL3dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttribL4d = fn void  (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
define GL_VertexAttribL4dv = fn void  (GLuint index,  GLdouble *v );
define GL_VertexAttribLFormat = fn void  (GLuint attribindex, GLint size, GLenum value_type, GLuint relativeoffset );
define GL_VertexAttribLPointer = fn void  (GLuint index, GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_VertexAttribP1ui = fn void  (GLuint index, GLenum value_type, GLboolean normalized, GLuint value );
define GL_VertexAttribP1uiv = fn void  (GLuint index, GLenum value_type, GLboolean normalized,  GLuint *value );
define GL_VertexAttribP2ui = fn void  (GLuint index, GLenum value_type, GLboolean normalized, GLuint value );
define GL_VertexAttribP2uiv = fn void  (GLuint index, GLenum value_type, GLboolean normalized,  GLuint *value );
define GL_VertexAttribP3ui = fn void  (GLuint index, GLenum value_type, GLboolean normalized, GLuint value );
define GL_VertexAttribP3uiv = fn void  (GLuint index, GLenum value_type, GLboolean normalized,  GLuint *value );
define GL_VertexAttribP4ui = fn void  (GLuint index, GLenum value_type, GLboolean normalized, GLuint value );
define GL_VertexAttribP4uiv = fn void  (GLuint index, GLenum value_type, GLboolean normalized,  GLuint *value );
define GL_VertexAttribPointer = fn void  (GLuint index, GLint size, GLenum value_type, GLboolean normalized, GLsizei stride,  void *pointer );
define GL_VertexBindingDivisor = fn void  (GLuint bindingindex, GLuint divisor );
define GL_VertexP2ui = fn void  (GLenum value_type, GLuint value );
define GL_VertexP2uiv = fn void  (GLenum value_type,  GLuint *value );
define GL_VertexP3ui = fn void  (GLenum value_type, GLuint value );
define GL_VertexP3uiv = fn void  (GLenum value_type,  GLuint *value );
define GL_VertexP4ui = fn void  (GLenum value_type, GLuint value );
define GL_VertexP4uiv = fn void  (GLenum value_type,  GLuint *value );
define GL_VertexPointer = fn void  (GLint size, GLenum value_type, GLsizei stride,  void *pointer );
define GL_Viewport = fn void  (GLint x, GLint y, GLsizei width, GLsizei height );
define GL_ViewportArrayv = fn void  (GLuint first, GLsizei count,  GLfloat *v );
define GL_ViewportIndexedf = fn void  (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h );
define GL_ViewportIndexedfv = fn void  (GLuint index,  GLfloat *v );
define GL_WaitSync = fn void  (GLsync sync, GLbitfield flags, GLuint64 timeout );
define GL_WindowPos2d = fn void  (GLdouble x, GLdouble y );
define GL_WindowPos2dv = fn void  ( GLdouble *v );
define GL_WindowPos2f = fn void  (GLfloat x, GLfloat y );
define GL_WindowPos2fv = fn void  ( GLfloat *v );
define GL_WindowPos2i = fn void  (GLint x, GLint y );
define GL_WindowPos2iv = fn void  ( GLint *v );
define GL_WindowPos2s = fn void  (GLshort x, GLshort y );
define GL_WindowPos2sv = fn void  ( GLshort *v );
define GL_WindowPos3d = fn void  (GLdouble x, GLdouble y, GLdouble z );
define GL_WindowPos3dv = fn void  ( GLdouble *v );
define GL_WindowPos3f = fn void  (GLfloat x, GLfloat y, GLfloat z );
define GL_WindowPos3fv = fn void  ( GLfloat *v );
define GL_WindowPos3i = fn void  (GLint x, GLint y, GLint z );
define GL_WindowPos3iv = fn void  ( GLint *v );
define GL_WindowPos3s = fn void  (GLshort x, GLshort y, GLshort z );
define GL_WindowPos3sv = fn void  ( GLshort *v );

/** 
* GLFW proc definitions 
*/ 

define ProcFN = fn void* (char*);


 


/** 
* Bindings 
*/ 
struct GL_bindings
{
GL_Accum accum;
GL_ActiveShaderProgram activeShaderProgram;
GL_AlphaFunc alphaFunc;
GL_AreTexturesResident areTexturesResident;
GL_ArrayElement arrayElement;
GL_AttachShader attachShader;
GL_Begin begin;
GL_BeginConditionalRender beginConditionalRender;
GL_BeginQuery beginQuery;
GL_BeginQueryIndexed beginQueryIndexed;
GL_BeginTransformFeedback beginTransformFeedback;
GL_BindAttribLocation bindAttribLocation;
GL_BindBuffer bindBuffer;
GL_BindBufferBase bindBufferBase;
GL_BindBufferRange bindBufferRange;
GL_BindBuffersBase bindBuffersBase;
GL_BindBuffersRange bindBuffersRange;
GL_BindFragDataLocation bindFragDataLocation;
GL_BindFragDataLocationIndexed bindFragDataLocationIndexed;
GL_BindFramebuffer bindFramebuffer;
GL_BindImageTexture bindImageTexture;
GL_BindImageTextures bindImageTextures;
GL_BindProgramPipeline bindProgramPipeline;
GL_BindRenderbuffer bindRenderbuffer;
GL_BindSampler bindSampler;
GL_BindSamplers bindSamplers;
GL_BindTexture bindTexture;
GL_BindTextureUnit bindTextureUnit;
GL_BindTextures bindTextures;
GL_BindTransformFeedback bindTransformFeedback;
GL_BindVertexArray bindVertexArray;
GL_BindVertexBuffer bindVertexBuffer;
GL_BindVertexBuffers bindVertexBuffers;
GL_Bitmap bitmap;
GL_BlendEquationSeparate blendEquationSeparate;
GL_BlendEquationSeparatei blendEquationSeparatei;
GL_BlendEquationi blendEquationi;
GL_BlendFunc blendFunc;
GL_BlendFuncSeparatei blendFuncSeparatei;
GL_BlendFunci blendFunci;
GL_BlitFramebuffer blitFramebuffer;
GL_BlitNamedFramebuffer blitNamedFramebuffer;
GL_BufferData bufferData;
GL_BufferStorage bufferStorage;
GL_BufferSubData bufferSubData;
GL_CallList callList;
GL_CallLists callLists;
GL_CheckFramebufferStatus checkFramebufferStatus;
GL_CheckNamedFramebufferStatus checkNamedFramebufferStatus;
GL_ClampColor clampColor;
GL_Clear clear;
GL_ClearAccum clearAccum;
GL_ClearBufferData clearBufferData;
GL_ClearBufferSubData clearBufferSubData;
GL_ClearBufferfi clearBufferfi;
GL_ClearBufferfv clearBufferfv;
GL_ClearBufferiv clearBufferiv;
GL_ClearBufferuiv clearBufferuiv;
GL_ClearColor clearColor;
GL_ClearDepth clearDepth;
GL_ClearDepthf clearDepthf;
GL_ClearIndex clearIndex;
GL_ClearNamedBufferData clearNamedBufferData;
GL_ClearNamedBufferSubData clearNamedBufferSubData;
GL_ClearNamedFramebufferfi clearNamedFramebufferfi;
GL_ClearNamedFramebufferfv clearNamedFramebufferfv;
GL_ClearNamedFramebufferiv clearNamedFramebufferiv;
GL_ClearNamedFramebufferuiv clearNamedFramebufferuiv;
GL_ClearStencil clearStencil;
GL_ClearTexImage clearTexImage;
GL_ClearTexSubImage clearTexSubImage;
GL_ClientActiveTexture clientActiveTexture;
GL_ClientWaitSync clientWaitSync;
GL_ClipControl clipControl;
GL_ClipPlane clipPlane;
GL_Color3b color3b;
GL_Color3bv color3bv;
GL_Color3d color3d;
GL_Color3dv color3dv;
GL_Color3f color3f;
GL_Color3fv color3fv;
GL_Color3i color3i;
GL_Color3iv color3iv;
GL_Color3s color3s;
GL_Color3sv color3sv;
GL_Color3ub color3ub;
GL_Color3ubv color3ubv;
GL_Color3ui color3ui;
GL_Color3uiv color3uiv;
GL_Color3us color3us;
GL_Color3usv color3usv;
GL_Color4b color4b;
GL_Color4bv color4bv;
GL_Color4d color4d;
GL_Color4dv color4dv;
GL_Color4f color4f;
GL_Color4fv color4fv;
GL_Color4i color4i;
GL_Color4iv color4iv;
GL_Color4s color4s;
GL_Color4sv color4sv;
GL_Color4ub color4ub;
GL_Color4ubv color4ubv;
GL_Color4ui color4ui;
GL_Color4uiv color4uiv;
GL_Color4us color4us;
GL_Color4usv color4usv;
GL_ColorMask colorMask;
GL_ColorMaski colorMaski;
GL_ColorMaterial colorMaterial;
GL_ColorP3ui colorP3ui;
GL_ColorP3uiv colorP3uiv;
GL_ColorP4ui colorP4ui;
GL_ColorP4uiv colorP4uiv;
GL_ColorPointer colorPointer;
GL_CompileShader compileShader;
GL_CompressedTextureSubImage1D compressedTextureSubImage1D;
GL_CompressedTextureSubImage2D compressedTextureSubImage2D;
GL_CompressedTextureSubImage3D compressedTextureSubImage3D;
GL_CopyBufferSubData copyBufferSubData;
GL_CopyImageSubData copyImageSubData;
GL_CopyNamedBufferSubData copyNamedBufferSubData;
GL_CopyPixels copyPixels;
GL_CopyTexImage1D copyTexImage1D;
GL_CopyTexImage2D copyTexImage2D;
GL_CopyTexSubImage1D copyTexSubImage1D;
GL_CopyTexSubImage2D copyTexSubImage2D;
GL_CopyTextureSubImage1D copyTextureSubImage1D;
GL_CopyTextureSubImage2D copyTextureSubImage2D;
GL_CopyTextureSubImage3D copyTextureSubImage3D;
GL_CreateBuffers createBuffers;
GL_CreateFramebuffers createFramebuffers;
GL_CreateProgram createProgram;
GL_CreateProgramPipelines createProgramPipelines;
GL_CreateQueries createQueries;
GL_CreateRenderbuffers createRenderbuffers;
GL_CreateSamplers createSamplers;
GL_CreateShader createShader;
GL_CreateShaderProgramv createShaderProgramv;
GL_CreateTextures createTextures;
GL_CreateTransformFeedbacks createTransformFeedbacks;
GL_CreateVertexArrays createVertexArrays;
GL_CullFace cullFace;
GL_DebugMessageCallback debugMessageCallback;
GL_DebugMessageControl debugMessageControl;
GL_DebugMessageInsert debugMessageInsert;
GL_DeleteBuffers deleteBuffers;
GL_DeleteFramebuffers deleteFramebuffers;
GL_DeleteLists deleteLists;
GL_DeleteProgram deleteProgram;
GL_DeleteProgramPipelines deleteProgramPipelines;
GL_DeleteQueries deleteQueries;
GL_DeleteRenderbuffers deleteRenderbuffers;
GL_DeleteSamplers deleteSamplers;
GL_DeleteShader deleteShader;
GL_DeleteSync deleteSync;
GL_DeleteTextures deleteTextures;
GL_DeleteTransformFeedbacks deleteTransformFeedbacks;
GL_DeleteVertexArrays deleteVertexArrays;
GL_DepthFunc depthFunc;
GL_DepthMask depthMask;
GL_DepthRange depthRange;
GL_DepthRangeArrayv depthRangeArrayv;
GL_DepthRangeIndexed depthRangeIndexed;
GL_DepthRangef depthRangef;
GL_DetachShader detachShader;
GL_Disable disable;
GL_DisableClientState disableClientState;
GL_DisableVertexArrayAttrib disableVertexArrayAttrib;
GL_DisableVertexAttribArray disableVertexAttribArray;
GL_Disablei disablei;
GL_DispatchCompute dispatchCompute;
GL_DispatchComputeIndirect dispatchComputeIndirect;
GL_DrawArrays drawArrays;
GL_DrawArraysIndirect drawArraysIndirect;
GL_DrawArraysInstanced drawArraysInstanced;
GL_DrawArraysInstancedBaseInstance drawArraysInstancedBaseInstance;
GL_DrawBuffer drawBuffer;
GL_DrawBuffers drawBuffers;
GL_DrawElements drawElements;
GL_DrawElementsBaseVertex drawElementsBaseVertex;
GL_DrawElementsIndirect drawElementsIndirect;
GL_DrawElementsInstanced drawElementsInstanced;
GL_DrawElementsInstancedBaseInstance drawElementsInstancedBaseInstance;
GL_DrawElementsInstancedBaseVertex drawElementsInstancedBaseVertex;
GL_DrawElementsInstancedBaseVertexBaseInstance drawElementsInstancedBaseVertexBaseInstance;
GL_DrawPixels drawPixels;
GL_DrawRangeElementsBaseVertex drawRangeElementsBaseVertex;
GL_DrawTransformFeedback drawTransformFeedback;
GL_DrawTransformFeedbackInstanced drawTransformFeedbackInstanced;
GL_DrawTransformFeedbackStream drawTransformFeedbackStream;
GL_DrawTransformFeedbackStreamInstanced drawTransformFeedbackStreamInstanced;
GL_EdgeFlag edgeFlag;
GL_EdgeFlagPointer edgeFlagPointer;
GL_EdgeFlagv edgeFlagv;
GL_Enable enable;
GL_EnableClientState enableClientState;
GL_EnableVertexArrayAttrib enableVertexArrayAttrib;
GL_EnableVertexAttribArray enableVertexAttribArray;
GL_Enablei enablei;
GL_End end;
GL_EndConditionalRender endConditionalRender;
GL_EndList endList;
GL_EndQuery endQuery;
GL_EndQueryIndexed endQueryIndexed;
GL_EndTransformFeedback endTransformFeedback;
GL_EvalCoord1d evalCoord1d;
GL_EvalCoord1dv evalCoord1dv;
GL_EvalCoord1f evalCoord1f;
GL_EvalCoord1fv evalCoord1fv;
GL_EvalCoord2d evalCoord2d;
GL_EvalCoord2dv evalCoord2dv;
GL_EvalCoord2f evalCoord2f;
GL_EvalCoord2fv evalCoord2fv;
GL_EvalMesh1 evalMesh1;
GL_EvalMesh2 evalMesh2;
GL_EvalPoint1 evalPoint1;
GL_EvalPoint2 evalPoint2;
GL_FeedbackBuffer feedbackBuffer;
GL_FenceSync fenceSync;
GL_Finish finish;
GL_Flush flush;
GL_FlushMappedBufferRange flushMappedBufferRange;
GL_FlushMappedNamedBufferRange flushMappedNamedBufferRange;
GL_FogCoordPointer fogCoordPointer;
GL_FogCoordd fogCoordd;
GL_FogCoorddv fogCoorddv;
GL_FogCoordf fogCoordf;
GL_FogCoordfv fogCoordfv;
GL_Fogf fogf;
GL_Fogfv fogfv;
GL_Fogi fogi;
GL_Fogiv fogiv;
GL_FramebufferParameteri framebufferParameteri;
GL_FramebufferRenderbuffer framebufferRenderbuffer;
GL_FramebufferTexture framebufferTexture;
GL_FramebufferTexture1D framebufferTexture1D;
GL_FramebufferTexture2D framebufferTexture2D;
GL_FramebufferTexture3D framebufferTexture3D;
GL_FramebufferTextureLayer framebufferTextureLayer;
GL_FrontFace frontFace;
GL_Frustum frustum;
GL_GenBuffers genBuffers;
GL_GenFramebuffers genFramebuffers;
GL_GenLists genLists;
GL_GenProgramPipelines genProgramPipelines;
GL_GenQueries genQueries;
GL_GenRenderbuffers genRenderbuffers;
GL_GenSamplers genSamplers;
GL_GenTextures genTextures;
GL_GenTransformFeedbacks genTransformFeedbacks;
GL_GenVertexArrays genVertexArrays;
GL_GenerateMipmap generateMipmap;
GL_GenerateTextureMipmap generateTextureMipmap;
GL_GetActiveAtomicCounterBufferiv getActiveAtomicCounterBufferiv;
GL_GetActiveAttrib getActiveAttrib;
GL_GetActiveSubroutineName getActiveSubroutineName;
GL_GetActiveSubroutineUniformName getActiveSubroutineUniformName;
GL_GetActiveSubroutineUniformiv getActiveSubroutineUniformiv;
GL_GetActiveUniform getActiveUniform;
GL_GetActiveUniformBlockName getActiveUniformBlockName;
GL_GetActiveUniformBlockiv getActiveUniformBlockiv;
GL_GetActiveUniformName getActiveUniformName;
GL_GetActiveUniformsiv getActiveUniformsiv;
GL_GetAttachedShaders getAttachedShaders;
GL_GetAttribLocation getAttribLocation;
GL_GetBooleani_v getBooleani_v;
GL_GetBooleanv getBooleanv;
GL_GetBufferParameteri64v getBufferParameteri64v;
GL_GetBufferParameteriv getBufferParameteriv;
GL_GetBufferPointerv getBufferPointerv;
GL_GetBufferSubData getBufferSubData;
GL_GetClipPlane getClipPlane;
GL_GetCompressedTextureImage getCompressedTextureImage;
GL_GetCompressedTextureSubImage getCompressedTextureSubImage;
GL_GetDebugMessageLog getDebugMessageLog;
GL_GetDoublei_v getDoublei_v;
GL_GetDoublev getDoublev;
GL_GetError getError;
GL_GetFloati_v getFloati_v;
GL_GetFloatv getFloatv;
GL_GetFragDataIndex getFragDataIndex;
GL_GetFragDataLocation getFragDataLocation;
GL_GetFramebufferAttachmentParameteriv getFramebufferAttachmentParameteriv;
GL_GetFramebufferParameteriv getFramebufferParameteriv;
GL_GetGraphicsResetStatus getGraphicsResetStatus;
GL_GetInteger64i_v getInteger64i_v;
GL_GetInteger64v getInteger64v;
GL_GetIntegeri_v getIntegeri_v;
GL_GetIntegerv getIntegerv;
GL_GetInternalformati64v getInternalformati64v;
GL_GetInternalformativ getInternalformativ;
GL_GetLightfv getLightfv;
GL_GetLightiv getLightiv;
GL_GetMapdv getMapdv;
GL_GetMapfv getMapfv;
GL_GetMapiv getMapiv;
GL_GetMaterialfv getMaterialfv;
GL_GetMaterialiv getMaterialiv;
GL_GetMultisamplefv getMultisamplefv;
GL_GetNamedBufferParameteri64v getNamedBufferParameteri64v;
GL_GetNamedBufferParameteriv getNamedBufferParameteriv;
GL_GetNamedBufferPointerv getNamedBufferPointerv;
GL_GetNamedBufferSubData getNamedBufferSubData;
GL_GetNamedFramebufferAttachmentParameteriv getNamedFramebufferAttachmentParameteriv;
GL_GetNamedFramebufferParameteriv getNamedFramebufferParameteriv;
GL_GetNamedRenderbufferParameteriv getNamedRenderbufferParameteriv;
GL_GetObjectLabel getObjectLabel;
GL_GetObjectPtrLabel getObjectPtrLabel;
GL_GetPixelMapfv getPixelMapfv;
GL_GetPixelMapuiv getPixelMapuiv;
GL_GetPixelMapusv getPixelMapusv;
GL_GetPointerv getPointerv;
GL_GetPolygonStipple getPolygonStipple;
GL_GetProgramBinary getProgramBinary;
GL_GetProgramInfoLog getProgramInfoLog;
GL_GetProgramInterfaceiv getProgramInterfaceiv;
GL_GetProgramPipelineInfoLog getProgramPipelineInfoLog;
GL_GetProgramPipelineiv getProgramPipelineiv;
GL_GetProgramResourceIndex getProgramResourceIndex;
GL_GetProgramResourceLocation getProgramResourceLocation;
GL_GetProgramResourceLocationIndex getProgramResourceLocationIndex;
GL_GetProgramResourceName getProgramResourceName;
GL_GetProgramResourceiv getProgramResourceiv;
GL_GetProgramStageiv getProgramStageiv;
GL_GetProgramiv getProgramiv;
GL_GetQueryBufferObjecti64v getQueryBufferObjecti64v;
GL_GetQueryBufferObjectiv getQueryBufferObjectiv;
GL_GetQueryBufferObjectui64v getQueryBufferObjectui64v;
GL_GetQueryBufferObjectuiv getQueryBufferObjectuiv;
GL_GetQueryIndexediv getQueryIndexediv;
GL_GetQueryObjecti64v getQueryObjecti64v;
GL_GetQueryObjectiv getQueryObjectiv;
GL_GetQueryObjectui64v getQueryObjectui64v;
GL_GetQueryObjectuiv getQueryObjectuiv;
GL_GetQueryiv getQueryiv;
GL_GetRenderbufferParameteriv getRenderbufferParameteriv;
GL_GetSamplerParameterIiv getSamplerParameterIiv;
GL_GetSamplerParameterIuiv getSamplerParameterIuiv;
GL_GetSamplerParameterfv getSamplerParameterfv;
GL_GetSamplerParameteriv getSamplerParameteriv;
GL_GetShaderInfoLog getShaderInfoLog;
GL_GetShaderPrecisionFormat getShaderPrecisionFormat;
GL_GetShaderSource getShaderSource;
GL_GetShaderiv getShaderiv;
GL_GetString getString;
GL_GetStringi getStringi;
GL_GetSubroutineIndex getSubroutineIndex;
GL_GetSubroutineUniformLocation getSubroutineUniformLocation;
GL_GetSynciv getSynciv;
GL_GetTexEnvfv getTexEnvfv;
GL_GetTexEnviv getTexEnviv;
GL_GetTexGendv getTexGendv;
GL_GetTexGenfv getTexGenfv;
GL_GetTexGeniv getTexGeniv;
GL_GetTexImage getTexImage;
GL_GetTexLevelParameterfv getTexLevelParameterfv;
GL_GetTexLevelParameteriv getTexLevelParameteriv;
GL_GetTexParameterIiv getTexParameterIiv;
GL_GetTexParameterIuiv getTexParameterIuiv;
GL_GetTexParameterfv getTexParameterfv;
GL_GetTexParameteriv getTexParameteriv;
GL_GetTextureImage getTextureImage;
GL_GetTextureLevelParameterfv getTextureLevelParameterfv;
GL_GetTextureLevelParameteriv getTextureLevelParameteriv;
GL_GetTextureParameterIiv getTextureParameterIiv;
GL_GetTextureParameterIuiv getTextureParameterIuiv;
GL_GetTextureParameterfv getTextureParameterfv;
GL_GetTextureParameteriv getTextureParameteriv;
GL_GetTextureSubImage getTextureSubImage;
GL_GetTransformFeedbackVarying getTransformFeedbackVarying;
GL_GetTransformFeedbacki64_v getTransformFeedbacki64_v;
GL_GetTransformFeedbacki_v getTransformFeedbacki_v;
GL_GetTransformFeedbackiv getTransformFeedbackiv;
GL_GetUniformBlockIndex getUniformBlockIndex;
GL_GetUniformIndices getUniformIndices;
GL_GetUniformLocation getUniformLocation;
GL_GetUniformSubroutineuiv getUniformSubroutineuiv;
GL_GetUniformdv getUniformdv;
GL_GetUniformfv getUniformfv;
GL_GetUniformiv getUniformiv;
GL_GetUniformuiv getUniformuiv;
GL_GetVertexArrayIndexed64iv getVertexArrayIndexed64iv;
GL_GetVertexArrayIndexediv getVertexArrayIndexediv;
GL_GetVertexArrayiv getVertexArrayiv;
GL_GetVertexAttribIiv getVertexAttribIiv;
GL_GetVertexAttribIuiv getVertexAttribIuiv;
GL_GetVertexAttribLdv getVertexAttribLdv;
GL_GetVertexAttribPointerv getVertexAttribPointerv;
GL_GetVertexAttribdv getVertexAttribdv;
GL_GetVertexAttribfv getVertexAttribfv;
GL_GetVertexAttribiv getVertexAttribiv;
GL_GetnColorTable getnColorTable;
GL_GetnCompressedTexImage getnCompressedTexImage;
GL_GetnConvolutionFilter getnConvolutionFilter;
GL_GetnHistogram getnHistogram;
GL_GetnMapdv getnMapdv;
GL_GetnMapfv getnMapfv;
GL_GetnMapiv getnMapiv;
GL_GetnMinmax getnMinmax;
GL_GetnPixelMapfv getnPixelMapfv;
GL_GetnPixelMapuiv getnPixelMapuiv;
GL_GetnPixelMapusv getnPixelMapusv;
GL_GetnPolygonStipple getnPolygonStipple;
GL_GetnSeparableFilter getnSeparableFilter;
GL_GetnTexImage getnTexImage;
GL_GetnUniformdv getnUniformdv;
GL_GetnUniformfv getnUniformfv;
GL_GetnUniformiv getnUniformiv;
GL_GetnUniformuiv getnUniformuiv;
GL_Hint hint;
GL_IndexMask indexMask;
GL_IndexPointer indexPointer;
GL_Indexd indexd;
GL_Indexdv indexdv;
GL_Indexf indexf;
GL_Indexfv indexfv;
GL_Indexi indexi;
GL_Indexiv indexiv;
GL_Indexs indexs;
GL_Indexsv indexsv;
GL_Indexub indexub;
GL_Indexubv indexubv;
GL_InitNames initNames;
GL_InterleavedArrays interleavedArrays;
GL_InvalidateBufferData invalidateBufferData;
GL_InvalidateBufferSubData invalidateBufferSubData;
GL_InvalidateFramebuffer invalidateFramebuffer;
GL_InvalidateNamedFramebufferData invalidateNamedFramebufferData;
GL_InvalidateNamedFramebufferSubData invalidateNamedFramebufferSubData;
GL_InvalidateSubFramebuffer invalidateSubFramebuffer;
GL_InvalidateTexImage invalidateTexImage;
GL_InvalidateTexSubImage invalidateTexSubImage;
GL_IsBuffer isBuffer;
GL_IsEnabled isEnabled;
GL_IsEnabledi isEnabledi;
GL_IsFramebuffer isFramebuffer;
GL_IsList isList;
GL_IsProgram isProgram;
GL_IsProgramPipeline isProgramPipeline;
GL_IsQuery isQuery;
GL_IsRenderbuffer isRenderbuffer;
GL_IsSampler isSampler;
GL_IsShader isShader;
GL_IsSync isSync;
GL_IsTexture isTexture;
GL_IsTransformFeedback isTransformFeedback;
GL_IsVertexArray isVertexArray;
GL_LightModelf lightModelf;
GL_LightModelfv lightModelfv;
GL_LightModeli lightModeli;
GL_LightModeliv lightModeliv;
GL_Lightf lightf;
GL_Lightfv lightfv;
GL_Lighti lighti;
GL_Lightiv lightiv;
GL_LineStipple lineStipple;
GL_LineWidth lineWidth;
GL_LinkProgram linkProgram;
GL_ListBase listBase;
GL_LoadIdentity loadIdentity;
GL_LoadMatrixd loadMatrixd;
GL_LoadMatrixf loadMatrixf;
GL_LoadName loadName;
GL_LoadTransposeMatrixd loadTransposeMatrixd;
GL_LoadTransposeMatrixf loadTransposeMatrixf;
GL_LogicOp logicOp;
GL_Map1d map1d;
GL_Map1f map1f;
GL_Map2d map2d;
GL_Map2f map2f;
GL_MapBuffer mapBuffer;
GL_MapBufferRange mapBufferRange;
GL_MapGrid1d mapGrid1d;
GL_MapGrid1f mapGrid1f;
GL_MapGrid2d mapGrid2d;
GL_MapGrid2f mapGrid2f;
GL_MapNamedBuffer mapNamedBuffer;
GL_MapNamedBufferRange mapNamedBufferRange;
GL_Materialf materialf;
GL_Materialfv materialfv;
GL_Materiali materiali;
GL_Materialiv materialiv;
GL_MatrixMode matrixMode;
GL_MemoryBarrier memoryBarrier;
GL_MemoryBarrierByRegion memoryBarrierByRegion;
GL_MinSampleShading minSampleShading;
GL_MultMatrixd multMatrixd;
GL_MultMatrixf multMatrixf;
GL_MultTransposeMatrixd multTransposeMatrixd;
GL_MultTransposeMatrixf multTransposeMatrixf;
GL_MultiDrawArraysIndirect multiDrawArraysIndirect;
GL_MultiDrawArraysIndirectCount multiDrawArraysIndirectCount;
GL_MultiDrawElementsBaseVertex multiDrawElementsBaseVertex;
GL_MultiDrawElementsIndirect multiDrawElementsIndirect;
GL_MultiDrawElementsIndirectCount multiDrawElementsIndirectCount;
GL_MultiTexCoord1d multiTexCoord1d;
GL_MultiTexCoord1dv multiTexCoord1dv;
GL_MultiTexCoord1f multiTexCoord1f;
GL_MultiTexCoord1fv multiTexCoord1fv;
GL_MultiTexCoord1i multiTexCoord1i;
GL_MultiTexCoord1iv multiTexCoord1iv;
GL_MultiTexCoord1s multiTexCoord1s;
GL_MultiTexCoord1sv multiTexCoord1sv;
GL_MultiTexCoord2d multiTexCoord2d;
GL_MultiTexCoord2dv multiTexCoord2dv;
GL_MultiTexCoord2f multiTexCoord2f;
GL_MultiTexCoord2fv multiTexCoord2fv;
GL_MultiTexCoord2i multiTexCoord2i;
GL_MultiTexCoord2iv multiTexCoord2iv;
GL_MultiTexCoord2s multiTexCoord2s;
GL_MultiTexCoord2sv multiTexCoord2sv;
GL_MultiTexCoord3d multiTexCoord3d;
GL_MultiTexCoord3dv multiTexCoord3dv;
GL_MultiTexCoord3f multiTexCoord3f;
GL_MultiTexCoord3fv multiTexCoord3fv;
GL_MultiTexCoord3i multiTexCoord3i;
GL_MultiTexCoord3iv multiTexCoord3iv;
GL_MultiTexCoord3s multiTexCoord3s;
GL_MultiTexCoord3sv multiTexCoord3sv;
GL_MultiTexCoord4d multiTexCoord4d;
GL_MultiTexCoord4dv multiTexCoord4dv;
GL_MultiTexCoord4f multiTexCoord4f;
GL_MultiTexCoord4fv multiTexCoord4fv;
GL_MultiTexCoord4i multiTexCoord4i;
GL_MultiTexCoord4iv multiTexCoord4iv;
GL_MultiTexCoord4s multiTexCoord4s;
GL_MultiTexCoord4sv multiTexCoord4sv;
GL_MultiTexCoordP1ui multiTexCoordP1ui;
GL_MultiTexCoordP1uiv multiTexCoordP1uiv;
GL_MultiTexCoordP2ui multiTexCoordP2ui;
GL_MultiTexCoordP2uiv multiTexCoordP2uiv;
GL_MultiTexCoordP3ui multiTexCoordP3ui;
GL_MultiTexCoordP3uiv multiTexCoordP3uiv;
GL_MultiTexCoordP4ui multiTexCoordP4ui;
GL_MultiTexCoordP4uiv multiTexCoordP4uiv;
GL_NamedBufferData namedBufferData;
GL_NamedBufferStorage namedBufferStorage;
GL_NamedBufferSubData namedBufferSubData;
GL_NamedFramebufferDrawBuffer namedFramebufferDrawBuffer;
GL_NamedFramebufferDrawBuffers namedFramebufferDrawBuffers;
GL_NamedFramebufferParameteri namedFramebufferParameteri;
GL_NamedFramebufferReadBuffer namedFramebufferReadBuffer;
GL_NamedFramebufferRenderbuffer namedFramebufferRenderbuffer;
GL_NamedFramebufferTexture namedFramebufferTexture;
GL_NamedFramebufferTextureLayer namedFramebufferTextureLayer;
GL_NamedRenderbufferStorage namedRenderbufferStorage;
GL_NamedRenderbufferStorageMultisample namedRenderbufferStorageMultisample;
GL_NewList newList;
GL_Normal3b normal3b;
GL_Normal3bv normal3bv;
GL_Normal3d normal3d;
GL_Normal3dv normal3dv;
GL_Normal3f normal3f;
GL_Normal3fv normal3fv;
GL_Normal3i normal3i;
GL_Normal3iv normal3iv;
GL_Normal3s normal3s;
GL_Normal3sv normal3sv;
GL_NormalP3ui normalP3ui;
GL_NormalP3uiv normalP3uiv;
GL_NormalPointer normalPointer;
GL_ObjectLabel objectLabel;
GL_ObjectPtrLabel objectPtrLabel;
GL_Ortho ortho;
GL_PassThrough passThrough;
GL_PatchParameterfv patchParameterfv;
GL_PatchParameteri patchParameteri;
GL_PauseTransformFeedback pauseTransformFeedback;
GL_PixelMapfv pixelMapfv;
GL_PixelMapuiv pixelMapuiv;
GL_PixelMapusv pixelMapusv;
GL_PixelStoref pixelStoref;
GL_PixelStorei pixelStorei;
GL_PixelTransferf pixelTransferf;
GL_PixelTransferi pixelTransferi;
GL_PixelZoom pixelZoom;
GL_PointSize pointSize;
GL_PolygonMode polygonMode;
GL_PolygonOffset polygonOffset;
GL_PolygonOffsetClamp polygonOffsetClamp;
GL_PolygonStipple polygonStipple;
GL_PopAttrib popAttrib;
GL_PopClientAttrib popClientAttrib;
GL_PopDebugGroup popDebugGroup;
GL_PopMatrix popMatrix;
GL_PopName popName;
GL_PrimitiveRestartIndex primitiveRestartIndex;
GL_PrioritizeTextures prioritizeTextures;
GL_ProgramBinary programBinary;
GL_ProgramParameteri programParameteri;
GL_ProgramUniform1d programUniform1d;
GL_ProgramUniform1dv programUniform1dv;
GL_ProgramUniform1f programUniform1f;
GL_ProgramUniform1fv programUniform1fv;
GL_ProgramUniform1i programUniform1i;
GL_ProgramUniform1iv programUniform1iv;
GL_ProgramUniform1ui programUniform1ui;
GL_ProgramUniform1uiv programUniform1uiv;
GL_ProgramUniform2d programUniform2d;
GL_ProgramUniform2dv programUniform2dv;
GL_ProgramUniform2f programUniform2f;
GL_ProgramUniform2fv programUniform2fv;
GL_ProgramUniform2i programUniform2i;
GL_ProgramUniform2iv programUniform2iv;
GL_ProgramUniform2ui programUniform2ui;
GL_ProgramUniform2uiv programUniform2uiv;
GL_ProgramUniform3d programUniform3d;
GL_ProgramUniform3dv programUniform3dv;
GL_ProgramUniform3f programUniform3f;
GL_ProgramUniform3fv programUniform3fv;
GL_ProgramUniform3i programUniform3i;
GL_ProgramUniform3iv programUniform3iv;
GL_ProgramUniform3ui programUniform3ui;
GL_ProgramUniform3uiv programUniform3uiv;
GL_ProgramUniform4d programUniform4d;
GL_ProgramUniform4dv programUniform4dv;
GL_ProgramUniform4f programUniform4f;
GL_ProgramUniform4fv programUniform4fv;
GL_ProgramUniform4i programUniform4i;
GL_ProgramUniform4iv programUniform4iv;
GL_ProgramUniform4ui programUniform4ui;
GL_ProgramUniform4uiv programUniform4uiv;
GL_ProgramUniformMatrix2dv programUniformMatrix2dv;
GL_ProgramUniformMatrix2fv programUniformMatrix2fv;
GL_ProgramUniformMatrix2x3dv programUniformMatrix2x3dv;
GL_ProgramUniformMatrix2x3fv programUniformMatrix2x3fv;
GL_ProgramUniformMatrix2x4dv programUniformMatrix2x4dv;
GL_ProgramUniformMatrix2x4fv programUniformMatrix2x4fv;
GL_ProgramUniformMatrix3dv programUniformMatrix3dv;
GL_ProgramUniformMatrix3fv programUniformMatrix3fv;
GL_ProgramUniformMatrix3x2dv programUniformMatrix3x2dv;
GL_ProgramUniformMatrix3x2fv programUniformMatrix3x2fv;
GL_ProgramUniformMatrix3x4dv programUniformMatrix3x4dv;
GL_ProgramUniformMatrix3x4fv programUniformMatrix3x4fv;
GL_ProgramUniformMatrix4dv programUniformMatrix4dv;
GL_ProgramUniformMatrix4fv programUniformMatrix4fv;
GL_ProgramUniformMatrix4x2dv programUniformMatrix4x2dv;
GL_ProgramUniformMatrix4x2fv programUniformMatrix4x2fv;
GL_ProgramUniformMatrix4x3dv programUniformMatrix4x3dv;
GL_ProgramUniformMatrix4x3fv programUniformMatrix4x3fv;
GL_ProvokingVertex provokingVertex;
GL_PushAttrib pushAttrib;
GL_PushClientAttrib pushClientAttrib;
GL_PushDebugGroup pushDebugGroup;
GL_PushMatrix pushMatrix;
GL_PushName pushName;
GL_QueryCounter queryCounter;
GL_RasterPos2d rasterPos2d;
GL_RasterPos2dv rasterPos2dv;
GL_RasterPos2f rasterPos2f;
GL_RasterPos2fv rasterPos2fv;
GL_RasterPos2i rasterPos2i;
GL_RasterPos2iv rasterPos2iv;
GL_RasterPos2s rasterPos2s;
GL_RasterPos2sv rasterPos2sv;
GL_RasterPos3d rasterPos3d;
GL_RasterPos3dv rasterPos3dv;
GL_RasterPos3f rasterPos3f;
GL_RasterPos3fv rasterPos3fv;
GL_RasterPos3i rasterPos3i;
GL_RasterPos3iv rasterPos3iv;
GL_RasterPos3s rasterPos3s;
GL_RasterPos3sv rasterPos3sv;
GL_RasterPos4d rasterPos4d;
GL_RasterPos4dv rasterPos4dv;
GL_RasterPos4f rasterPos4f;
GL_RasterPos4fv rasterPos4fv;
GL_RasterPos4i rasterPos4i;
GL_RasterPos4iv rasterPos4iv;
GL_RasterPos4s rasterPos4s;
GL_RasterPos4sv rasterPos4sv;
GL_ReadBuffer readBuffer;
GL_ReadPixels readPixels;
GL_ReadnPixels readnPixels;
GL_Rectd rectd;
GL_Rectdv rectdv;
GL_Rectf rectf;
GL_Rectfv rectfv;
GL_Recti recti;
GL_Rectiv rectiv;
GL_Rects rects;
GL_Rectsv rectsv;
GL_ReleaseShaderCompiler releaseShaderCompiler;
GL_RenderMode renderMode;
GL_RenderbufferStorage renderbufferStorage;
GL_RenderbufferStorageMultisample renderbufferStorageMultisample;
GL_ResumeTransformFeedback resumeTransformFeedback;
GL_Rotated rotated;
GL_Rotatef rotatef;
GL_SampleMaski sampleMaski;
GL_SamplerParameterIiv samplerParameterIiv;
GL_SamplerParameterIuiv samplerParameterIuiv;
GL_SamplerParameterf samplerParameterf;
GL_SamplerParameterfv samplerParameterfv;
GL_SamplerParameteri samplerParameteri;
GL_SamplerParameteriv samplerParameteriv;
GL_Scaled scaled;
GL_Scalef scalef;
GL_Scissor scissor;
GL_ScissorArrayv scissorArrayv;
GL_ScissorIndexed scissorIndexed;
GL_ScissorIndexedv scissorIndexedv;
GL_SecondaryColor3b secondaryColor3b;
GL_SecondaryColor3bv secondaryColor3bv;
GL_SecondaryColor3d secondaryColor3d;
GL_SecondaryColor3dv secondaryColor3dv;
GL_SecondaryColor3f secondaryColor3f;
GL_SecondaryColor3fv secondaryColor3fv;
GL_SecondaryColor3i secondaryColor3i;
GL_SecondaryColor3iv secondaryColor3iv;
GL_SecondaryColor3s secondaryColor3s;
GL_SecondaryColor3sv secondaryColor3sv;
GL_SecondaryColor3ub secondaryColor3ub;
GL_SecondaryColor3ubv secondaryColor3ubv;
GL_SecondaryColor3ui secondaryColor3ui;
GL_SecondaryColor3uiv secondaryColor3uiv;
GL_SecondaryColor3us secondaryColor3us;
GL_SecondaryColor3usv secondaryColor3usv;
GL_SecondaryColorP3ui secondaryColorP3ui;
GL_SecondaryColorP3uiv secondaryColorP3uiv;
GL_SecondaryColorPointer secondaryColorPointer;
GL_SelectBuffer selectBuffer;
GL_ShadeModel shadeModel;
GL_ShaderBinary shaderBinary;
GL_ShaderSource shaderSource;
GL_ShaderStorageBlockBinding shaderStorageBlockBinding;
GL_SpecializeShader specializeShader;
GL_StencilFunc stencilFunc;
GL_StencilFuncSeparate stencilFuncSeparate;
GL_StencilMask stencilMask;
GL_StencilMaskSeparate stencilMaskSeparate;
GL_StencilOp stencilOp;
GL_StencilOpSeparate stencilOpSeparate;
GL_TexBuffer texBuffer;
GL_TexBufferRange texBufferRange;
GL_TexCoord1d texCoord1d;
GL_TexCoord1dv texCoord1dv;
GL_TexCoord1f texCoord1f;
GL_TexCoord1fv texCoord1fv;
GL_TexCoord1i texCoord1i;
GL_TexCoord1iv texCoord1iv;
GL_TexCoord1s texCoord1s;
GL_TexCoord1sv texCoord1sv;
GL_TexCoord2d texCoord2d;
GL_TexCoord2dv texCoord2dv;
GL_TexCoord2f texCoord2f;
GL_TexCoord2fv texCoord2fv;
GL_TexCoord2i texCoord2i;
GL_TexCoord2iv texCoord2iv;
GL_TexCoord2s texCoord2s;
GL_TexCoord2sv texCoord2sv;
GL_TexCoord3d texCoord3d;
GL_TexCoord3dv texCoord3dv;
GL_TexCoord3f texCoord3f;
GL_TexCoord3fv texCoord3fv;
GL_TexCoord3i texCoord3i;
GL_TexCoord3iv texCoord3iv;
GL_TexCoord3s texCoord3s;
GL_TexCoord3sv texCoord3sv;
GL_TexCoord4d texCoord4d;
GL_TexCoord4dv texCoord4dv;
GL_TexCoord4f texCoord4f;
GL_TexCoord4fv texCoord4fv;
GL_TexCoord4i texCoord4i;
GL_TexCoord4iv texCoord4iv;
GL_TexCoord4s texCoord4s;
GL_TexCoord4sv texCoord4sv;
GL_TexCoordP1ui texCoordP1ui;
GL_TexCoordP1uiv texCoordP1uiv;
GL_TexCoordP2ui texCoordP2ui;
GL_TexCoordP2uiv texCoordP2uiv;
GL_TexCoordP3ui texCoordP3ui;
GL_TexCoordP3uiv texCoordP3uiv;
GL_TexCoordP4ui texCoordP4ui;
GL_TexCoordP4uiv texCoordP4uiv;
GL_TexCoordPointer texCoordPointer;
GL_TexEnvf texEnvf;
GL_TexEnvfv texEnvfv;
GL_TexEnvi texEnvi;
GL_TexEnviv texEnviv;
GL_TexGend texGend;
GL_TexGendv texGendv;
GL_TexGenf texGenf;
GL_TexGenfv texGenfv;
GL_TexGeni texGeni;
GL_TexGeniv texGeniv;
GL_TexImage1D texImage1D;
GL_TexImage2D texImage2D;
GL_TexImage2DMultisample texImage2DMultisample;
GL_TexImage3DMultisample texImage3DMultisample;
GL_TexParameterIiv texParameterIiv;
GL_TexParameterIuiv texParameterIuiv;
GL_TexParameterf texParameterf;
GL_TexParameterfv texParameterfv;
GL_TexParameteri texParameteri;
GL_TexParameteriv texParameteriv;
GL_TexStorage1D texStorage1D;
GL_TexStorage2D texStorage2D;
GL_TexStorage2DMultisample texStorage2DMultisample;
GL_TexStorage3D texStorage3D;
GL_TexStorage3DMultisample texStorage3DMultisample;
GL_TexSubImage1D texSubImage1D;
GL_TexSubImage2D texSubImage2D;
GL_TextureBarrier textureBarrier;
GL_TextureBuffer textureBuffer;
GL_TextureBufferRange textureBufferRange;
GL_TextureParameterIiv textureParameterIiv;
GL_TextureParameterIuiv textureParameterIuiv;
GL_TextureParameterf textureParameterf;
GL_TextureParameterfv textureParameterfv;
GL_TextureParameteri textureParameteri;
GL_TextureParameteriv textureParameteriv;
GL_TextureStorage1D textureStorage1D;
GL_TextureStorage2D textureStorage2D;
GL_TextureStorage2DMultisample textureStorage2DMultisample;
GL_TextureStorage3D textureStorage3D;
GL_TextureStorage3DMultisample textureStorage3DMultisample;
GL_TextureSubImage1D textureSubImage1D;
GL_TextureSubImage2D textureSubImage2D;
GL_TextureSubImage3D textureSubImage3D;
GL_TextureView textureView;
GL_TransformFeedbackBufferBase transformFeedbackBufferBase;
GL_TransformFeedbackBufferRange transformFeedbackBufferRange;
GL_TransformFeedbackVaryings transformFeedbackVaryings;
GL_Translated translated;
GL_Translatef translatef;
GL_Uniform1d uniform1d;
GL_Uniform1dv uniform1dv;
GL_Uniform1f uniform1f;
GL_Uniform1fv uniform1fv;
GL_Uniform1i uniform1i;
GL_Uniform1iv uniform1iv;
GL_Uniform1ui uniform1ui;
GL_Uniform1uiv uniform1uiv;
GL_Uniform2d uniform2d;
GL_Uniform2dv uniform2dv;
GL_Uniform2f uniform2f;
GL_Uniform2fv uniform2fv;
GL_Uniform2i uniform2i;
GL_Uniform2iv uniform2iv;
GL_Uniform2ui uniform2ui;
GL_Uniform2uiv uniform2uiv;
GL_Uniform3d uniform3d;
GL_Uniform3dv uniform3dv;
GL_Uniform3f uniform3f;
GL_Uniform3fv uniform3fv;
GL_Uniform3i uniform3i;
GL_Uniform3iv uniform3iv;
GL_Uniform3ui uniform3ui;
GL_Uniform3uiv uniform3uiv;
GL_Uniform4d uniform4d;
GL_Uniform4dv uniform4dv;
GL_Uniform4f uniform4f;
GL_Uniform4fv uniform4fv;
GL_Uniform4i uniform4i;
GL_Uniform4iv uniform4iv;
GL_Uniform4ui uniform4ui;
GL_Uniform4uiv uniform4uiv;
GL_UniformBlockBinding uniformBlockBinding;
GL_UniformMatrix2dv uniformMatrix2dv;
GL_UniformMatrix2fv uniformMatrix2fv;
GL_UniformMatrix2x3dv uniformMatrix2x3dv;
GL_UniformMatrix2x3fv uniformMatrix2x3fv;
GL_UniformMatrix2x4dv uniformMatrix2x4dv;
GL_UniformMatrix2x4fv uniformMatrix2x4fv;
GL_UniformMatrix3dv uniformMatrix3dv;
GL_UniformMatrix3fv uniformMatrix3fv;
GL_UniformMatrix3x2dv uniformMatrix3x2dv;
GL_UniformMatrix3x2fv uniformMatrix3x2fv;
GL_UniformMatrix3x4dv uniformMatrix3x4dv;
GL_UniformMatrix3x4fv uniformMatrix3x4fv;
GL_UniformMatrix4dv uniformMatrix4dv;
GL_UniformMatrix4fv uniformMatrix4fv;
GL_UniformMatrix4x2dv uniformMatrix4x2dv;
GL_UniformMatrix4x2fv uniformMatrix4x2fv;
GL_UniformMatrix4x3dv uniformMatrix4x3dv;
GL_UniformMatrix4x3fv uniformMatrix4x3fv;
GL_UniformSubroutinesuiv uniformSubroutinesuiv;
GL_UnmapBuffer unmapBuffer;
GL_UnmapNamedBuffer unmapNamedBuffer;
GL_UseProgram useProgram;
GL_UseProgramStages useProgramStages;
GL_ValidateProgram validateProgram;
GL_ValidateProgramPipeline validateProgramPipeline;
GL_Vertex2d vertex2d;
GL_Vertex2dv vertex2dv;
GL_Vertex2f vertex2f;
GL_Vertex2fv vertex2fv;
GL_Vertex2i vertex2i;
GL_Vertex2iv vertex2iv;
GL_Vertex2s vertex2s;
GL_Vertex2sv vertex2sv;
GL_Vertex3d vertex3d;
GL_Vertex3dv vertex3dv;
GL_Vertex3f vertex3f;
GL_Vertex3fv vertex3fv;
GL_Vertex3i vertex3i;
GL_Vertex3iv vertex3iv;
GL_Vertex3s vertex3s;
GL_Vertex3sv vertex3sv;
GL_Vertex4d vertex4d;
GL_Vertex4dv vertex4dv;
GL_Vertex4f vertex4f;
GL_Vertex4fv vertex4fv;
GL_Vertex4i vertex4i;
GL_Vertex4iv vertex4iv;
GL_Vertex4s vertex4s;
GL_Vertex4sv vertex4sv;
GL_VertexArrayAttribBinding vertexArrayAttribBinding;
GL_VertexArrayAttribFormat vertexArrayAttribFormat;
GL_VertexArrayAttribIFormat vertexArrayAttribIFormat;
GL_VertexArrayAttribLFormat vertexArrayAttribLFormat;
GL_VertexArrayBindingDivisor vertexArrayBindingDivisor;
GL_VertexArrayElementBuffer vertexArrayElementBuffer;
GL_VertexArrayVertexBuffer vertexArrayVertexBuffer;
GL_VertexArrayVertexBuffers vertexArrayVertexBuffers;
GL_VertexAttrib1d vertexAttrib1d;
GL_VertexAttrib1dv vertexAttrib1dv;
GL_VertexAttrib1f vertexAttrib1f;
GL_VertexAttrib1fv vertexAttrib1fv;
GL_VertexAttrib1s vertexAttrib1s;
GL_VertexAttrib1sv vertexAttrib1sv;
GL_VertexAttrib2d vertexAttrib2d;
GL_VertexAttrib2dv vertexAttrib2dv;
GL_VertexAttrib2f vertexAttrib2f;
GL_VertexAttrib2fv vertexAttrib2fv;
GL_VertexAttrib2s vertexAttrib2s;
GL_VertexAttrib2sv vertexAttrib2sv;
GL_VertexAttrib3d vertexAttrib3d;
GL_VertexAttrib3dv vertexAttrib3dv;
GL_VertexAttrib3f vertexAttrib3f;
GL_VertexAttrib3fv vertexAttrib3fv;
GL_VertexAttrib3s vertexAttrib3s;
GL_VertexAttrib3sv vertexAttrib3sv;
GL_VertexAttrib4Nbv vertexAttrib4Nbv;
GL_VertexAttrib4Niv vertexAttrib4Niv;
GL_VertexAttrib4Nsv vertexAttrib4Nsv;
GL_VertexAttrib4Nub vertexAttrib4Nub;
GL_VertexAttrib4Nubv vertexAttrib4Nubv;
GL_VertexAttrib4Nuiv vertexAttrib4Nuiv;
GL_VertexAttrib4Nusv vertexAttrib4Nusv;
GL_VertexAttrib4bv vertexAttrib4bv;
GL_VertexAttrib4d vertexAttrib4d;
GL_VertexAttrib4dv vertexAttrib4dv;
GL_VertexAttrib4f vertexAttrib4f;
GL_VertexAttrib4fv vertexAttrib4fv;
GL_VertexAttrib4iv vertexAttrib4iv;
GL_VertexAttrib4s vertexAttrib4s;
GL_VertexAttrib4sv vertexAttrib4sv;
GL_VertexAttrib4ubv vertexAttrib4ubv;
GL_VertexAttrib4uiv vertexAttrib4uiv;
GL_VertexAttrib4usv vertexAttrib4usv;
GL_VertexAttribBinding vertexAttribBinding;
GL_VertexAttribDivisor vertexAttribDivisor;
GL_VertexAttribFormat vertexAttribFormat;
GL_VertexAttribI1i vertexAttribI1i;
GL_VertexAttribI1iv vertexAttribI1iv;
GL_VertexAttribI1ui vertexAttribI1ui;
GL_VertexAttribI1uiv vertexAttribI1uiv;
GL_VertexAttribI2i vertexAttribI2i;
GL_VertexAttribI2iv vertexAttribI2iv;
GL_VertexAttribI2ui vertexAttribI2ui;
GL_VertexAttribI2uiv vertexAttribI2uiv;
GL_VertexAttribI3i vertexAttribI3i;
GL_VertexAttribI3iv vertexAttribI3iv;
GL_VertexAttribI3ui vertexAttribI3ui;
GL_VertexAttribI3uiv vertexAttribI3uiv;
GL_VertexAttribI4bv vertexAttribI4bv;
GL_VertexAttribI4i vertexAttribI4i;
GL_VertexAttribI4iv vertexAttribI4iv;
GL_VertexAttribI4sv vertexAttribI4sv;
GL_VertexAttribI4ubv vertexAttribI4ubv;
GL_VertexAttribI4ui vertexAttribI4ui;
GL_VertexAttribI4uiv vertexAttribI4uiv;
GL_VertexAttribI4usv vertexAttribI4usv;
GL_VertexAttribIFormat vertexAttribIFormat;
GL_VertexAttribIPointer vertexAttribIPointer;
GL_VertexAttribL1d vertexAttribL1d;
GL_VertexAttribL1dv vertexAttribL1dv;
GL_VertexAttribL2d vertexAttribL2d;
GL_VertexAttribL2dv vertexAttribL2dv;
GL_VertexAttribL3d vertexAttribL3d;
GL_VertexAttribL3dv vertexAttribL3dv;
GL_VertexAttribL4d vertexAttribL4d;
GL_VertexAttribL4dv vertexAttribL4dv;
GL_VertexAttribLFormat vertexAttribLFormat;
GL_VertexAttribLPointer vertexAttribLPointer;
GL_VertexAttribP1ui vertexAttribP1ui;
GL_VertexAttribP1uiv vertexAttribP1uiv;
GL_VertexAttribP2ui vertexAttribP2ui;
GL_VertexAttribP2uiv vertexAttribP2uiv;
GL_VertexAttribP3ui vertexAttribP3ui;
GL_VertexAttribP3uiv vertexAttribP3uiv;
GL_VertexAttribP4ui vertexAttribP4ui;
GL_VertexAttribP4uiv vertexAttribP4uiv;
GL_VertexAttribPointer vertexAttribPointer;
GL_VertexBindingDivisor vertexBindingDivisor;
GL_VertexP2ui vertexP2ui;
GL_VertexP2uiv vertexP2uiv;
GL_VertexP3ui vertexP3ui;
GL_VertexP3uiv vertexP3uiv;
GL_VertexP4ui vertexP4ui;
GL_VertexP4uiv vertexP4uiv;
GL_VertexPointer vertexPointer;
GL_Viewport viewport;
GL_ViewportArrayv viewportArrayv;
GL_ViewportIndexedf viewportIndexedf;
GL_ViewportIndexedfv viewportIndexedfv;
GL_WaitSync waitSync;
GL_WindowPos2d windowPos2d;
GL_WindowPos2dv windowPos2dv;
GL_WindowPos2f windowPos2f;
GL_WindowPos2fv windowPos2fv;
GL_WindowPos2i windowPos2i;
GL_WindowPos2iv windowPos2iv;
GL_WindowPos2s windowPos2s;
GL_WindowPos2sv windowPos2sv;
GL_WindowPos3d windowPos3d;
GL_WindowPos3dv windowPos3dv;
GL_WindowPos3f windowPos3f;
GL_WindowPos3fv windowPos3fv;
GL_WindowPos3i windowPos3i;
GL_WindowPos3iv windowPos3iv;
GL_WindowPos3s windowPos3s;
GL_WindowPos3sv windowPos3sv;
}

/** 
* Bindings memory 
*/ 

GL_bindings bindings;
 
fn void init(ProcFN procAddress) {
bindings.accum = (GL_Accum)procAddress("glAccum");  
bindings.activeShaderProgram = (GL_ActiveShaderProgram)procAddress("glActiveShaderProgram");  
bindings.alphaFunc = (GL_AlphaFunc)procAddress("glAlphaFunc");  
bindings.areTexturesResident = (GL_AreTexturesResident)procAddress("glAreTexturesResident");  
bindings.arrayElement = (GL_ArrayElement)procAddress("glArrayElement");  
bindings.attachShader = (GL_AttachShader)procAddress("glAttachShader");  
bindings.begin = (GL_Begin)procAddress("glBegin");  
bindings.beginConditionalRender = (GL_BeginConditionalRender)procAddress("glBeginConditionalRender");  
bindings.beginQuery = (GL_BeginQuery)procAddress("glBeginQuery");  
bindings.beginQueryIndexed = (GL_BeginQueryIndexed)procAddress("glBeginQueryIndexed");  
bindings.beginTransformFeedback = (GL_BeginTransformFeedback)procAddress("glBeginTransformFeedback");  
bindings.bindAttribLocation = (GL_BindAttribLocation)procAddress("glBindAttribLocation");  
bindings.bindBuffer = (GL_BindBuffer)procAddress("glBindBuffer");  
bindings.bindBufferBase = (GL_BindBufferBase)procAddress("glBindBufferBase");  
bindings.bindBufferRange = (GL_BindBufferRange)procAddress("glBindBufferRange");  
bindings.bindBuffersBase = (GL_BindBuffersBase)procAddress("glBindBuffersBase");  
bindings.bindBuffersRange = (GL_BindBuffersRange)procAddress("glBindBuffersRange");  
bindings.bindFragDataLocation = (GL_BindFragDataLocation)procAddress("glBindFragDataLocation");  
bindings.bindFragDataLocationIndexed = (GL_BindFragDataLocationIndexed)procAddress("glBindFragDataLocationIndexed");  
bindings.bindFramebuffer = (GL_BindFramebuffer)procAddress("glBindFramebuffer");  
bindings.bindImageTexture = (GL_BindImageTexture)procAddress("glBindImageTexture");  
bindings.bindImageTextures = (GL_BindImageTextures)procAddress("glBindImageTextures");  
bindings.bindProgramPipeline = (GL_BindProgramPipeline)procAddress("glBindProgramPipeline");  
bindings.bindRenderbuffer = (GL_BindRenderbuffer)procAddress("glBindRenderbuffer");  
bindings.bindSampler = (GL_BindSampler)procAddress("glBindSampler");  
bindings.bindSamplers = (GL_BindSamplers)procAddress("glBindSamplers");  
bindings.bindTexture = (GL_BindTexture)procAddress("glBindTexture");  
bindings.bindTextureUnit = (GL_BindTextureUnit)procAddress("glBindTextureUnit");  
bindings.bindTextures = (GL_BindTextures)procAddress("glBindTextures");  
bindings.bindTransformFeedback = (GL_BindTransformFeedback)procAddress("glBindTransformFeedback");  
bindings.bindVertexArray = (GL_BindVertexArray)procAddress("glBindVertexArray");  
bindings.bindVertexBuffer = (GL_BindVertexBuffer)procAddress("glBindVertexBuffer");  
bindings.bindVertexBuffers = (GL_BindVertexBuffers)procAddress("glBindVertexBuffers");  
bindings.bitmap = (GL_Bitmap)procAddress("glBitmap");  
bindings.blendEquationSeparate = (GL_BlendEquationSeparate)procAddress("glBlendEquationSeparate");  
bindings.blendEquationSeparatei = (GL_BlendEquationSeparatei)procAddress("glBlendEquationSeparatei");  
bindings.blendEquationi = (GL_BlendEquationi)procAddress("glBlendEquationi");  
bindings.blendFunc = (GL_BlendFunc)procAddress("glBlendFunc");  
bindings.blendFuncSeparatei = (GL_BlendFuncSeparatei)procAddress("glBlendFuncSeparatei");  
bindings.blendFunci = (GL_BlendFunci)procAddress("glBlendFunci");  
bindings.blitFramebuffer = (GL_BlitFramebuffer)procAddress("glBlitFramebuffer");  
bindings.blitNamedFramebuffer = (GL_BlitNamedFramebuffer)procAddress("glBlitNamedFramebuffer");  
bindings.bufferData = (GL_BufferData)procAddress("glBufferData");  
bindings.bufferStorage = (GL_BufferStorage)procAddress("glBufferStorage");  
bindings.bufferSubData = (GL_BufferSubData)procAddress("glBufferSubData");  
bindings.callList = (GL_CallList)procAddress("glCallList");  
bindings.callLists = (GL_CallLists)procAddress("glCallLists");  
bindings.checkFramebufferStatus = (GL_CheckFramebufferStatus)procAddress("glCheckFramebufferStatus");  
bindings.checkNamedFramebufferStatus = (GL_CheckNamedFramebufferStatus)procAddress("glCheckNamedFramebufferStatus");  
bindings.clampColor = (GL_ClampColor)procAddress("glClampColor");  
bindings.clear = (GL_Clear)procAddress("glClear");  
bindings.clearAccum = (GL_ClearAccum)procAddress("glClearAccum");  
bindings.clearBufferData = (GL_ClearBufferData)procAddress("glClearBufferData");  
bindings.clearBufferSubData = (GL_ClearBufferSubData)procAddress("glClearBufferSubData");  
bindings.clearBufferfi = (GL_ClearBufferfi)procAddress("glClearBufferfi");  
bindings.clearBufferfv = (GL_ClearBufferfv)procAddress("glClearBufferfv");  
bindings.clearBufferiv = (GL_ClearBufferiv)procAddress("glClearBufferiv");  
bindings.clearBufferuiv = (GL_ClearBufferuiv)procAddress("glClearBufferuiv");  
bindings.clearColor = (GL_ClearColor)procAddress("glClearColor");  
bindings.clearDepth = (GL_ClearDepth)procAddress("glClearDepth");  
bindings.clearDepthf = (GL_ClearDepthf)procAddress("glClearDepthf");  
bindings.clearIndex = (GL_ClearIndex)procAddress("glClearIndex");  
bindings.clearNamedBufferData = (GL_ClearNamedBufferData)procAddress("glClearNamedBufferData");  
bindings.clearNamedBufferSubData = (GL_ClearNamedBufferSubData)procAddress("glClearNamedBufferSubData");  
bindings.clearNamedFramebufferfi = (GL_ClearNamedFramebufferfi)procAddress("glClearNamedFramebufferfi");  
bindings.clearNamedFramebufferfv = (GL_ClearNamedFramebufferfv)procAddress("glClearNamedFramebufferfv");  
bindings.clearNamedFramebufferiv = (GL_ClearNamedFramebufferiv)procAddress("glClearNamedFramebufferiv");  
bindings.clearNamedFramebufferuiv = (GL_ClearNamedFramebufferuiv)procAddress("glClearNamedFramebufferuiv");  
bindings.clearStencil = (GL_ClearStencil)procAddress("glClearStencil");  
bindings.clearTexImage = (GL_ClearTexImage)procAddress("glClearTexImage");  
bindings.clearTexSubImage = (GL_ClearTexSubImage)procAddress("glClearTexSubImage");  
bindings.clientActiveTexture = (GL_ClientActiveTexture)procAddress("glClientActiveTexture");  
bindings.clientWaitSync = (GL_ClientWaitSync)procAddress("glClientWaitSync");  
bindings.clipControl = (GL_ClipControl)procAddress("glClipControl");  
bindings.clipPlane = (GL_ClipPlane)procAddress("glClipPlane");  
bindings.color3b = (GL_Color3b)procAddress("glColor3b");  
bindings.color3bv = (GL_Color3bv)procAddress("glColor3bv");  
bindings.color3d = (GL_Color3d)procAddress("glColor3d");  
bindings.color3dv = (GL_Color3dv)procAddress("glColor3dv");  
bindings.color3f = (GL_Color3f)procAddress("glColor3f");  
bindings.color3fv = (GL_Color3fv)procAddress("glColor3fv");  
bindings.color3i = (GL_Color3i)procAddress("glColor3i");  
bindings.color3iv = (GL_Color3iv)procAddress("glColor3iv");  
bindings.color3s = (GL_Color3s)procAddress("glColor3s");  
bindings.color3sv = (GL_Color3sv)procAddress("glColor3sv");  
bindings.color3ub = (GL_Color3ub)procAddress("glColor3ub");  
bindings.color3ubv = (GL_Color3ubv)procAddress("glColor3ubv");  
bindings.color3ui = (GL_Color3ui)procAddress("glColor3ui");  
bindings.color3uiv = (GL_Color3uiv)procAddress("glColor3uiv");  
bindings.color3us = (GL_Color3us)procAddress("glColor3us");  
bindings.color3usv = (GL_Color3usv)procAddress("glColor3usv");  
bindings.color4b = (GL_Color4b)procAddress("glColor4b");  
bindings.color4bv = (GL_Color4bv)procAddress("glColor4bv");  
bindings.color4d = (GL_Color4d)procAddress("glColor4d");  
bindings.color4dv = (GL_Color4dv)procAddress("glColor4dv");  
bindings.color4f = (GL_Color4f)procAddress("glColor4f");  
bindings.color4fv = (GL_Color4fv)procAddress("glColor4fv");  
bindings.color4i = (GL_Color4i)procAddress("glColor4i");  
bindings.color4iv = (GL_Color4iv)procAddress("glColor4iv");  
bindings.color4s = (GL_Color4s)procAddress("glColor4s");  
bindings.color4sv = (GL_Color4sv)procAddress("glColor4sv");  
bindings.color4ub = (GL_Color4ub)procAddress("glColor4ub");  
bindings.color4ubv = (GL_Color4ubv)procAddress("glColor4ubv");  
bindings.color4ui = (GL_Color4ui)procAddress("glColor4ui");  
bindings.color4uiv = (GL_Color4uiv)procAddress("glColor4uiv");  
bindings.color4us = (GL_Color4us)procAddress("glColor4us");  
bindings.color4usv = (GL_Color4usv)procAddress("glColor4usv");  
bindings.colorMask = (GL_ColorMask)procAddress("glColorMask");  
bindings.colorMaski = (GL_ColorMaski)procAddress("glColorMaski");  
bindings.colorMaterial = (GL_ColorMaterial)procAddress("glColorMaterial");  
bindings.colorP3ui = (GL_ColorP3ui)procAddress("glColorP3ui");  
bindings.colorP3uiv = (GL_ColorP3uiv)procAddress("glColorP3uiv");  
bindings.colorP4ui = (GL_ColorP4ui)procAddress("glColorP4ui");  
bindings.colorP4uiv = (GL_ColorP4uiv)procAddress("glColorP4uiv");  
bindings.colorPointer = (GL_ColorPointer)procAddress("glColorPointer");  
bindings.compileShader = (GL_CompileShader)procAddress("glCompileShader");  
bindings.compressedTextureSubImage1D = (GL_CompressedTextureSubImage1D)procAddress("glCompressedTextureSubImage1D");  
bindings.compressedTextureSubImage2D = (GL_CompressedTextureSubImage2D)procAddress("glCompressedTextureSubImage2D");  
bindings.compressedTextureSubImage3D = (GL_CompressedTextureSubImage3D)procAddress("glCompressedTextureSubImage3D");  
bindings.copyBufferSubData = (GL_CopyBufferSubData)procAddress("glCopyBufferSubData");  
bindings.copyImageSubData = (GL_CopyImageSubData)procAddress("glCopyImageSubData");  
bindings.copyNamedBufferSubData = (GL_CopyNamedBufferSubData)procAddress("glCopyNamedBufferSubData");  
bindings.copyPixels = (GL_CopyPixels)procAddress("glCopyPixels");  
bindings.copyTexImage1D = (GL_CopyTexImage1D)procAddress("glCopyTexImage1D");  
bindings.copyTexImage2D = (GL_CopyTexImage2D)procAddress("glCopyTexImage2D");  
bindings.copyTexSubImage1D = (GL_CopyTexSubImage1D)procAddress("glCopyTexSubImage1D");  
bindings.copyTexSubImage2D = (GL_CopyTexSubImage2D)procAddress("glCopyTexSubImage2D");  
bindings.copyTextureSubImage1D = (GL_CopyTextureSubImage1D)procAddress("glCopyTextureSubImage1D");  
bindings.copyTextureSubImage2D = (GL_CopyTextureSubImage2D)procAddress("glCopyTextureSubImage2D");  
bindings.copyTextureSubImage3D = (GL_CopyTextureSubImage3D)procAddress("glCopyTextureSubImage3D");  
bindings.createBuffers = (GL_CreateBuffers)procAddress("glCreateBuffers");  
bindings.createFramebuffers = (GL_CreateFramebuffers)procAddress("glCreateFramebuffers");  
bindings.createProgram = (GL_CreateProgram)procAddress("glCreateProgram");  
bindings.createProgramPipelines = (GL_CreateProgramPipelines)procAddress("glCreateProgramPipelines");  
bindings.createQueries = (GL_CreateQueries)procAddress("glCreateQueries");  
bindings.createRenderbuffers = (GL_CreateRenderbuffers)procAddress("glCreateRenderbuffers");  
bindings.createSamplers = (GL_CreateSamplers)procAddress("glCreateSamplers");  
bindings.createShader = (GL_CreateShader)procAddress("glCreateShader");  
bindings.createShaderProgramv = (GL_CreateShaderProgramv)procAddress("glCreateShaderProgramv");  
bindings.createTextures = (GL_CreateTextures)procAddress("glCreateTextures");  
bindings.createTransformFeedbacks = (GL_CreateTransformFeedbacks)procAddress("glCreateTransformFeedbacks");  
bindings.createVertexArrays = (GL_CreateVertexArrays)procAddress("glCreateVertexArrays");  
bindings.cullFace = (GL_CullFace)procAddress("glCullFace");  
bindings.debugMessageCallback = (GL_DebugMessageCallback)procAddress("glDebugMessageCallback");  
bindings.debugMessageControl = (GL_DebugMessageControl)procAddress("glDebugMessageControl");  
bindings.debugMessageInsert = (GL_DebugMessageInsert)procAddress("glDebugMessageInsert");  
bindings.deleteBuffers = (GL_DeleteBuffers)procAddress("glDeleteBuffers");  
bindings.deleteFramebuffers = (GL_DeleteFramebuffers)procAddress("glDeleteFramebuffers");  
bindings.deleteLists = (GL_DeleteLists)procAddress("glDeleteLists");  
bindings.deleteProgram = (GL_DeleteProgram)procAddress("glDeleteProgram");  
bindings.deleteProgramPipelines = (GL_DeleteProgramPipelines)procAddress("glDeleteProgramPipelines");  
bindings.deleteQueries = (GL_DeleteQueries)procAddress("glDeleteQueries");  
bindings.deleteRenderbuffers = (GL_DeleteRenderbuffers)procAddress("glDeleteRenderbuffers");  
bindings.deleteSamplers = (GL_DeleteSamplers)procAddress("glDeleteSamplers");  
bindings.deleteShader = (GL_DeleteShader)procAddress("glDeleteShader");  
bindings.deleteSync = (GL_DeleteSync)procAddress("glDeleteSync");  
bindings.deleteTextures = (GL_DeleteTextures)procAddress("glDeleteTextures");  
bindings.deleteTransformFeedbacks = (GL_DeleteTransformFeedbacks)procAddress("glDeleteTransformFeedbacks");  
bindings.deleteVertexArrays = (GL_DeleteVertexArrays)procAddress("glDeleteVertexArrays");  
bindings.depthFunc = (GL_DepthFunc)procAddress("glDepthFunc");  
bindings.depthMask = (GL_DepthMask)procAddress("glDepthMask");  
bindings.depthRange = (GL_DepthRange)procAddress("glDepthRange");  
bindings.depthRangeArrayv = (GL_DepthRangeArrayv)procAddress("glDepthRangeArrayv");  
bindings.depthRangeIndexed = (GL_DepthRangeIndexed)procAddress("glDepthRangeIndexed");  
bindings.depthRangef = (GL_DepthRangef)procAddress("glDepthRangef");  
bindings.detachShader = (GL_DetachShader)procAddress("glDetachShader");  
bindings.disable = (GL_Disable)procAddress("glDisable");  
bindings.disableClientState = (GL_DisableClientState)procAddress("glDisableClientState");  
bindings.disableVertexArrayAttrib = (GL_DisableVertexArrayAttrib)procAddress("glDisableVertexArrayAttrib");  
bindings.disableVertexAttribArray = (GL_DisableVertexAttribArray)procAddress("glDisableVertexAttribArray");  
bindings.disablei = (GL_Disablei)procAddress("glDisablei");  
bindings.dispatchCompute = (GL_DispatchCompute)procAddress("glDispatchCompute");  
bindings.dispatchComputeIndirect = (GL_DispatchComputeIndirect)procAddress("glDispatchComputeIndirect");  
bindings.drawArrays = (GL_DrawArrays)procAddress("glDrawArrays");  
bindings.drawArraysIndirect = (GL_DrawArraysIndirect)procAddress("glDrawArraysIndirect");  
bindings.drawArraysInstanced = (GL_DrawArraysInstanced)procAddress("glDrawArraysInstanced");  
bindings.drawArraysInstancedBaseInstance = (GL_DrawArraysInstancedBaseInstance)procAddress("glDrawArraysInstancedBaseInstance");  
bindings.drawBuffer = (GL_DrawBuffer)procAddress("glDrawBuffer");  
bindings.drawBuffers = (GL_DrawBuffers)procAddress("glDrawBuffers");  
bindings.drawElements = (GL_DrawElements)procAddress("glDrawElements");  
bindings.drawElementsBaseVertex = (GL_DrawElementsBaseVertex)procAddress("glDrawElementsBaseVertex");  
bindings.drawElementsIndirect = (GL_DrawElementsIndirect)procAddress("glDrawElementsIndirect");  
bindings.drawElementsInstanced = (GL_DrawElementsInstanced)procAddress("glDrawElementsInstanced");  
bindings.drawElementsInstancedBaseInstance = (GL_DrawElementsInstancedBaseInstance)procAddress("glDrawElementsInstancedBaseInstance");  
bindings.drawElementsInstancedBaseVertex = (GL_DrawElementsInstancedBaseVertex)procAddress("glDrawElementsInstancedBaseVertex");  
bindings.drawElementsInstancedBaseVertexBaseInstance = (GL_DrawElementsInstancedBaseVertexBaseInstance)procAddress("glDrawElementsInstancedBaseVertexBaseInstance");  
bindings.drawPixels = (GL_DrawPixels)procAddress("glDrawPixels");  
bindings.drawRangeElementsBaseVertex = (GL_DrawRangeElementsBaseVertex)procAddress("glDrawRangeElementsBaseVertex");  
bindings.drawTransformFeedback = (GL_DrawTransformFeedback)procAddress("glDrawTransformFeedback");  
bindings.drawTransformFeedbackInstanced = (GL_DrawTransformFeedbackInstanced)procAddress("glDrawTransformFeedbackInstanced");  
bindings.drawTransformFeedbackStream = (GL_DrawTransformFeedbackStream)procAddress("glDrawTransformFeedbackStream");  
bindings.drawTransformFeedbackStreamInstanced = (GL_DrawTransformFeedbackStreamInstanced)procAddress("glDrawTransformFeedbackStreamInstanced");  
bindings.edgeFlag = (GL_EdgeFlag)procAddress("glEdgeFlag");  
bindings.edgeFlagPointer = (GL_EdgeFlagPointer)procAddress("glEdgeFlagPointer");  
bindings.edgeFlagv = (GL_EdgeFlagv)procAddress("glEdgeFlagv");  
bindings.enable = (GL_Enable)procAddress("glEnable");  
bindings.enableClientState = (GL_EnableClientState)procAddress("glEnableClientState");  
bindings.enableVertexArrayAttrib = (GL_EnableVertexArrayAttrib)procAddress("glEnableVertexArrayAttrib");  
bindings.enableVertexAttribArray = (GL_EnableVertexAttribArray)procAddress("glEnableVertexAttribArray");  
bindings.enablei = (GL_Enablei)procAddress("glEnablei");  
bindings.end = (GL_End)procAddress("glEnd");  
bindings.endConditionalRender = (GL_EndConditionalRender)procAddress("glEndConditionalRender");  
bindings.endList = (GL_EndList)procAddress("glEndList");  
bindings.endQuery = (GL_EndQuery)procAddress("glEndQuery");  
bindings.endQueryIndexed = (GL_EndQueryIndexed)procAddress("glEndQueryIndexed");  
bindings.endTransformFeedback = (GL_EndTransformFeedback)procAddress("glEndTransformFeedback");  
bindings.evalCoord1d = (GL_EvalCoord1d)procAddress("glEvalCoord1d");  
bindings.evalCoord1dv = (GL_EvalCoord1dv)procAddress("glEvalCoord1dv");  
bindings.evalCoord1f = (GL_EvalCoord1f)procAddress("glEvalCoord1f");  
bindings.evalCoord1fv = (GL_EvalCoord1fv)procAddress("glEvalCoord1fv");  
bindings.evalCoord2d = (GL_EvalCoord2d)procAddress("glEvalCoord2d");  
bindings.evalCoord2dv = (GL_EvalCoord2dv)procAddress("glEvalCoord2dv");  
bindings.evalCoord2f = (GL_EvalCoord2f)procAddress("glEvalCoord2f");  
bindings.evalCoord2fv = (GL_EvalCoord2fv)procAddress("glEvalCoord2fv");  
bindings.evalMesh1 = (GL_EvalMesh1)procAddress("glEvalMesh1");  
bindings.evalMesh2 = (GL_EvalMesh2)procAddress("glEvalMesh2");  
bindings.evalPoint1 = (GL_EvalPoint1)procAddress("glEvalPoint1");  
bindings.evalPoint2 = (GL_EvalPoint2)procAddress("glEvalPoint2");  
bindings.feedbackBuffer = (GL_FeedbackBuffer)procAddress("glFeedbackBuffer");  
bindings.fenceSync = (GL_FenceSync)procAddress("glFenceSync");  
bindings.finish = (GL_Finish)procAddress("glFinish");  
bindings.flush = (GL_Flush)procAddress("glFlush");  
bindings.flushMappedBufferRange = (GL_FlushMappedBufferRange)procAddress("glFlushMappedBufferRange");  
bindings.flushMappedNamedBufferRange = (GL_FlushMappedNamedBufferRange)procAddress("glFlushMappedNamedBufferRange");  
bindings.fogCoordPointer = (GL_FogCoordPointer)procAddress("glFogCoordPointer");  
bindings.fogCoordd = (GL_FogCoordd)procAddress("glFogCoordd");  
bindings.fogCoorddv = (GL_FogCoorddv)procAddress("glFogCoorddv");  
bindings.fogCoordf = (GL_FogCoordf)procAddress("glFogCoordf");  
bindings.fogCoordfv = (GL_FogCoordfv)procAddress("glFogCoordfv");  
bindings.fogf = (GL_Fogf)procAddress("glFogf");  
bindings.fogfv = (GL_Fogfv)procAddress("glFogfv");  
bindings.fogi = (GL_Fogi)procAddress("glFogi");  
bindings.fogiv = (GL_Fogiv)procAddress("glFogiv");  
bindings.framebufferParameteri = (GL_FramebufferParameteri)procAddress("glFramebufferParameteri");  
bindings.framebufferRenderbuffer = (GL_FramebufferRenderbuffer)procAddress("glFramebufferRenderbuffer");  
bindings.framebufferTexture = (GL_FramebufferTexture)procAddress("glFramebufferTexture");  
bindings.framebufferTexture1D = (GL_FramebufferTexture1D)procAddress("glFramebufferTexture1D");  
bindings.framebufferTexture2D = (GL_FramebufferTexture2D)procAddress("glFramebufferTexture2D");  
bindings.framebufferTexture3D = (GL_FramebufferTexture3D)procAddress("glFramebufferTexture3D");  
bindings.framebufferTextureLayer = (GL_FramebufferTextureLayer)procAddress("glFramebufferTextureLayer");  
bindings.frontFace = (GL_FrontFace)procAddress("glFrontFace");  
bindings.frustum = (GL_Frustum)procAddress("glFrustum");  
bindings.genBuffers = (GL_GenBuffers)procAddress("glGenBuffers");  
bindings.genFramebuffers = (GL_GenFramebuffers)procAddress("glGenFramebuffers");  
bindings.genLists = (GL_GenLists)procAddress("glGenLists");  
bindings.genProgramPipelines = (GL_GenProgramPipelines)procAddress("glGenProgramPipelines");  
bindings.genQueries = (GL_GenQueries)procAddress("glGenQueries");  
bindings.genRenderbuffers = (GL_GenRenderbuffers)procAddress("glGenRenderbuffers");  
bindings.genSamplers = (GL_GenSamplers)procAddress("glGenSamplers");  
bindings.genTextures = (GL_GenTextures)procAddress("glGenTextures");  
bindings.genTransformFeedbacks = (GL_GenTransformFeedbacks)procAddress("glGenTransformFeedbacks");  
bindings.genVertexArrays = (GL_GenVertexArrays)procAddress("glGenVertexArrays");  
bindings.generateMipmap = (GL_GenerateMipmap)procAddress("glGenerateMipmap");  
bindings.generateTextureMipmap = (GL_GenerateTextureMipmap)procAddress("glGenerateTextureMipmap");  
bindings.getActiveAtomicCounterBufferiv = (GL_GetActiveAtomicCounterBufferiv)procAddress("glGetActiveAtomicCounterBufferiv");  
bindings.getActiveAttrib = (GL_GetActiveAttrib)procAddress("glGetActiveAttrib");  
bindings.getActiveSubroutineName = (GL_GetActiveSubroutineName)procAddress("glGetActiveSubroutineName");  
bindings.getActiveSubroutineUniformName = (GL_GetActiveSubroutineUniformName)procAddress("glGetActiveSubroutineUniformName");  
bindings.getActiveSubroutineUniformiv = (GL_GetActiveSubroutineUniformiv)procAddress("glGetActiveSubroutineUniformiv");  
bindings.getActiveUniform = (GL_GetActiveUniform)procAddress("glGetActiveUniform");  
bindings.getActiveUniformBlockName = (GL_GetActiveUniformBlockName)procAddress("glGetActiveUniformBlockName");  
bindings.getActiveUniformBlockiv = (GL_GetActiveUniformBlockiv)procAddress("glGetActiveUniformBlockiv");  
bindings.getActiveUniformName = (GL_GetActiveUniformName)procAddress("glGetActiveUniformName");  
bindings.getActiveUniformsiv = (GL_GetActiveUniformsiv)procAddress("glGetActiveUniformsiv");  
bindings.getAttachedShaders = (GL_GetAttachedShaders)procAddress("glGetAttachedShaders");  
bindings.getAttribLocation = (GL_GetAttribLocation)procAddress("glGetAttribLocation");  
bindings.getBooleani_v = (GL_GetBooleani_v)procAddress("glGetBooleani_v");  
bindings.getBooleanv = (GL_GetBooleanv)procAddress("glGetBooleanv");  
bindings.getBufferParameteri64v = (GL_GetBufferParameteri64v)procAddress("glGetBufferParameteri64v");  
bindings.getBufferParameteriv = (GL_GetBufferParameteriv)procAddress("glGetBufferParameteriv");  
bindings.getBufferPointerv = (GL_GetBufferPointerv)procAddress("glGetBufferPointerv");  
bindings.getBufferSubData = (GL_GetBufferSubData)procAddress("glGetBufferSubData");  
bindings.getClipPlane = (GL_GetClipPlane)procAddress("glGetClipPlane");  
bindings.getCompressedTextureImage = (GL_GetCompressedTextureImage)procAddress("glGetCompressedTextureImage");  
bindings.getCompressedTextureSubImage = (GL_GetCompressedTextureSubImage)procAddress("glGetCompressedTextureSubImage");  
bindings.getDebugMessageLog = (GL_GetDebugMessageLog)procAddress("glGetDebugMessageLog");  
bindings.getDoublei_v = (GL_GetDoublei_v)procAddress("glGetDoublei_v");  
bindings.getDoublev = (GL_GetDoublev)procAddress("glGetDoublev");  
bindings.getError = (GL_GetError)procAddress("glGetError");  
bindings.getFloati_v = (GL_GetFloati_v)procAddress("glGetFloati_v");  
bindings.getFloatv = (GL_GetFloatv)procAddress("glGetFloatv");  
bindings.getFragDataIndex = (GL_GetFragDataIndex)procAddress("glGetFragDataIndex");  
bindings.getFragDataLocation = (GL_GetFragDataLocation)procAddress("glGetFragDataLocation");  
bindings.getFramebufferAttachmentParameteriv = (GL_GetFramebufferAttachmentParameteriv)procAddress("glGetFramebufferAttachmentParameteriv");  
bindings.getFramebufferParameteriv = (GL_GetFramebufferParameteriv)procAddress("glGetFramebufferParameteriv");  
bindings.getGraphicsResetStatus = (GL_GetGraphicsResetStatus)procAddress("glGetGraphicsResetStatus");  
bindings.getInteger64i_v = (GL_GetInteger64i_v)procAddress("glGetInteger64i_v");  
bindings.getInteger64v = (GL_GetInteger64v)procAddress("glGetInteger64v");  
bindings.getIntegeri_v = (GL_GetIntegeri_v)procAddress("glGetIntegeri_v");  
bindings.getIntegerv = (GL_GetIntegerv)procAddress("glGetIntegerv");  
bindings.getInternalformati64v = (GL_GetInternalformati64v)procAddress("glGetInternalformati64v");  
bindings.getInternalformativ = (GL_GetInternalformativ)procAddress("glGetInternalformativ");  
bindings.getLightfv = (GL_GetLightfv)procAddress("glGetLightfv");  
bindings.getLightiv = (GL_GetLightiv)procAddress("glGetLightiv");  
bindings.getMapdv = (GL_GetMapdv)procAddress("glGetMapdv");  
bindings.getMapfv = (GL_GetMapfv)procAddress("glGetMapfv");  
bindings.getMapiv = (GL_GetMapiv)procAddress("glGetMapiv");  
bindings.getMaterialfv = (GL_GetMaterialfv)procAddress("glGetMaterialfv");  
bindings.getMaterialiv = (GL_GetMaterialiv)procAddress("glGetMaterialiv");  
bindings.getMultisamplefv = (GL_GetMultisamplefv)procAddress("glGetMultisamplefv");  
bindings.getNamedBufferParameteri64v = (GL_GetNamedBufferParameteri64v)procAddress("glGetNamedBufferParameteri64v");  
bindings.getNamedBufferParameteriv = (GL_GetNamedBufferParameteriv)procAddress("glGetNamedBufferParameteriv");  
bindings.getNamedBufferPointerv = (GL_GetNamedBufferPointerv)procAddress("glGetNamedBufferPointerv");  
bindings.getNamedBufferSubData = (GL_GetNamedBufferSubData)procAddress("glGetNamedBufferSubData");  
bindings.getNamedFramebufferAttachmentParameteriv = (GL_GetNamedFramebufferAttachmentParameteriv)procAddress("glGetNamedFramebufferAttachmentParameteriv");  
bindings.getNamedFramebufferParameteriv = (GL_GetNamedFramebufferParameteriv)procAddress("glGetNamedFramebufferParameteriv");  
bindings.getNamedRenderbufferParameteriv = (GL_GetNamedRenderbufferParameteriv)procAddress("glGetNamedRenderbufferParameteriv");  
bindings.getObjectLabel = (GL_GetObjectLabel)procAddress("glGetObjectLabel");  
bindings.getObjectPtrLabel = (GL_GetObjectPtrLabel)procAddress("glGetObjectPtrLabel");  
bindings.getPixelMapfv = (GL_GetPixelMapfv)procAddress("glGetPixelMapfv");  
bindings.getPixelMapuiv = (GL_GetPixelMapuiv)procAddress("glGetPixelMapuiv");  
bindings.getPixelMapusv = (GL_GetPixelMapusv)procAddress("glGetPixelMapusv");  
bindings.getPointerv = (GL_GetPointerv)procAddress("glGetPointerv");  
bindings.getPolygonStipple = (GL_GetPolygonStipple)procAddress("glGetPolygonStipple");  
bindings.getProgramBinary = (GL_GetProgramBinary)procAddress("glGetProgramBinary");  
bindings.getProgramInfoLog = (GL_GetProgramInfoLog)procAddress("glGetProgramInfoLog");  
bindings.getProgramInterfaceiv = (GL_GetProgramInterfaceiv)procAddress("glGetProgramInterfaceiv");  
bindings.getProgramPipelineInfoLog = (GL_GetProgramPipelineInfoLog)procAddress("glGetProgramPipelineInfoLog");  
bindings.getProgramPipelineiv = (GL_GetProgramPipelineiv)procAddress("glGetProgramPipelineiv");  
bindings.getProgramResourceIndex = (GL_GetProgramResourceIndex)procAddress("glGetProgramResourceIndex");  
bindings.getProgramResourceLocation = (GL_GetProgramResourceLocation)procAddress("glGetProgramResourceLocation");  
bindings.getProgramResourceLocationIndex = (GL_GetProgramResourceLocationIndex)procAddress("glGetProgramResourceLocationIndex");  
bindings.getProgramResourceName = (GL_GetProgramResourceName)procAddress("glGetProgramResourceName");  
bindings.getProgramResourceiv = (GL_GetProgramResourceiv)procAddress("glGetProgramResourceiv");  
bindings.getProgramStageiv = (GL_GetProgramStageiv)procAddress("glGetProgramStageiv");  
bindings.getProgramiv = (GL_GetProgramiv)procAddress("glGetProgramiv");  
bindings.getQueryBufferObjecti64v = (GL_GetQueryBufferObjecti64v)procAddress("glGetQueryBufferObjecti64v");  
bindings.getQueryBufferObjectiv = (GL_GetQueryBufferObjectiv)procAddress("glGetQueryBufferObjectiv");  
bindings.getQueryBufferObjectui64v = (GL_GetQueryBufferObjectui64v)procAddress("glGetQueryBufferObjectui64v");  
bindings.getQueryBufferObjectuiv = (GL_GetQueryBufferObjectuiv)procAddress("glGetQueryBufferObjectuiv");  
bindings.getQueryIndexediv = (GL_GetQueryIndexediv)procAddress("glGetQueryIndexediv");  
bindings.getQueryObjecti64v = (GL_GetQueryObjecti64v)procAddress("glGetQueryObjecti64v");  
bindings.getQueryObjectiv = (GL_GetQueryObjectiv)procAddress("glGetQueryObjectiv");  
bindings.getQueryObjectui64v = (GL_GetQueryObjectui64v)procAddress("glGetQueryObjectui64v");  
bindings.getQueryObjectuiv = (GL_GetQueryObjectuiv)procAddress("glGetQueryObjectuiv");  
bindings.getQueryiv = (GL_GetQueryiv)procAddress("glGetQueryiv");  
bindings.getRenderbufferParameteriv = (GL_GetRenderbufferParameteriv)procAddress("glGetRenderbufferParameteriv");  
bindings.getSamplerParameterIiv = (GL_GetSamplerParameterIiv)procAddress("glGetSamplerParameterIiv");  
bindings.getSamplerParameterIuiv = (GL_GetSamplerParameterIuiv)procAddress("glGetSamplerParameterIuiv");  
bindings.getSamplerParameterfv = (GL_GetSamplerParameterfv)procAddress("glGetSamplerParameterfv");  
bindings.getSamplerParameteriv = (GL_GetSamplerParameteriv)procAddress("glGetSamplerParameteriv");  
bindings.getShaderInfoLog = (GL_GetShaderInfoLog)procAddress("glGetShaderInfoLog");  
bindings.getShaderPrecisionFormat = (GL_GetShaderPrecisionFormat)procAddress("glGetShaderPrecisionFormat");  
bindings.getShaderSource = (GL_GetShaderSource)procAddress("glGetShaderSource");  
bindings.getShaderiv = (GL_GetShaderiv)procAddress("glGetShaderiv");  
bindings.getString = (GL_GetString)procAddress("glGetString");  
bindings.getStringi = (GL_GetStringi)procAddress("glGetStringi");  
bindings.getSubroutineIndex = (GL_GetSubroutineIndex)procAddress("glGetSubroutineIndex");  
bindings.getSubroutineUniformLocation = (GL_GetSubroutineUniformLocation)procAddress("glGetSubroutineUniformLocation");  
bindings.getSynciv = (GL_GetSynciv)procAddress("glGetSynciv");  
bindings.getTexEnvfv = (GL_GetTexEnvfv)procAddress("glGetTexEnvfv");  
bindings.getTexEnviv = (GL_GetTexEnviv)procAddress("glGetTexEnviv");  
bindings.getTexGendv = (GL_GetTexGendv)procAddress("glGetTexGendv");  
bindings.getTexGenfv = (GL_GetTexGenfv)procAddress("glGetTexGenfv");  
bindings.getTexGeniv = (GL_GetTexGeniv)procAddress("glGetTexGeniv");  
bindings.getTexImage = (GL_GetTexImage)procAddress("glGetTexImage");  
bindings.getTexLevelParameterfv = (GL_GetTexLevelParameterfv)procAddress("glGetTexLevelParameterfv");  
bindings.getTexLevelParameteriv = (GL_GetTexLevelParameteriv)procAddress("glGetTexLevelParameteriv");  
bindings.getTexParameterIiv = (GL_GetTexParameterIiv)procAddress("glGetTexParameterIiv");  
bindings.getTexParameterIuiv = (GL_GetTexParameterIuiv)procAddress("glGetTexParameterIuiv");  
bindings.getTexParameterfv = (GL_GetTexParameterfv)procAddress("glGetTexParameterfv");  
bindings.getTexParameteriv = (GL_GetTexParameteriv)procAddress("glGetTexParameteriv");  
bindings.getTextureImage = (GL_GetTextureImage)procAddress("glGetTextureImage");  
bindings.getTextureLevelParameterfv = (GL_GetTextureLevelParameterfv)procAddress("glGetTextureLevelParameterfv");  
bindings.getTextureLevelParameteriv = (GL_GetTextureLevelParameteriv)procAddress("glGetTextureLevelParameteriv");  
bindings.getTextureParameterIiv = (GL_GetTextureParameterIiv)procAddress("glGetTextureParameterIiv");  
bindings.getTextureParameterIuiv = (GL_GetTextureParameterIuiv)procAddress("glGetTextureParameterIuiv");  
bindings.getTextureParameterfv = (GL_GetTextureParameterfv)procAddress("glGetTextureParameterfv");  
bindings.getTextureParameteriv = (GL_GetTextureParameteriv)procAddress("glGetTextureParameteriv");  
bindings.getTextureSubImage = (GL_GetTextureSubImage)procAddress("glGetTextureSubImage");  
bindings.getTransformFeedbackVarying = (GL_GetTransformFeedbackVarying)procAddress("glGetTransformFeedbackVarying");  
bindings.getTransformFeedbacki64_v = (GL_GetTransformFeedbacki64_v)procAddress("glGetTransformFeedbacki64_v");  
bindings.getTransformFeedbacki_v = (GL_GetTransformFeedbacki_v)procAddress("glGetTransformFeedbacki_v");  
bindings.getTransformFeedbackiv = (GL_GetTransformFeedbackiv)procAddress("glGetTransformFeedbackiv");  
bindings.getUniformBlockIndex = (GL_GetUniformBlockIndex)procAddress("glGetUniformBlockIndex");  
bindings.getUniformIndices = (GL_GetUniformIndices)procAddress("glGetUniformIndices");  
bindings.getUniformLocation = (GL_GetUniformLocation)procAddress("glGetUniformLocation");  
bindings.getUniformSubroutineuiv = (GL_GetUniformSubroutineuiv)procAddress("glGetUniformSubroutineuiv");  
bindings.getUniformdv = (GL_GetUniformdv)procAddress("glGetUniformdv");  
bindings.getUniformfv = (GL_GetUniformfv)procAddress("glGetUniformfv");  
bindings.getUniformiv = (GL_GetUniformiv)procAddress("glGetUniformiv");  
bindings.getUniformuiv = (GL_GetUniformuiv)procAddress("glGetUniformuiv");  
bindings.getVertexArrayIndexed64iv = (GL_GetVertexArrayIndexed64iv)procAddress("glGetVertexArrayIndexed64iv");  
bindings.getVertexArrayIndexediv = (GL_GetVertexArrayIndexediv)procAddress("glGetVertexArrayIndexediv");  
bindings.getVertexArrayiv = (GL_GetVertexArrayiv)procAddress("glGetVertexArrayiv");  
bindings.getVertexAttribIiv = (GL_GetVertexAttribIiv)procAddress("glGetVertexAttribIiv");  
bindings.getVertexAttribIuiv = (GL_GetVertexAttribIuiv)procAddress("glGetVertexAttribIuiv");  
bindings.getVertexAttribLdv = (GL_GetVertexAttribLdv)procAddress("glGetVertexAttribLdv");  
bindings.getVertexAttribPointerv = (GL_GetVertexAttribPointerv)procAddress("glGetVertexAttribPointerv");  
bindings.getVertexAttribdv = (GL_GetVertexAttribdv)procAddress("glGetVertexAttribdv");  
bindings.getVertexAttribfv = (GL_GetVertexAttribfv)procAddress("glGetVertexAttribfv");  
bindings.getVertexAttribiv = (GL_GetVertexAttribiv)procAddress("glGetVertexAttribiv");  
bindings.getnColorTable = (GL_GetnColorTable)procAddress("glGetnColorTable");  
bindings.getnCompressedTexImage = (GL_GetnCompressedTexImage)procAddress("glGetnCompressedTexImage");  
bindings.getnConvolutionFilter = (GL_GetnConvolutionFilter)procAddress("glGetnConvolutionFilter");  
bindings.getnHistogram = (GL_GetnHistogram)procAddress("glGetnHistogram");  
bindings.getnMapdv = (GL_GetnMapdv)procAddress("glGetnMapdv");  
bindings.getnMapfv = (GL_GetnMapfv)procAddress("glGetnMapfv");  
bindings.getnMapiv = (GL_GetnMapiv)procAddress("glGetnMapiv");  
bindings.getnMinmax = (GL_GetnMinmax)procAddress("glGetnMinmax");  
bindings.getnPixelMapfv = (GL_GetnPixelMapfv)procAddress("glGetnPixelMapfv");  
bindings.getnPixelMapuiv = (GL_GetnPixelMapuiv)procAddress("glGetnPixelMapuiv");  
bindings.getnPixelMapusv = (GL_GetnPixelMapusv)procAddress("glGetnPixelMapusv");  
bindings.getnPolygonStipple = (GL_GetnPolygonStipple)procAddress("glGetnPolygonStipple");  
bindings.getnSeparableFilter = (GL_GetnSeparableFilter)procAddress("glGetnSeparableFilter");  
bindings.getnTexImage = (GL_GetnTexImage)procAddress("glGetnTexImage");  
bindings.getnUniformdv = (GL_GetnUniformdv)procAddress("glGetnUniformdv");  
bindings.getnUniformfv = (GL_GetnUniformfv)procAddress("glGetnUniformfv");  
bindings.getnUniformiv = (GL_GetnUniformiv)procAddress("glGetnUniformiv");  
bindings.getnUniformuiv = (GL_GetnUniformuiv)procAddress("glGetnUniformuiv");  
bindings.hint = (GL_Hint)procAddress("glHint");  
bindings.indexMask = (GL_IndexMask)procAddress("glIndexMask");  
bindings.indexPointer = (GL_IndexPointer)procAddress("glIndexPointer");  
bindings.indexd = (GL_Indexd)procAddress("glIndexd");  
bindings.indexdv = (GL_Indexdv)procAddress("glIndexdv");  
bindings.indexf = (GL_Indexf)procAddress("glIndexf");  
bindings.indexfv = (GL_Indexfv)procAddress("glIndexfv");  
bindings.indexi = (GL_Indexi)procAddress("glIndexi");  
bindings.indexiv = (GL_Indexiv)procAddress("glIndexiv");  
bindings.indexs = (GL_Indexs)procAddress("glIndexs");  
bindings.indexsv = (GL_Indexsv)procAddress("glIndexsv");  
bindings.indexub = (GL_Indexub)procAddress("glIndexub");  
bindings.indexubv = (GL_Indexubv)procAddress("glIndexubv");  
bindings.initNames = (GL_InitNames)procAddress("glInitNames");  
bindings.interleavedArrays = (GL_InterleavedArrays)procAddress("glInterleavedArrays");  
bindings.invalidateBufferData = (GL_InvalidateBufferData)procAddress("glInvalidateBufferData");  
bindings.invalidateBufferSubData = (GL_InvalidateBufferSubData)procAddress("glInvalidateBufferSubData");  
bindings.invalidateFramebuffer = (GL_InvalidateFramebuffer)procAddress("glInvalidateFramebuffer");  
bindings.invalidateNamedFramebufferData = (GL_InvalidateNamedFramebufferData)procAddress("glInvalidateNamedFramebufferData");  
bindings.invalidateNamedFramebufferSubData = (GL_InvalidateNamedFramebufferSubData)procAddress("glInvalidateNamedFramebufferSubData");  
bindings.invalidateSubFramebuffer = (GL_InvalidateSubFramebuffer)procAddress("glInvalidateSubFramebuffer");  
bindings.invalidateTexImage = (GL_InvalidateTexImage)procAddress("glInvalidateTexImage");  
bindings.invalidateTexSubImage = (GL_InvalidateTexSubImage)procAddress("glInvalidateTexSubImage");  
bindings.isBuffer = (GL_IsBuffer)procAddress("glIsBuffer");  
bindings.isEnabled = (GL_IsEnabled)procAddress("glIsEnabled");  
bindings.isEnabledi = (GL_IsEnabledi)procAddress("glIsEnabledi");  
bindings.isFramebuffer = (GL_IsFramebuffer)procAddress("glIsFramebuffer");  
bindings.isList = (GL_IsList)procAddress("glIsList");  
bindings.isProgram = (GL_IsProgram)procAddress("glIsProgram");  
bindings.isProgramPipeline = (GL_IsProgramPipeline)procAddress("glIsProgramPipeline");  
bindings.isQuery = (GL_IsQuery)procAddress("glIsQuery");  
bindings.isRenderbuffer = (GL_IsRenderbuffer)procAddress("glIsRenderbuffer");  
bindings.isSampler = (GL_IsSampler)procAddress("glIsSampler");  
bindings.isShader = (GL_IsShader)procAddress("glIsShader");  
bindings.isSync = (GL_IsSync)procAddress("glIsSync");  
bindings.isTexture = (GL_IsTexture)procAddress("glIsTexture");  
bindings.isTransformFeedback = (GL_IsTransformFeedback)procAddress("glIsTransformFeedback");  
bindings.isVertexArray = (GL_IsVertexArray)procAddress("glIsVertexArray");  
bindings.lightModelf = (GL_LightModelf)procAddress("glLightModelf");  
bindings.lightModelfv = (GL_LightModelfv)procAddress("glLightModelfv");  
bindings.lightModeli = (GL_LightModeli)procAddress("glLightModeli");  
bindings.lightModeliv = (GL_LightModeliv)procAddress("glLightModeliv");  
bindings.lightf = (GL_Lightf)procAddress("glLightf");  
bindings.lightfv = (GL_Lightfv)procAddress("glLightfv");  
bindings.lighti = (GL_Lighti)procAddress("glLighti");  
bindings.lightiv = (GL_Lightiv)procAddress("glLightiv");  
bindings.lineStipple = (GL_LineStipple)procAddress("glLineStipple");  
bindings.lineWidth = (GL_LineWidth)procAddress("glLineWidth");  
bindings.linkProgram = (GL_LinkProgram)procAddress("glLinkProgram");  
bindings.listBase = (GL_ListBase)procAddress("glListBase");  
bindings.loadIdentity = (GL_LoadIdentity)procAddress("glLoadIdentity");  
bindings.loadMatrixd = (GL_LoadMatrixd)procAddress("glLoadMatrixd");  
bindings.loadMatrixf = (GL_LoadMatrixf)procAddress("glLoadMatrixf");  
bindings.loadName = (GL_LoadName)procAddress("glLoadName");  
bindings.loadTransposeMatrixd = (GL_LoadTransposeMatrixd)procAddress("glLoadTransposeMatrixd");  
bindings.loadTransposeMatrixf = (GL_LoadTransposeMatrixf)procAddress("glLoadTransposeMatrixf");  
bindings.logicOp = (GL_LogicOp)procAddress("glLogicOp");  
bindings.map1d = (GL_Map1d)procAddress("glMap1d");  
bindings.map1f = (GL_Map1f)procAddress("glMap1f");  
bindings.map2d = (GL_Map2d)procAddress("glMap2d");  
bindings.map2f = (GL_Map2f)procAddress("glMap2f");  
bindings.mapBuffer = (GL_MapBuffer)procAddress("glMapBuffer");  
bindings.mapBufferRange = (GL_MapBufferRange)procAddress("glMapBufferRange");  
bindings.mapGrid1d = (GL_MapGrid1d)procAddress("glMapGrid1d");  
bindings.mapGrid1f = (GL_MapGrid1f)procAddress("glMapGrid1f");  
bindings.mapGrid2d = (GL_MapGrid2d)procAddress("glMapGrid2d");  
bindings.mapGrid2f = (GL_MapGrid2f)procAddress("glMapGrid2f");  
bindings.mapNamedBuffer = (GL_MapNamedBuffer)procAddress("glMapNamedBuffer");  
bindings.mapNamedBufferRange = (GL_MapNamedBufferRange)procAddress("glMapNamedBufferRange");  
bindings.materialf = (GL_Materialf)procAddress("glMaterialf");  
bindings.materialfv = (GL_Materialfv)procAddress("glMaterialfv");  
bindings.materiali = (GL_Materiali)procAddress("glMateriali");  
bindings.materialiv = (GL_Materialiv)procAddress("glMaterialiv");  
bindings.matrixMode = (GL_MatrixMode)procAddress("glMatrixMode");  
bindings.memoryBarrier = (GL_MemoryBarrier)procAddress("glMemoryBarrier");  
bindings.memoryBarrierByRegion = (GL_MemoryBarrierByRegion)procAddress("glMemoryBarrierByRegion");  
bindings.minSampleShading = (GL_MinSampleShading)procAddress("glMinSampleShading");  
bindings.multMatrixd = (GL_MultMatrixd)procAddress("glMultMatrixd");  
bindings.multMatrixf = (GL_MultMatrixf)procAddress("glMultMatrixf");  
bindings.multTransposeMatrixd = (GL_MultTransposeMatrixd)procAddress("glMultTransposeMatrixd");  
bindings.multTransposeMatrixf = (GL_MultTransposeMatrixf)procAddress("glMultTransposeMatrixf");  
bindings.multiDrawArraysIndirect = (GL_MultiDrawArraysIndirect)procAddress("glMultiDrawArraysIndirect");  
bindings.multiDrawArraysIndirectCount = (GL_MultiDrawArraysIndirectCount)procAddress("glMultiDrawArraysIndirectCount");  
bindings.multiDrawElementsBaseVertex = (GL_MultiDrawElementsBaseVertex)procAddress("glMultiDrawElementsBaseVertex");  
bindings.multiDrawElementsIndirect = (GL_MultiDrawElementsIndirect)procAddress("glMultiDrawElementsIndirect");  
bindings.multiDrawElementsIndirectCount = (GL_MultiDrawElementsIndirectCount)procAddress("glMultiDrawElementsIndirectCount");  
bindings.multiTexCoord1d = (GL_MultiTexCoord1d)procAddress("glMultiTexCoord1d");  
bindings.multiTexCoord1dv = (GL_MultiTexCoord1dv)procAddress("glMultiTexCoord1dv");  
bindings.multiTexCoord1f = (GL_MultiTexCoord1f)procAddress("glMultiTexCoord1f");  
bindings.multiTexCoord1fv = (GL_MultiTexCoord1fv)procAddress("glMultiTexCoord1fv");  
bindings.multiTexCoord1i = (GL_MultiTexCoord1i)procAddress("glMultiTexCoord1i");  
bindings.multiTexCoord1iv = (GL_MultiTexCoord1iv)procAddress("glMultiTexCoord1iv");  
bindings.multiTexCoord1s = (GL_MultiTexCoord1s)procAddress("glMultiTexCoord1s");  
bindings.multiTexCoord1sv = (GL_MultiTexCoord1sv)procAddress("glMultiTexCoord1sv");  
bindings.multiTexCoord2d = (GL_MultiTexCoord2d)procAddress("glMultiTexCoord2d");  
bindings.multiTexCoord2dv = (GL_MultiTexCoord2dv)procAddress("glMultiTexCoord2dv");  
bindings.multiTexCoord2f = (GL_MultiTexCoord2f)procAddress("glMultiTexCoord2f");  
bindings.multiTexCoord2fv = (GL_MultiTexCoord2fv)procAddress("glMultiTexCoord2fv");  
bindings.multiTexCoord2i = (GL_MultiTexCoord2i)procAddress("glMultiTexCoord2i");  
bindings.multiTexCoord2iv = (GL_MultiTexCoord2iv)procAddress("glMultiTexCoord2iv");  
bindings.multiTexCoord2s = (GL_MultiTexCoord2s)procAddress("glMultiTexCoord2s");  
bindings.multiTexCoord2sv = (GL_MultiTexCoord2sv)procAddress("glMultiTexCoord2sv");  
bindings.multiTexCoord3d = (GL_MultiTexCoord3d)procAddress("glMultiTexCoord3d");  
bindings.multiTexCoord3dv = (GL_MultiTexCoord3dv)procAddress("glMultiTexCoord3dv");  
bindings.multiTexCoord3f = (GL_MultiTexCoord3f)procAddress("glMultiTexCoord3f");  
bindings.multiTexCoord3fv = (GL_MultiTexCoord3fv)procAddress("glMultiTexCoord3fv");  
bindings.multiTexCoord3i = (GL_MultiTexCoord3i)procAddress("glMultiTexCoord3i");  
bindings.multiTexCoord3iv = (GL_MultiTexCoord3iv)procAddress("glMultiTexCoord3iv");  
bindings.multiTexCoord3s = (GL_MultiTexCoord3s)procAddress("glMultiTexCoord3s");  
bindings.multiTexCoord3sv = (GL_MultiTexCoord3sv)procAddress("glMultiTexCoord3sv");  
bindings.multiTexCoord4d = (GL_MultiTexCoord4d)procAddress("glMultiTexCoord4d");  
bindings.multiTexCoord4dv = (GL_MultiTexCoord4dv)procAddress("glMultiTexCoord4dv");  
bindings.multiTexCoord4f = (GL_MultiTexCoord4f)procAddress("glMultiTexCoord4f");  
bindings.multiTexCoord4fv = (GL_MultiTexCoord4fv)procAddress("glMultiTexCoord4fv");  
bindings.multiTexCoord4i = (GL_MultiTexCoord4i)procAddress("glMultiTexCoord4i");  
bindings.multiTexCoord4iv = (GL_MultiTexCoord4iv)procAddress("glMultiTexCoord4iv");  
bindings.multiTexCoord4s = (GL_MultiTexCoord4s)procAddress("glMultiTexCoord4s");  
bindings.multiTexCoord4sv = (GL_MultiTexCoord4sv)procAddress("glMultiTexCoord4sv");  
bindings.multiTexCoordP1ui = (GL_MultiTexCoordP1ui)procAddress("glMultiTexCoordP1ui");  
bindings.multiTexCoordP1uiv = (GL_MultiTexCoordP1uiv)procAddress("glMultiTexCoordP1uiv");  
bindings.multiTexCoordP2ui = (GL_MultiTexCoordP2ui)procAddress("glMultiTexCoordP2ui");  
bindings.multiTexCoordP2uiv = (GL_MultiTexCoordP2uiv)procAddress("glMultiTexCoordP2uiv");  
bindings.multiTexCoordP3ui = (GL_MultiTexCoordP3ui)procAddress("glMultiTexCoordP3ui");  
bindings.multiTexCoordP3uiv = (GL_MultiTexCoordP3uiv)procAddress("glMultiTexCoordP3uiv");  
bindings.multiTexCoordP4ui = (GL_MultiTexCoordP4ui)procAddress("glMultiTexCoordP4ui");  
bindings.multiTexCoordP4uiv = (GL_MultiTexCoordP4uiv)procAddress("glMultiTexCoordP4uiv");  
bindings.namedBufferData = (GL_NamedBufferData)procAddress("glNamedBufferData");  
bindings.namedBufferStorage = (GL_NamedBufferStorage)procAddress("glNamedBufferStorage");  
bindings.namedBufferSubData = (GL_NamedBufferSubData)procAddress("glNamedBufferSubData");  
bindings.namedFramebufferDrawBuffer = (GL_NamedFramebufferDrawBuffer)procAddress("glNamedFramebufferDrawBuffer");  
bindings.namedFramebufferDrawBuffers = (GL_NamedFramebufferDrawBuffers)procAddress("glNamedFramebufferDrawBuffers");  
bindings.namedFramebufferParameteri = (GL_NamedFramebufferParameteri)procAddress("glNamedFramebufferParameteri");  
bindings.namedFramebufferReadBuffer = (GL_NamedFramebufferReadBuffer)procAddress("glNamedFramebufferReadBuffer");  
bindings.namedFramebufferRenderbuffer = (GL_NamedFramebufferRenderbuffer)procAddress("glNamedFramebufferRenderbuffer");  
bindings.namedFramebufferTexture = (GL_NamedFramebufferTexture)procAddress("glNamedFramebufferTexture");  
bindings.namedFramebufferTextureLayer = (GL_NamedFramebufferTextureLayer)procAddress("glNamedFramebufferTextureLayer");  
bindings.namedRenderbufferStorage = (GL_NamedRenderbufferStorage)procAddress("glNamedRenderbufferStorage");  
bindings.namedRenderbufferStorageMultisample = (GL_NamedRenderbufferStorageMultisample)procAddress("glNamedRenderbufferStorageMultisample");  
bindings.newList = (GL_NewList)procAddress("glNewList");  
bindings.normal3b = (GL_Normal3b)procAddress("glNormal3b");  
bindings.normal3bv = (GL_Normal3bv)procAddress("glNormal3bv");  
bindings.normal3d = (GL_Normal3d)procAddress("glNormal3d");  
bindings.normal3dv = (GL_Normal3dv)procAddress("glNormal3dv");  
bindings.normal3f = (GL_Normal3f)procAddress("glNormal3f");  
bindings.normal3fv = (GL_Normal3fv)procAddress("glNormal3fv");  
bindings.normal3i = (GL_Normal3i)procAddress("glNormal3i");  
bindings.normal3iv = (GL_Normal3iv)procAddress("glNormal3iv");  
bindings.normal3s = (GL_Normal3s)procAddress("glNormal3s");  
bindings.normal3sv = (GL_Normal3sv)procAddress("glNormal3sv");  
bindings.normalP3ui = (GL_NormalP3ui)procAddress("glNormalP3ui");  
bindings.normalP3uiv = (GL_NormalP3uiv)procAddress("glNormalP3uiv");  
bindings.normalPointer = (GL_NormalPointer)procAddress("glNormalPointer");  
bindings.objectLabel = (GL_ObjectLabel)procAddress("glObjectLabel");  
bindings.objectPtrLabel = (GL_ObjectPtrLabel)procAddress("glObjectPtrLabel");  
bindings.ortho = (GL_Ortho)procAddress("glOrtho");  
bindings.passThrough = (GL_PassThrough)procAddress("glPassThrough");  
bindings.patchParameterfv = (GL_PatchParameterfv)procAddress("glPatchParameterfv");  
bindings.patchParameteri = (GL_PatchParameteri)procAddress("glPatchParameteri");  
bindings.pauseTransformFeedback = (GL_PauseTransformFeedback)procAddress("glPauseTransformFeedback");  
bindings.pixelMapfv = (GL_PixelMapfv)procAddress("glPixelMapfv");  
bindings.pixelMapuiv = (GL_PixelMapuiv)procAddress("glPixelMapuiv");  
bindings.pixelMapusv = (GL_PixelMapusv)procAddress("glPixelMapusv");  
bindings.pixelStoref = (GL_PixelStoref)procAddress("glPixelStoref");  
bindings.pixelStorei = (GL_PixelStorei)procAddress("glPixelStorei");  
bindings.pixelTransferf = (GL_PixelTransferf)procAddress("glPixelTransferf");  
bindings.pixelTransferi = (GL_PixelTransferi)procAddress("glPixelTransferi");  
bindings.pixelZoom = (GL_PixelZoom)procAddress("glPixelZoom");  
bindings.pointSize = (GL_PointSize)procAddress("glPointSize");  
bindings.polygonMode = (GL_PolygonMode)procAddress("glPolygonMode");  
bindings.polygonOffset = (GL_PolygonOffset)procAddress("glPolygonOffset");  
bindings.polygonOffsetClamp = (GL_PolygonOffsetClamp)procAddress("glPolygonOffsetClamp");  
bindings.polygonStipple = (GL_PolygonStipple)procAddress("glPolygonStipple");  
bindings.popAttrib = (GL_PopAttrib)procAddress("glPopAttrib");  
bindings.popClientAttrib = (GL_PopClientAttrib)procAddress("glPopClientAttrib");  
bindings.popDebugGroup = (GL_PopDebugGroup)procAddress("glPopDebugGroup");  
bindings.popMatrix = (GL_PopMatrix)procAddress("glPopMatrix");  
bindings.popName = (GL_PopName)procAddress("glPopName");  
bindings.primitiveRestartIndex = (GL_PrimitiveRestartIndex)procAddress("glPrimitiveRestartIndex");  
bindings.prioritizeTextures = (GL_PrioritizeTextures)procAddress("glPrioritizeTextures");  
bindings.programBinary = (GL_ProgramBinary)procAddress("glProgramBinary");  
bindings.programParameteri = (GL_ProgramParameteri)procAddress("glProgramParameteri");  
bindings.programUniform1d = (GL_ProgramUniform1d)procAddress("glProgramUniform1d");  
bindings.programUniform1dv = (GL_ProgramUniform1dv)procAddress("glProgramUniform1dv");  
bindings.programUniform1f = (GL_ProgramUniform1f)procAddress("glProgramUniform1f");  
bindings.programUniform1fv = (GL_ProgramUniform1fv)procAddress("glProgramUniform1fv");  
bindings.programUniform1i = (GL_ProgramUniform1i)procAddress("glProgramUniform1i");  
bindings.programUniform1iv = (GL_ProgramUniform1iv)procAddress("glProgramUniform1iv");  
bindings.programUniform1ui = (GL_ProgramUniform1ui)procAddress("glProgramUniform1ui");  
bindings.programUniform1uiv = (GL_ProgramUniform1uiv)procAddress("glProgramUniform1uiv");  
bindings.programUniform2d = (GL_ProgramUniform2d)procAddress("glProgramUniform2d");  
bindings.programUniform2dv = (GL_ProgramUniform2dv)procAddress("glProgramUniform2dv");  
bindings.programUniform2f = (GL_ProgramUniform2f)procAddress("glProgramUniform2f");  
bindings.programUniform2fv = (GL_ProgramUniform2fv)procAddress("glProgramUniform2fv");  
bindings.programUniform2i = (GL_ProgramUniform2i)procAddress("glProgramUniform2i");  
bindings.programUniform2iv = (GL_ProgramUniform2iv)procAddress("glProgramUniform2iv");  
bindings.programUniform2ui = (GL_ProgramUniform2ui)procAddress("glProgramUniform2ui");  
bindings.programUniform2uiv = (GL_ProgramUniform2uiv)procAddress("glProgramUniform2uiv");  
bindings.programUniform3d = (GL_ProgramUniform3d)procAddress("glProgramUniform3d");  
bindings.programUniform3dv = (GL_ProgramUniform3dv)procAddress("glProgramUniform3dv");  
bindings.programUniform3f = (GL_ProgramUniform3f)procAddress("glProgramUniform3f");  
bindings.programUniform3fv = (GL_ProgramUniform3fv)procAddress("glProgramUniform3fv");  
bindings.programUniform3i = (GL_ProgramUniform3i)procAddress("glProgramUniform3i");  
bindings.programUniform3iv = (GL_ProgramUniform3iv)procAddress("glProgramUniform3iv");  
bindings.programUniform3ui = (GL_ProgramUniform3ui)procAddress("glProgramUniform3ui");  
bindings.programUniform3uiv = (GL_ProgramUniform3uiv)procAddress("glProgramUniform3uiv");  
bindings.programUniform4d = (GL_ProgramUniform4d)procAddress("glProgramUniform4d");  
bindings.programUniform4dv = (GL_ProgramUniform4dv)procAddress("glProgramUniform4dv");  
bindings.programUniform4f = (GL_ProgramUniform4f)procAddress("glProgramUniform4f");  
bindings.programUniform4fv = (GL_ProgramUniform4fv)procAddress("glProgramUniform4fv");  
bindings.programUniform4i = (GL_ProgramUniform4i)procAddress("glProgramUniform4i");  
bindings.programUniform4iv = (GL_ProgramUniform4iv)procAddress("glProgramUniform4iv");  
bindings.programUniform4ui = (GL_ProgramUniform4ui)procAddress("glProgramUniform4ui");  
bindings.programUniform4uiv = (GL_ProgramUniform4uiv)procAddress("glProgramUniform4uiv");  
bindings.programUniformMatrix2dv = (GL_ProgramUniformMatrix2dv)procAddress("glProgramUniformMatrix2dv");  
bindings.programUniformMatrix2fv = (GL_ProgramUniformMatrix2fv)procAddress("glProgramUniformMatrix2fv");  
bindings.programUniformMatrix2x3dv = (GL_ProgramUniformMatrix2x3dv)procAddress("glProgramUniformMatrix2x3dv");  
bindings.programUniformMatrix2x3fv = (GL_ProgramUniformMatrix2x3fv)procAddress("glProgramUniformMatrix2x3fv");  
bindings.programUniformMatrix2x4dv = (GL_ProgramUniformMatrix2x4dv)procAddress("glProgramUniformMatrix2x4dv");  
bindings.programUniformMatrix2x4fv = (GL_ProgramUniformMatrix2x4fv)procAddress("glProgramUniformMatrix2x4fv");  
bindings.programUniformMatrix3dv = (GL_ProgramUniformMatrix3dv)procAddress("glProgramUniformMatrix3dv");  
bindings.programUniformMatrix3fv = (GL_ProgramUniformMatrix3fv)procAddress("glProgramUniformMatrix3fv");  
bindings.programUniformMatrix3x2dv = (GL_ProgramUniformMatrix3x2dv)procAddress("glProgramUniformMatrix3x2dv");  
bindings.programUniformMatrix3x2fv = (GL_ProgramUniformMatrix3x2fv)procAddress("glProgramUniformMatrix3x2fv");  
bindings.programUniformMatrix3x4dv = (GL_ProgramUniformMatrix3x4dv)procAddress("glProgramUniformMatrix3x4dv");  
bindings.programUniformMatrix3x4fv = (GL_ProgramUniformMatrix3x4fv)procAddress("glProgramUniformMatrix3x4fv");  
bindings.programUniformMatrix4dv = (GL_ProgramUniformMatrix4dv)procAddress("glProgramUniformMatrix4dv");  
bindings.programUniformMatrix4fv = (GL_ProgramUniformMatrix4fv)procAddress("glProgramUniformMatrix4fv");  
bindings.programUniformMatrix4x2dv = (GL_ProgramUniformMatrix4x2dv)procAddress("glProgramUniformMatrix4x2dv");  
bindings.programUniformMatrix4x2fv = (GL_ProgramUniformMatrix4x2fv)procAddress("glProgramUniformMatrix4x2fv");  
bindings.programUniformMatrix4x3dv = (GL_ProgramUniformMatrix4x3dv)procAddress("glProgramUniformMatrix4x3dv");  
bindings.programUniformMatrix4x3fv = (GL_ProgramUniformMatrix4x3fv)procAddress("glProgramUniformMatrix4x3fv");  
bindings.provokingVertex = (GL_ProvokingVertex)procAddress("glProvokingVertex");  
bindings.pushAttrib = (GL_PushAttrib)procAddress("glPushAttrib");  
bindings.pushClientAttrib = (GL_PushClientAttrib)procAddress("glPushClientAttrib");  
bindings.pushDebugGroup = (GL_PushDebugGroup)procAddress("glPushDebugGroup");  
bindings.pushMatrix = (GL_PushMatrix)procAddress("glPushMatrix");  
bindings.pushName = (GL_PushName)procAddress("glPushName");  
bindings.queryCounter = (GL_QueryCounter)procAddress("glQueryCounter");  
bindings.rasterPos2d = (GL_RasterPos2d)procAddress("glRasterPos2d");  
bindings.rasterPos2dv = (GL_RasterPos2dv)procAddress("glRasterPos2dv");  
bindings.rasterPos2f = (GL_RasterPos2f)procAddress("glRasterPos2f");  
bindings.rasterPos2fv = (GL_RasterPos2fv)procAddress("glRasterPos2fv");  
bindings.rasterPos2i = (GL_RasterPos2i)procAddress("glRasterPos2i");  
bindings.rasterPos2iv = (GL_RasterPos2iv)procAddress("glRasterPos2iv");  
bindings.rasterPos2s = (GL_RasterPos2s)procAddress("glRasterPos2s");  
bindings.rasterPos2sv = (GL_RasterPos2sv)procAddress("glRasterPos2sv");  
bindings.rasterPos3d = (GL_RasterPos3d)procAddress("glRasterPos3d");  
bindings.rasterPos3dv = (GL_RasterPos3dv)procAddress("glRasterPos3dv");  
bindings.rasterPos3f = (GL_RasterPos3f)procAddress("glRasterPos3f");  
bindings.rasterPos3fv = (GL_RasterPos3fv)procAddress("glRasterPos3fv");  
bindings.rasterPos3i = (GL_RasterPos3i)procAddress("glRasterPos3i");  
bindings.rasterPos3iv = (GL_RasterPos3iv)procAddress("glRasterPos3iv");  
bindings.rasterPos3s = (GL_RasterPos3s)procAddress("glRasterPos3s");  
bindings.rasterPos3sv = (GL_RasterPos3sv)procAddress("glRasterPos3sv");  
bindings.rasterPos4d = (GL_RasterPos4d)procAddress("glRasterPos4d");  
bindings.rasterPos4dv = (GL_RasterPos4dv)procAddress("glRasterPos4dv");  
bindings.rasterPos4f = (GL_RasterPos4f)procAddress("glRasterPos4f");  
bindings.rasterPos4fv = (GL_RasterPos4fv)procAddress("glRasterPos4fv");  
bindings.rasterPos4i = (GL_RasterPos4i)procAddress("glRasterPos4i");  
bindings.rasterPos4iv = (GL_RasterPos4iv)procAddress("glRasterPos4iv");  
bindings.rasterPos4s = (GL_RasterPos4s)procAddress("glRasterPos4s");  
bindings.rasterPos4sv = (GL_RasterPos4sv)procAddress("glRasterPos4sv");  
bindings.readBuffer = (GL_ReadBuffer)procAddress("glReadBuffer");  
bindings.readPixels = (GL_ReadPixels)procAddress("glReadPixels");  
bindings.readnPixels = (GL_ReadnPixels)procAddress("glReadnPixels");  
bindings.rectd = (GL_Rectd)procAddress("glRectd");  
bindings.rectdv = (GL_Rectdv)procAddress("glRectdv");  
bindings.rectf = (GL_Rectf)procAddress("glRectf");  
bindings.rectfv = (GL_Rectfv)procAddress("glRectfv");  
bindings.recti = (GL_Recti)procAddress("glRecti");  
bindings.rectiv = (GL_Rectiv)procAddress("glRectiv");  
bindings.rects = (GL_Rects)procAddress("glRects");  
bindings.rectsv = (GL_Rectsv)procAddress("glRectsv");  
bindings.releaseShaderCompiler = (GL_ReleaseShaderCompiler)procAddress("glReleaseShaderCompiler");  
bindings.renderMode = (GL_RenderMode)procAddress("glRenderMode");  
bindings.renderbufferStorage = (GL_RenderbufferStorage)procAddress("glRenderbufferStorage");  
bindings.renderbufferStorageMultisample = (GL_RenderbufferStorageMultisample)procAddress("glRenderbufferStorageMultisample");  
bindings.resumeTransformFeedback = (GL_ResumeTransformFeedback)procAddress("glResumeTransformFeedback");  
bindings.rotated = (GL_Rotated)procAddress("glRotated");  
bindings.rotatef = (GL_Rotatef)procAddress("glRotatef");  
bindings.sampleMaski = (GL_SampleMaski)procAddress("glSampleMaski");  
bindings.samplerParameterIiv = (GL_SamplerParameterIiv)procAddress("glSamplerParameterIiv");  
bindings.samplerParameterIuiv = (GL_SamplerParameterIuiv)procAddress("glSamplerParameterIuiv");  
bindings.samplerParameterf = (GL_SamplerParameterf)procAddress("glSamplerParameterf");  
bindings.samplerParameterfv = (GL_SamplerParameterfv)procAddress("glSamplerParameterfv");  
bindings.samplerParameteri = (GL_SamplerParameteri)procAddress("glSamplerParameteri");  
bindings.samplerParameteriv = (GL_SamplerParameteriv)procAddress("glSamplerParameteriv");  
bindings.scaled = (GL_Scaled)procAddress("glScaled");  
bindings.scalef = (GL_Scalef)procAddress("glScalef");  
bindings.scissor = (GL_Scissor)procAddress("glScissor");  
bindings.scissorArrayv = (GL_ScissorArrayv)procAddress("glScissorArrayv");  
bindings.scissorIndexed = (GL_ScissorIndexed)procAddress("glScissorIndexed");  
bindings.scissorIndexedv = (GL_ScissorIndexedv)procAddress("glScissorIndexedv");  
bindings.secondaryColor3b = (GL_SecondaryColor3b)procAddress("glSecondaryColor3b");  
bindings.secondaryColor3bv = (GL_SecondaryColor3bv)procAddress("glSecondaryColor3bv");  
bindings.secondaryColor3d = (GL_SecondaryColor3d)procAddress("glSecondaryColor3d");  
bindings.secondaryColor3dv = (GL_SecondaryColor3dv)procAddress("glSecondaryColor3dv");  
bindings.secondaryColor3f = (GL_SecondaryColor3f)procAddress("glSecondaryColor3f");  
bindings.secondaryColor3fv = (GL_SecondaryColor3fv)procAddress("glSecondaryColor3fv");  
bindings.secondaryColor3i = (GL_SecondaryColor3i)procAddress("glSecondaryColor3i");  
bindings.secondaryColor3iv = (GL_SecondaryColor3iv)procAddress("glSecondaryColor3iv");  
bindings.secondaryColor3s = (GL_SecondaryColor3s)procAddress("glSecondaryColor3s");  
bindings.secondaryColor3sv = (GL_SecondaryColor3sv)procAddress("glSecondaryColor3sv");  
bindings.secondaryColor3ub = (GL_SecondaryColor3ub)procAddress("glSecondaryColor3ub");  
bindings.secondaryColor3ubv = (GL_SecondaryColor3ubv)procAddress("glSecondaryColor3ubv");  
bindings.secondaryColor3ui = (GL_SecondaryColor3ui)procAddress("glSecondaryColor3ui");  
bindings.secondaryColor3uiv = (GL_SecondaryColor3uiv)procAddress("glSecondaryColor3uiv");  
bindings.secondaryColor3us = (GL_SecondaryColor3us)procAddress("glSecondaryColor3us");  
bindings.secondaryColor3usv = (GL_SecondaryColor3usv)procAddress("glSecondaryColor3usv");  
bindings.secondaryColorP3ui = (GL_SecondaryColorP3ui)procAddress("glSecondaryColorP3ui");  
bindings.secondaryColorP3uiv = (GL_SecondaryColorP3uiv)procAddress("glSecondaryColorP3uiv");  
bindings.secondaryColorPointer = (GL_SecondaryColorPointer)procAddress("glSecondaryColorPointer");  
bindings.selectBuffer = (GL_SelectBuffer)procAddress("glSelectBuffer");  
bindings.shadeModel = (GL_ShadeModel)procAddress("glShadeModel");  
bindings.shaderBinary = (GL_ShaderBinary)procAddress("glShaderBinary");  
bindings.shaderSource = (GL_ShaderSource)procAddress("glShaderSource");  
bindings.shaderStorageBlockBinding = (GL_ShaderStorageBlockBinding)procAddress("glShaderStorageBlockBinding");  
bindings.specializeShader = (GL_SpecializeShader)procAddress("glSpecializeShader");  
bindings.stencilFunc = (GL_StencilFunc)procAddress("glStencilFunc");  
bindings.stencilFuncSeparate = (GL_StencilFuncSeparate)procAddress("glStencilFuncSeparate");  
bindings.stencilMask = (GL_StencilMask)procAddress("glStencilMask");  
bindings.stencilMaskSeparate = (GL_StencilMaskSeparate)procAddress("glStencilMaskSeparate");  
bindings.stencilOp = (GL_StencilOp)procAddress("glStencilOp");  
bindings.stencilOpSeparate = (GL_StencilOpSeparate)procAddress("glStencilOpSeparate");  
bindings.texBuffer = (GL_TexBuffer)procAddress("glTexBuffer");  
bindings.texBufferRange = (GL_TexBufferRange)procAddress("glTexBufferRange");  
bindings.texCoord1d = (GL_TexCoord1d)procAddress("glTexCoord1d");  
bindings.texCoord1dv = (GL_TexCoord1dv)procAddress("glTexCoord1dv");  
bindings.texCoord1f = (GL_TexCoord1f)procAddress("glTexCoord1f");  
bindings.texCoord1fv = (GL_TexCoord1fv)procAddress("glTexCoord1fv");  
bindings.texCoord1i = (GL_TexCoord1i)procAddress("glTexCoord1i");  
bindings.texCoord1iv = (GL_TexCoord1iv)procAddress("glTexCoord1iv");  
bindings.texCoord1s = (GL_TexCoord1s)procAddress("glTexCoord1s");  
bindings.texCoord1sv = (GL_TexCoord1sv)procAddress("glTexCoord1sv");  
bindings.texCoord2d = (GL_TexCoord2d)procAddress("glTexCoord2d");  
bindings.texCoord2dv = (GL_TexCoord2dv)procAddress("glTexCoord2dv");  
bindings.texCoord2f = (GL_TexCoord2f)procAddress("glTexCoord2f");  
bindings.texCoord2fv = (GL_TexCoord2fv)procAddress("glTexCoord2fv");  
bindings.texCoord2i = (GL_TexCoord2i)procAddress("glTexCoord2i");  
bindings.texCoord2iv = (GL_TexCoord2iv)procAddress("glTexCoord2iv");  
bindings.texCoord2s = (GL_TexCoord2s)procAddress("glTexCoord2s");  
bindings.texCoord2sv = (GL_TexCoord2sv)procAddress("glTexCoord2sv");  
bindings.texCoord3d = (GL_TexCoord3d)procAddress("glTexCoord3d");  
bindings.texCoord3dv = (GL_TexCoord3dv)procAddress("glTexCoord3dv");  
bindings.texCoord3f = (GL_TexCoord3f)procAddress("glTexCoord3f");  
bindings.texCoord3fv = (GL_TexCoord3fv)procAddress("glTexCoord3fv");  
bindings.texCoord3i = (GL_TexCoord3i)procAddress("glTexCoord3i");  
bindings.texCoord3iv = (GL_TexCoord3iv)procAddress("glTexCoord3iv");  
bindings.texCoord3s = (GL_TexCoord3s)procAddress("glTexCoord3s");  
bindings.texCoord3sv = (GL_TexCoord3sv)procAddress("glTexCoord3sv");  
bindings.texCoord4d = (GL_TexCoord4d)procAddress("glTexCoord4d");  
bindings.texCoord4dv = (GL_TexCoord4dv)procAddress("glTexCoord4dv");  
bindings.texCoord4f = (GL_TexCoord4f)procAddress("glTexCoord4f");  
bindings.texCoord4fv = (GL_TexCoord4fv)procAddress("glTexCoord4fv");  
bindings.texCoord4i = (GL_TexCoord4i)procAddress("glTexCoord4i");  
bindings.texCoord4iv = (GL_TexCoord4iv)procAddress("glTexCoord4iv");  
bindings.texCoord4s = (GL_TexCoord4s)procAddress("glTexCoord4s");  
bindings.texCoord4sv = (GL_TexCoord4sv)procAddress("glTexCoord4sv");  
bindings.texCoordP1ui = (GL_TexCoordP1ui)procAddress("glTexCoordP1ui");  
bindings.texCoordP1uiv = (GL_TexCoordP1uiv)procAddress("glTexCoordP1uiv");  
bindings.texCoordP2ui = (GL_TexCoordP2ui)procAddress("glTexCoordP2ui");  
bindings.texCoordP2uiv = (GL_TexCoordP2uiv)procAddress("glTexCoordP2uiv");  
bindings.texCoordP3ui = (GL_TexCoordP3ui)procAddress("glTexCoordP3ui");  
bindings.texCoordP3uiv = (GL_TexCoordP3uiv)procAddress("glTexCoordP3uiv");  
bindings.texCoordP4ui = (GL_TexCoordP4ui)procAddress("glTexCoordP4ui");  
bindings.texCoordP4uiv = (GL_TexCoordP4uiv)procAddress("glTexCoordP4uiv");  
bindings.texCoordPointer = (GL_TexCoordPointer)procAddress("glTexCoordPointer");  
bindings.texEnvf = (GL_TexEnvf)procAddress("glTexEnvf");  
bindings.texEnvfv = (GL_TexEnvfv)procAddress("glTexEnvfv");  
bindings.texEnvi = (GL_TexEnvi)procAddress("glTexEnvi");  
bindings.texEnviv = (GL_TexEnviv)procAddress("glTexEnviv");  
bindings.texGend = (GL_TexGend)procAddress("glTexGend");  
bindings.texGendv = (GL_TexGendv)procAddress("glTexGendv");  
bindings.texGenf = (GL_TexGenf)procAddress("glTexGenf");  
bindings.texGenfv = (GL_TexGenfv)procAddress("glTexGenfv");  
bindings.texGeni = (GL_TexGeni)procAddress("glTexGeni");  
bindings.texGeniv = (GL_TexGeniv)procAddress("glTexGeniv");  
bindings.texImage1D = (GL_TexImage1D)procAddress("glTexImage1D");  
bindings.texImage2D = (GL_TexImage2D)procAddress("glTexImage2D");  
bindings.texImage2DMultisample = (GL_TexImage2DMultisample)procAddress("glTexImage2DMultisample");  
bindings.texImage3DMultisample = (GL_TexImage3DMultisample)procAddress("glTexImage3DMultisample");  
bindings.texParameterIiv = (GL_TexParameterIiv)procAddress("glTexParameterIiv");  
bindings.texParameterIuiv = (GL_TexParameterIuiv)procAddress("glTexParameterIuiv");  
bindings.texParameterf = (GL_TexParameterf)procAddress("glTexParameterf");  
bindings.texParameterfv = (GL_TexParameterfv)procAddress("glTexParameterfv");  
bindings.texParameteri = (GL_TexParameteri)procAddress("glTexParameteri");  
bindings.texParameteriv = (GL_TexParameteriv)procAddress("glTexParameteriv");  
bindings.texStorage1D = (GL_TexStorage1D)procAddress("glTexStorage1D");  
bindings.texStorage2D = (GL_TexStorage2D)procAddress("glTexStorage2D");  
bindings.texStorage2DMultisample = (GL_TexStorage2DMultisample)procAddress("glTexStorage2DMultisample");  
bindings.texStorage3D = (GL_TexStorage3D)procAddress("glTexStorage3D");  
bindings.texStorage3DMultisample = (GL_TexStorage3DMultisample)procAddress("glTexStorage3DMultisample");  
bindings.texSubImage1D = (GL_TexSubImage1D)procAddress("glTexSubImage1D");  
bindings.texSubImage2D = (GL_TexSubImage2D)procAddress("glTexSubImage2D");  
bindings.textureBarrier = (GL_TextureBarrier)procAddress("glTextureBarrier");  
bindings.textureBuffer = (GL_TextureBuffer)procAddress("glTextureBuffer");  
bindings.textureBufferRange = (GL_TextureBufferRange)procAddress("glTextureBufferRange");  
bindings.textureParameterIiv = (GL_TextureParameterIiv)procAddress("glTextureParameterIiv");  
bindings.textureParameterIuiv = (GL_TextureParameterIuiv)procAddress("glTextureParameterIuiv");  
bindings.textureParameterf = (GL_TextureParameterf)procAddress("glTextureParameterf");  
bindings.textureParameterfv = (GL_TextureParameterfv)procAddress("glTextureParameterfv");  
bindings.textureParameteri = (GL_TextureParameteri)procAddress("glTextureParameteri");  
bindings.textureParameteriv = (GL_TextureParameteriv)procAddress("glTextureParameteriv");  
bindings.textureStorage1D = (GL_TextureStorage1D)procAddress("glTextureStorage1D");  
bindings.textureStorage2D = (GL_TextureStorage2D)procAddress("glTextureStorage2D");  
bindings.textureStorage2DMultisample = (GL_TextureStorage2DMultisample)procAddress("glTextureStorage2DMultisample");  
bindings.textureStorage3D = (GL_TextureStorage3D)procAddress("glTextureStorage3D");  
bindings.textureStorage3DMultisample = (GL_TextureStorage3DMultisample)procAddress("glTextureStorage3DMultisample");  
bindings.textureSubImage1D = (GL_TextureSubImage1D)procAddress("glTextureSubImage1D");  
bindings.textureSubImage2D = (GL_TextureSubImage2D)procAddress("glTextureSubImage2D");  
bindings.textureSubImage3D = (GL_TextureSubImage3D)procAddress("glTextureSubImage3D");  
bindings.textureView = (GL_TextureView)procAddress("glTextureView");  
bindings.transformFeedbackBufferBase = (GL_TransformFeedbackBufferBase)procAddress("glTransformFeedbackBufferBase");  
bindings.transformFeedbackBufferRange = (GL_TransformFeedbackBufferRange)procAddress("glTransformFeedbackBufferRange");  
bindings.transformFeedbackVaryings = (GL_TransformFeedbackVaryings)procAddress("glTransformFeedbackVaryings");  
bindings.translated = (GL_Translated)procAddress("glTranslated");  
bindings.translatef = (GL_Translatef)procAddress("glTranslatef");  
bindings.uniform1d = (GL_Uniform1d)procAddress("glUniform1d");  
bindings.uniform1dv = (GL_Uniform1dv)procAddress("glUniform1dv");  
bindings.uniform1f = (GL_Uniform1f)procAddress("glUniform1f");  
bindings.uniform1fv = (GL_Uniform1fv)procAddress("glUniform1fv");  
bindings.uniform1i = (GL_Uniform1i)procAddress("glUniform1i");  
bindings.uniform1iv = (GL_Uniform1iv)procAddress("glUniform1iv");  
bindings.uniform1ui = (GL_Uniform1ui)procAddress("glUniform1ui");  
bindings.uniform1uiv = (GL_Uniform1uiv)procAddress("glUniform1uiv");  
bindings.uniform2d = (GL_Uniform2d)procAddress("glUniform2d");  
bindings.uniform2dv = (GL_Uniform2dv)procAddress("glUniform2dv");  
bindings.uniform2f = (GL_Uniform2f)procAddress("glUniform2f");  
bindings.uniform2fv = (GL_Uniform2fv)procAddress("glUniform2fv");  
bindings.uniform2i = (GL_Uniform2i)procAddress("glUniform2i");  
bindings.uniform2iv = (GL_Uniform2iv)procAddress("glUniform2iv");  
bindings.uniform2ui = (GL_Uniform2ui)procAddress("glUniform2ui");  
bindings.uniform2uiv = (GL_Uniform2uiv)procAddress("glUniform2uiv");  
bindings.uniform3d = (GL_Uniform3d)procAddress("glUniform3d");  
bindings.uniform3dv = (GL_Uniform3dv)procAddress("glUniform3dv");  
bindings.uniform3f = (GL_Uniform3f)procAddress("glUniform3f");  
bindings.uniform3fv = (GL_Uniform3fv)procAddress("glUniform3fv");  
bindings.uniform3i = (GL_Uniform3i)procAddress("glUniform3i");  
bindings.uniform3iv = (GL_Uniform3iv)procAddress("glUniform3iv");  
bindings.uniform3ui = (GL_Uniform3ui)procAddress("glUniform3ui");  
bindings.uniform3uiv = (GL_Uniform3uiv)procAddress("glUniform3uiv");  
bindings.uniform4d = (GL_Uniform4d)procAddress("glUniform4d");  
bindings.uniform4dv = (GL_Uniform4dv)procAddress("glUniform4dv");  
bindings.uniform4f = (GL_Uniform4f)procAddress("glUniform4f");  
bindings.uniform4fv = (GL_Uniform4fv)procAddress("glUniform4fv");  
bindings.uniform4i = (GL_Uniform4i)procAddress("glUniform4i");  
bindings.uniform4iv = (GL_Uniform4iv)procAddress("glUniform4iv");  
bindings.uniform4ui = (GL_Uniform4ui)procAddress("glUniform4ui");  
bindings.uniform4uiv = (GL_Uniform4uiv)procAddress("glUniform4uiv");  
bindings.uniformBlockBinding = (GL_UniformBlockBinding)procAddress("glUniformBlockBinding");  
bindings.uniformMatrix2dv = (GL_UniformMatrix2dv)procAddress("glUniformMatrix2dv");  
bindings.uniformMatrix2fv = (GL_UniformMatrix2fv)procAddress("glUniformMatrix2fv");  
bindings.uniformMatrix2x3dv = (GL_UniformMatrix2x3dv)procAddress("glUniformMatrix2x3dv");  
bindings.uniformMatrix2x3fv = (GL_UniformMatrix2x3fv)procAddress("glUniformMatrix2x3fv");  
bindings.uniformMatrix2x4dv = (GL_UniformMatrix2x4dv)procAddress("glUniformMatrix2x4dv");  
bindings.uniformMatrix2x4fv = (GL_UniformMatrix2x4fv)procAddress("glUniformMatrix2x4fv");  
bindings.uniformMatrix3dv = (GL_UniformMatrix3dv)procAddress("glUniformMatrix3dv");  
bindings.uniformMatrix3fv = (GL_UniformMatrix3fv)procAddress("glUniformMatrix3fv");  
bindings.uniformMatrix3x2dv = (GL_UniformMatrix3x2dv)procAddress("glUniformMatrix3x2dv");  
bindings.uniformMatrix3x2fv = (GL_UniformMatrix3x2fv)procAddress("glUniformMatrix3x2fv");  
bindings.uniformMatrix3x4dv = (GL_UniformMatrix3x4dv)procAddress("glUniformMatrix3x4dv");  
bindings.uniformMatrix3x4fv = (GL_UniformMatrix3x4fv)procAddress("glUniformMatrix3x4fv");  
bindings.uniformMatrix4dv = (GL_UniformMatrix4dv)procAddress("glUniformMatrix4dv");  
bindings.uniformMatrix4fv = (GL_UniformMatrix4fv)procAddress("glUniformMatrix4fv");  
bindings.uniformMatrix4x2dv = (GL_UniformMatrix4x2dv)procAddress("glUniformMatrix4x2dv");  
bindings.uniformMatrix4x2fv = (GL_UniformMatrix4x2fv)procAddress("glUniformMatrix4x2fv");  
bindings.uniformMatrix4x3dv = (GL_UniformMatrix4x3dv)procAddress("glUniformMatrix4x3dv");  
bindings.uniformMatrix4x3fv = (GL_UniformMatrix4x3fv)procAddress("glUniformMatrix4x3fv");  
bindings.uniformSubroutinesuiv = (GL_UniformSubroutinesuiv)procAddress("glUniformSubroutinesuiv");  
bindings.unmapBuffer = (GL_UnmapBuffer)procAddress("glUnmapBuffer");  
bindings.unmapNamedBuffer = (GL_UnmapNamedBuffer)procAddress("glUnmapNamedBuffer");  
bindings.useProgram = (GL_UseProgram)procAddress("glUseProgram");  
bindings.useProgramStages = (GL_UseProgramStages)procAddress("glUseProgramStages");  
bindings.validateProgram = (GL_ValidateProgram)procAddress("glValidateProgram");  
bindings.validateProgramPipeline = (GL_ValidateProgramPipeline)procAddress("glValidateProgramPipeline");  
bindings.vertex2d = (GL_Vertex2d)procAddress("glVertex2d");  
bindings.vertex2dv = (GL_Vertex2dv)procAddress("glVertex2dv");  
bindings.vertex2f = (GL_Vertex2f)procAddress("glVertex2f");  
bindings.vertex2fv = (GL_Vertex2fv)procAddress("glVertex2fv");  
bindings.vertex2i = (GL_Vertex2i)procAddress("glVertex2i");  
bindings.vertex2iv = (GL_Vertex2iv)procAddress("glVertex2iv");  
bindings.vertex2s = (GL_Vertex2s)procAddress("glVertex2s");  
bindings.vertex2sv = (GL_Vertex2sv)procAddress("glVertex2sv");  
bindings.vertex3d = (GL_Vertex3d)procAddress("glVertex3d");  
bindings.vertex3dv = (GL_Vertex3dv)procAddress("glVertex3dv");  
bindings.vertex3f = (GL_Vertex3f)procAddress("glVertex3f");  
bindings.vertex3fv = (GL_Vertex3fv)procAddress("glVertex3fv");  
bindings.vertex3i = (GL_Vertex3i)procAddress("glVertex3i");  
bindings.vertex3iv = (GL_Vertex3iv)procAddress("glVertex3iv");  
bindings.vertex3s = (GL_Vertex3s)procAddress("glVertex3s");  
bindings.vertex3sv = (GL_Vertex3sv)procAddress("glVertex3sv");  
bindings.vertex4d = (GL_Vertex4d)procAddress("glVertex4d");  
bindings.vertex4dv = (GL_Vertex4dv)procAddress("glVertex4dv");  
bindings.vertex4f = (GL_Vertex4f)procAddress("glVertex4f");  
bindings.vertex4fv = (GL_Vertex4fv)procAddress("glVertex4fv");  
bindings.vertex4i = (GL_Vertex4i)procAddress("glVertex4i");  
bindings.vertex4iv = (GL_Vertex4iv)procAddress("glVertex4iv");  
bindings.vertex4s = (GL_Vertex4s)procAddress("glVertex4s");  
bindings.vertex4sv = (GL_Vertex4sv)procAddress("glVertex4sv");  
bindings.vertexArrayAttribBinding = (GL_VertexArrayAttribBinding)procAddress("glVertexArrayAttribBinding");  
bindings.vertexArrayAttribFormat = (GL_VertexArrayAttribFormat)procAddress("glVertexArrayAttribFormat");  
bindings.vertexArrayAttribIFormat = (GL_VertexArrayAttribIFormat)procAddress("glVertexArrayAttribIFormat");  
bindings.vertexArrayAttribLFormat = (GL_VertexArrayAttribLFormat)procAddress("glVertexArrayAttribLFormat");  
bindings.vertexArrayBindingDivisor = (GL_VertexArrayBindingDivisor)procAddress("glVertexArrayBindingDivisor");  
bindings.vertexArrayElementBuffer = (GL_VertexArrayElementBuffer)procAddress("glVertexArrayElementBuffer");  
bindings.vertexArrayVertexBuffer = (GL_VertexArrayVertexBuffer)procAddress("glVertexArrayVertexBuffer");  
bindings.vertexArrayVertexBuffers = (GL_VertexArrayVertexBuffers)procAddress("glVertexArrayVertexBuffers");  
bindings.vertexAttrib1d = (GL_VertexAttrib1d)procAddress("glVertexAttrib1d");  
bindings.vertexAttrib1dv = (GL_VertexAttrib1dv)procAddress("glVertexAttrib1dv");  
bindings.vertexAttrib1f = (GL_VertexAttrib1f)procAddress("glVertexAttrib1f");  
bindings.vertexAttrib1fv = (GL_VertexAttrib1fv)procAddress("glVertexAttrib1fv");  
bindings.vertexAttrib1s = (GL_VertexAttrib1s)procAddress("glVertexAttrib1s");  
bindings.vertexAttrib1sv = (GL_VertexAttrib1sv)procAddress("glVertexAttrib1sv");  
bindings.vertexAttrib2d = (GL_VertexAttrib2d)procAddress("glVertexAttrib2d");  
bindings.vertexAttrib2dv = (GL_VertexAttrib2dv)procAddress("glVertexAttrib2dv");  
bindings.vertexAttrib2f = (GL_VertexAttrib2f)procAddress("glVertexAttrib2f");  
bindings.vertexAttrib2fv = (GL_VertexAttrib2fv)procAddress("glVertexAttrib2fv");  
bindings.vertexAttrib2s = (GL_VertexAttrib2s)procAddress("glVertexAttrib2s");  
bindings.vertexAttrib2sv = (GL_VertexAttrib2sv)procAddress("glVertexAttrib2sv");  
bindings.vertexAttrib3d = (GL_VertexAttrib3d)procAddress("glVertexAttrib3d");  
bindings.vertexAttrib3dv = (GL_VertexAttrib3dv)procAddress("glVertexAttrib3dv");  
bindings.vertexAttrib3f = (GL_VertexAttrib3f)procAddress("glVertexAttrib3f");  
bindings.vertexAttrib3fv = (GL_VertexAttrib3fv)procAddress("glVertexAttrib3fv");  
bindings.vertexAttrib3s = (GL_VertexAttrib3s)procAddress("glVertexAttrib3s");  
bindings.vertexAttrib3sv = (GL_VertexAttrib3sv)procAddress("glVertexAttrib3sv");  
bindings.vertexAttrib4Nbv = (GL_VertexAttrib4Nbv)procAddress("glVertexAttrib4Nbv");  
bindings.vertexAttrib4Niv = (GL_VertexAttrib4Niv)procAddress("glVertexAttrib4Niv");  
bindings.vertexAttrib4Nsv = (GL_VertexAttrib4Nsv)procAddress("glVertexAttrib4Nsv");  
bindings.vertexAttrib4Nub = (GL_VertexAttrib4Nub)procAddress("glVertexAttrib4Nub");  
bindings.vertexAttrib4Nubv = (GL_VertexAttrib4Nubv)procAddress("glVertexAttrib4Nubv");  
bindings.vertexAttrib4Nuiv = (GL_VertexAttrib4Nuiv)procAddress("glVertexAttrib4Nuiv");  
bindings.vertexAttrib4Nusv = (GL_VertexAttrib4Nusv)procAddress("glVertexAttrib4Nusv");  
bindings.vertexAttrib4bv = (GL_VertexAttrib4bv)procAddress("glVertexAttrib4bv");  
bindings.vertexAttrib4d = (GL_VertexAttrib4d)procAddress("glVertexAttrib4d");  
bindings.vertexAttrib4dv = (GL_VertexAttrib4dv)procAddress("glVertexAttrib4dv");  
bindings.vertexAttrib4f = (GL_VertexAttrib4f)procAddress("glVertexAttrib4f");  
bindings.vertexAttrib4fv = (GL_VertexAttrib4fv)procAddress("glVertexAttrib4fv");  
bindings.vertexAttrib4iv = (GL_VertexAttrib4iv)procAddress("glVertexAttrib4iv");  
bindings.vertexAttrib4s = (GL_VertexAttrib4s)procAddress("glVertexAttrib4s");  
bindings.vertexAttrib4sv = (GL_VertexAttrib4sv)procAddress("glVertexAttrib4sv");  
bindings.vertexAttrib4ubv = (GL_VertexAttrib4ubv)procAddress("glVertexAttrib4ubv");  
bindings.vertexAttrib4uiv = (GL_VertexAttrib4uiv)procAddress("glVertexAttrib4uiv");  
bindings.vertexAttrib4usv = (GL_VertexAttrib4usv)procAddress("glVertexAttrib4usv");  
bindings.vertexAttribBinding = (GL_VertexAttribBinding)procAddress("glVertexAttribBinding");  
bindings.vertexAttribDivisor = (GL_VertexAttribDivisor)procAddress("glVertexAttribDivisor");  
bindings.vertexAttribFormat = (GL_VertexAttribFormat)procAddress("glVertexAttribFormat");  
bindings.vertexAttribI1i = (GL_VertexAttribI1i)procAddress("glVertexAttribI1i");  
bindings.vertexAttribI1iv = (GL_VertexAttribI1iv)procAddress("glVertexAttribI1iv");  
bindings.vertexAttribI1ui = (GL_VertexAttribI1ui)procAddress("glVertexAttribI1ui");  
bindings.vertexAttribI1uiv = (GL_VertexAttribI1uiv)procAddress("glVertexAttribI1uiv");  
bindings.vertexAttribI2i = (GL_VertexAttribI2i)procAddress("glVertexAttribI2i");  
bindings.vertexAttribI2iv = (GL_VertexAttribI2iv)procAddress("glVertexAttribI2iv");  
bindings.vertexAttribI2ui = (GL_VertexAttribI2ui)procAddress("glVertexAttribI2ui");  
bindings.vertexAttribI2uiv = (GL_VertexAttribI2uiv)procAddress("glVertexAttribI2uiv");  
bindings.vertexAttribI3i = (GL_VertexAttribI3i)procAddress("glVertexAttribI3i");  
bindings.vertexAttribI3iv = (GL_VertexAttribI3iv)procAddress("glVertexAttribI3iv");  
bindings.vertexAttribI3ui = (GL_VertexAttribI3ui)procAddress("glVertexAttribI3ui");  
bindings.vertexAttribI3uiv = (GL_VertexAttribI3uiv)procAddress("glVertexAttribI3uiv");  
bindings.vertexAttribI4bv = (GL_VertexAttribI4bv)procAddress("glVertexAttribI4bv");  
bindings.vertexAttribI4i = (GL_VertexAttribI4i)procAddress("glVertexAttribI4i");  
bindings.vertexAttribI4iv = (GL_VertexAttribI4iv)procAddress("glVertexAttribI4iv");  
bindings.vertexAttribI4sv = (GL_VertexAttribI4sv)procAddress("glVertexAttribI4sv");  
bindings.vertexAttribI4ubv = (GL_VertexAttribI4ubv)procAddress("glVertexAttribI4ubv");  
bindings.vertexAttribI4ui = (GL_VertexAttribI4ui)procAddress("glVertexAttribI4ui");  
bindings.vertexAttribI4uiv = (GL_VertexAttribI4uiv)procAddress("glVertexAttribI4uiv");  
bindings.vertexAttribI4usv = (GL_VertexAttribI4usv)procAddress("glVertexAttribI4usv");  
bindings.vertexAttribIFormat = (GL_VertexAttribIFormat)procAddress("glVertexAttribIFormat");  
bindings.vertexAttribIPointer = (GL_VertexAttribIPointer)procAddress("glVertexAttribIPointer");  
bindings.vertexAttribL1d = (GL_VertexAttribL1d)procAddress("glVertexAttribL1d");  
bindings.vertexAttribL1dv = (GL_VertexAttribL1dv)procAddress("glVertexAttribL1dv");  
bindings.vertexAttribL2d = (GL_VertexAttribL2d)procAddress("glVertexAttribL2d");  
bindings.vertexAttribL2dv = (GL_VertexAttribL2dv)procAddress("glVertexAttribL2dv");  
bindings.vertexAttribL3d = (GL_VertexAttribL3d)procAddress("glVertexAttribL3d");  
bindings.vertexAttribL3dv = (GL_VertexAttribL3dv)procAddress("glVertexAttribL3dv");  
bindings.vertexAttribL4d = (GL_VertexAttribL4d)procAddress("glVertexAttribL4d");  
bindings.vertexAttribL4dv = (GL_VertexAttribL4dv)procAddress("glVertexAttribL4dv");  
bindings.vertexAttribLFormat = (GL_VertexAttribLFormat)procAddress("glVertexAttribLFormat");  
bindings.vertexAttribLPointer = (GL_VertexAttribLPointer)procAddress("glVertexAttribLPointer");  
bindings.vertexAttribP1ui = (GL_VertexAttribP1ui)procAddress("glVertexAttribP1ui");  
bindings.vertexAttribP1uiv = (GL_VertexAttribP1uiv)procAddress("glVertexAttribP1uiv");  
bindings.vertexAttribP2ui = (GL_VertexAttribP2ui)procAddress("glVertexAttribP2ui");  
bindings.vertexAttribP2uiv = (GL_VertexAttribP2uiv)procAddress("glVertexAttribP2uiv");  
bindings.vertexAttribP3ui = (GL_VertexAttribP3ui)procAddress("glVertexAttribP3ui");  
bindings.vertexAttribP3uiv = (GL_VertexAttribP3uiv)procAddress("glVertexAttribP3uiv");  
bindings.vertexAttribP4ui = (GL_VertexAttribP4ui)procAddress("glVertexAttribP4ui");  
bindings.vertexAttribP4uiv = (GL_VertexAttribP4uiv)procAddress("glVertexAttribP4uiv");  
bindings.vertexAttribPointer = (GL_VertexAttribPointer)procAddress("glVertexAttribPointer");  
bindings.vertexBindingDivisor = (GL_VertexBindingDivisor)procAddress("glVertexBindingDivisor");  
bindings.vertexP2ui = (GL_VertexP2ui)procAddress("glVertexP2ui");  
bindings.vertexP2uiv = (GL_VertexP2uiv)procAddress("glVertexP2uiv");  
bindings.vertexP3ui = (GL_VertexP3ui)procAddress("glVertexP3ui");  
bindings.vertexP3uiv = (GL_VertexP3uiv)procAddress("glVertexP3uiv");  
bindings.vertexP4ui = (GL_VertexP4ui)procAddress("glVertexP4ui");  
bindings.vertexP4uiv = (GL_VertexP4uiv)procAddress("glVertexP4uiv");  
bindings.vertexPointer = (GL_VertexPointer)procAddress("glVertexPointer");  
bindings.viewport = (GL_Viewport)procAddress("glViewport");  
bindings.viewportArrayv = (GL_ViewportArrayv)procAddress("glViewportArrayv");  
bindings.viewportIndexedf = (GL_ViewportIndexedf)procAddress("glViewportIndexedf");  
bindings.viewportIndexedfv = (GL_ViewportIndexedfv)procAddress("glViewportIndexedfv");  
bindings.waitSync = (GL_WaitSync)procAddress("glWaitSync");  
bindings.windowPos2d = (GL_WindowPos2d)procAddress("glWindowPos2d");  
bindings.windowPos2dv = (GL_WindowPos2dv)procAddress("glWindowPos2dv");  
bindings.windowPos2f = (GL_WindowPos2f)procAddress("glWindowPos2f");  
bindings.windowPos2fv = (GL_WindowPos2fv)procAddress("glWindowPos2fv");  
bindings.windowPos2i = (GL_WindowPos2i)procAddress("glWindowPos2i");  
bindings.windowPos2iv = (GL_WindowPos2iv)procAddress("glWindowPos2iv");  
bindings.windowPos2s = (GL_WindowPos2s)procAddress("glWindowPos2s");  
bindings.windowPos2sv = (GL_WindowPos2sv)procAddress("glWindowPos2sv");  
bindings.windowPos3d = (GL_WindowPos3d)procAddress("glWindowPos3d");  
bindings.windowPos3dv = (GL_WindowPos3dv)procAddress("glWindowPos3dv");  
bindings.windowPos3f = (GL_WindowPos3f)procAddress("glWindowPos3f");  
bindings.windowPos3fv = (GL_WindowPos3fv)procAddress("glWindowPos3fv");  
bindings.windowPos3i = (GL_WindowPos3i)procAddress("glWindowPos3i");  
bindings.windowPos3iv = (GL_WindowPos3iv)procAddress("glWindowPos3iv");  
bindings.windowPos3s = (GL_WindowPos3s)procAddress("glWindowPos3s");  
bindings.windowPos3sv = (GL_WindowPos3sv)procAddress("glWindowPos3sv");
} 
