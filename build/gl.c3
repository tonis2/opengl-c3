module gl;
 
// Functions 
 
fn void accum(int op, float value) @extname("glAccum");
fn void activeShaderProgram(uint pipeline, uint program) @extname("glActiveShaderProgram");
fn void alphaFunc(int func_param, float ref) @extname("glAlphaFunc");
fn bool areTexturesResident(isize n, uint *textures, bool *residences) @extname("glAreTexturesResident");
fn void arrayElement(int i) @extname("glArrayElement");
fn void attachShader(uint program, uint shader) @extname("glAttachShader");
fn void begin(int mode) @extname("glBegin");
fn void beginConditionalRender(uint id, int mode) @extname("glBeginConditionalRender");
fn void beginQuery(int target, uint id) @extname("glBeginQuery");
fn void beginQueryIndexed(int target, uint index, uint id) @extname("glBeginQueryIndexed");
fn void beginTransformFeedback(int primitiveMode) @extname("glBeginTransformFeedback");
fn void bindAttribLocation(uint program, uint index, char *name) @extname("glBindAttribLocation");
fn void bindBuffer(int target, uint buffer) @extname("glBindBuffer");
fn void bindBufferBase(int target, uint index, uint buffer) @extname("glBindBufferBase");
fn void bindBufferRange(int target, uint index, uint buffer, iptr** offset, int size) @extname("glBindBufferRange");
fn void bindBuffersBase(int target, uint first, isize count, uint *buffers) @extname("glBindBuffersBase");
fn void bindBuffersRange(int target, uint first, isize count, uint *buffers, iptr** *offsets, int *sizes) @extname("glBindBuffersRange");
fn void bindFragDataLocation(uint program, uint color, char *name) @extname("glBindFragDataLocation");
fn void bindFragDataLocationIndexed(uint program, uint colorNumber, uint index, char *name) @extname("glBindFragDataLocationIndexed");
fn void bindFramebuffer(int target, uint framebuffer) @extname("glBindFramebuffer");
fn void bindImageTexture(uint unit, uint texture, int level, bool layered, int layer, int access, int format) @extname("glBindImageTexture");
fn void bindImageTextures(uint first, isize count, uint *textures) @extname("glBindImageTextures");
fn void bindProgramPipeline(uint pipeline) @extname("glBindProgramPipeline");
fn void bindRenderbuffer(int target, uint renderbuffer) @extname("glBindRenderbuffer");
fn void bindSampler(uint unit, uint sampler) @extname("glBindSampler");
fn void bindSamplers(uint first, isize count, uint *samplers) @extname("glBindSamplers");
fn void bindTexture(int target, uint texture) @extname("glBindTexture");
fn void bindTextureUnit(uint unit, uint texture) @extname("glBindTextureUnit");
fn void bindTextures(uint first, isize count, uint *textures) @extname("glBindTextures");
fn void bindTransformFeedback(int target, uint id) @extname("glBindTransformFeedback");
fn void bindVertexArray(uint array) @extname("glBindVertexArray");
fn void bindVertexBuffer(uint bindingindex, uint buffer, iptr** offset, isize stride) @extname("glBindVertexBuffer");
fn void bindVertexBuffers(uint first, isize count, uint *buffers, iptr** *offsets, isize *strides) @extname("glBindVertexBuffers");
fn void bitmap(isize width, isize height, float xorig, float yorig, float xmove, float ymove, uint *bitmap) @extname("glBitmap");
fn void blendEquationSeparate(int modeRGB, int modeAlpha) @extname("glBlendEquationSeparate");
fn void blendEquationSeparatei(uint buf, int modeRGB, int modeAlpha) @extname("glBlendEquationSeparatei");
fn void blendEquationi(uint buf, int mode) @extname("glBlendEquationi");
fn void blendFunc(int sfactor, int dfactor) @extname("glBlendFunc");
fn void blendFuncSeparatei(uint buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) @extname("glBlendFuncSeparatei");
fn void blendFunci(uint buf, int src, int dst) @extname("glBlendFunci");
fn void blitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) @extname("glBlitFramebuffer");
fn void blitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) @extname("glBlitNamedFramebuffer");
fn void bufferData(int target, int size, double[] data, int usage) @extname("glBufferData");
fn void bufferStorage(int target, int size, double[] data, int flags) @extname("glBufferStorage");
fn void bufferSubData(int target, iptr** offset, int size, double[] data) @extname("glBufferSubData");
fn void callList(uint list) @extname("glCallList");
fn void callLists(isize n, int type, int* *lists) @extname("glCallLists");
fn int checkFramebufferStatus(int target) @extname("glCheckFramebufferStatus");
fn int checkNamedFramebufferStatus(uint framebuffer, int target) @extname("glCheckNamedFramebufferStatus");
fn void clampColor(int target, int clamp) @extname("glClampColor");
fn void clear(int mask) @extname("glClear");
fn void clearAccum(float red, float green, float blue, float alpha) @extname("glClearAccum");
fn void clearBufferData(int target, int internalformat, int format, int type, double[] data) @extname("glClearBufferData");
fn void clearBufferSubData(int target, int internalformat, iptr** offset, int size, int format, int type, double[] data) @extname("glClearBufferSubData");
fn void clearBufferfi(int buffer, int drawbuffer, float depth, int stencil) @extname("glClearBufferfi");
fn void clearBufferfv(int buffer, int drawbuffer, float *value) @extname("glClearBufferfv");
fn void clearBufferiv(int buffer, int drawbuffer, int *value) @extname("glClearBufferiv");
fn void clearBufferuiv(int buffer, int drawbuffer, uint *value) @extname("glClearBufferuiv");
fn void clearColor(float red, float green, float blue, float alpha) @extname("glClearColor");
fn void clearDepth(double depth) @extname("glClearDepth");
fn void clearDepthf(float d) @extname("glClearDepthf");
fn void clearIndex(float c) @extname("glClearIndex");
fn void clearNamedBufferData(uint buffer, int internalformat, int format, int type, double[] data) @extname("glClearNamedBufferData");
fn void clearNamedBufferSubData(uint buffer, int internalformat, iptr** offset, int size, int format, int type, double[] data) @extname("glClearNamedBufferSubData");
fn void clearNamedFramebufferfi(uint framebuffer, int buffer, int drawbuffer, float depth, int stencil) @extname("glClearNamedFramebufferfi");
fn void clearNamedFramebufferfv(uint framebuffer, int buffer, int drawbuffer, float *value) @extname("glClearNamedFramebufferfv");
fn void clearNamedFramebufferiv(uint framebuffer, int buffer, int drawbuffer, int *value) @extname("glClearNamedFramebufferiv");
fn void clearNamedFramebufferuiv(uint framebuffer, int buffer, int drawbuffer, uint *value) @extname("glClearNamedFramebufferuiv");
fn void clearStencil(int s) @extname("glClearStencil");
fn void clearTexImage(uint texture, int level, int format, int type, double[] data) @extname("glClearTexImage");
fn void clearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth, int format, int type, double[] data) @extname("glClearTexSubImage");
fn void clientActiveTexture(int texture) @extname("glClientActiveTexture");
fn int clientWaitSync(void* sync, int flags, ulong timeout) @extname("glClientWaitSync");
fn void clipControl(int origin, int depth) @extname("glClipControl");
fn void clipPlane(int plane, double *equation) @extname("glClipPlane");
fn void color3b(ushort red, ushort green, ushort blue) @extname("glColor3b");
fn void color3bv(ushort *v) @extname("glColor3bv");
fn void color3d(double red, double green, double blue) @extname("glColor3d");
fn void color3dv(double *v) @extname("glColor3dv");
fn void color3f(float red, float green, float blue) @extname("glColor3f");
fn void color3fv(float *v) @extname("glColor3fv");
fn void color3i(int red, int green, int blue) @extname("glColor3i");
fn void color3iv(int *v) @extname("glColor3iv");
fn void color3s(short red, short green, short blue) @extname("glColor3s");
fn void color3sv(short *v) @extname("glColor3sv");
fn void color3ub(uint red, uint green, uint blue) @extname("glColor3ub");
fn void color3ubv(uint *v) @extname("glColor3ubv");
fn void color3ui(uint red, uint green, uint blue) @extname("glColor3ui");
fn void color3uiv(uint *v) @extname("glColor3uiv");
fn void color3us(ushort red, ushort green, ushort blue) @extname("glColor3us");
fn void color3usv(ushort *v) @extname("glColor3usv");
fn void color4b(ushort red, ushort green, ushort blue, ushort alpha) @extname("glColor4b");
fn void color4bv(ushort *v) @extname("glColor4bv");
fn void color4d(double red, double green, double blue, double alpha) @extname("glColor4d");
fn void color4dv(double *v) @extname("glColor4dv");
fn void color4f(float red, float green, float blue, float alpha) @extname("glColor4f");
fn void color4fv(float *v) @extname("glColor4fv");
fn void color4i(int red, int green, int blue, int alpha) @extname("glColor4i");
fn void color4iv(int *v) @extname("glColor4iv");
fn void color4s(short red, short green, short blue, short alpha) @extname("glColor4s");
fn void color4sv(short *v) @extname("glColor4sv");
fn void color4ub(uint red, uint green, uint blue, uint alpha) @extname("glColor4ub");
fn void color4ubv(uint *v) @extname("glColor4ubv");
fn void color4ui(uint red, uint green, uint blue, uint alpha) @extname("glColor4ui");
fn void color4uiv(uint *v) @extname("glColor4uiv");
fn void color4us(ushort red, ushort green, ushort blue, ushort alpha) @extname("glColor4us");
fn void color4usv(ushort *v) @extname("glColor4usv");
fn void colorMask(bool red, bool green, bool blue, bool alpha) @extname("glColorMask");
fn void colorMaski(uint index, bool r, bool g, bool b, bool a) @extname("glColorMaski");
fn void colorMaterial(int face, int mode) @extname("glColorMaterial");
fn void colorP3ui(int type, uint color) @extname("glColorP3ui");
fn void colorP3uiv(int type, uint *color) @extname("glColorP3uiv");
fn void colorP4ui(int type, uint color) @extname("glColorP4ui");
fn void colorP4uiv(int type, uint *color) @extname("glColorP4uiv");
fn void colorPointer(int size, int type, isize stride, int* *pointer) @extname("glColorPointer");
fn void compileShader(uint shader) @extname("glCompileShader");
fn void compressedTextureSubImage1D(uint texture, int level, int xoffset, isize width, int format, isize imageSize, double[] data) @extname("glCompressedTextureSubImage1D");
fn void compressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, isize width, isize height, int format, isize imageSize, double[] data) @extname("glCompressedTextureSubImage2D");
fn void compressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth, int format, isize imageSize, double[] data) @extname("glCompressedTextureSubImage3D");
fn void copyBufferSubData(int readTarget, int writeTarget, iptr** readOffset, iptr** writeOffset, int size) @extname("glCopyBufferSubData");
fn void copyImageSubData(uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, isize srcWidth, isize srcHeight, isize srcDepth) @extname("glCopyImageSubData");
fn void copyNamedBufferSubData(uint readBuffer, uint writeBuffer, iptr** readOffset, iptr** writeOffset, int size) @extname("glCopyNamedBufferSubData");
fn void copyPixels(int x, int y, isize width, isize height, int type) @extname("glCopyPixels");
fn void copyTexImage1D(int target, int level, int internalformat, int x, int y, isize width, int border) @extname("glCopyTexImage1D");
fn void copyTexImage2D(int target, int level, int internalformat, int x, int y, isize width, isize height, int border) @extname("glCopyTexImage2D");
fn void copyTexSubImage1D(int target, int level, int xoffset, int x, int y, isize width) @extname("glCopyTexSubImage1D");
fn void copyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, isize width, isize height) @extname("glCopyTexSubImage2D");
fn void copyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, isize width) @extname("glCopyTextureSubImage1D");
fn void copyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, isize width, isize height) @extname("glCopyTextureSubImage2D");
fn void copyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, isize width, isize height) @extname("glCopyTextureSubImage3D");
fn void createBuffers(isize n, uint *buffers) @extname("glCreateBuffers");
fn void createFramebuffers(isize n, uint *framebuffers) @extname("glCreateFramebuffers");
fn uint createProgram() @extname("glCreateProgram");
fn void createProgramPipelines(isize n, uint *pipelines) @extname("glCreateProgramPipelines");
fn void createQueries(int target, isize n, uint *ids) @extname("glCreateQueries");
fn void createRenderbuffers(isize n, uint *renderbuffers) @extname("glCreateRenderbuffers");
fn void createSamplers(isize n, uint *samplers) @extname("glCreateSamplers");
fn uint createShader(int type) @extname("glCreateShader");
fn uint createShaderProgramv(int type, isize count, char **strings) @extname("glCreateShaderProgramv");
fn void createTextures(int target, isize n, uint *textures) @extname("glCreateTextures");
fn void createTransformFeedbacks(isize n, uint *ids) @extname("glCreateTransformFeedbacks");
fn void createVertexArrays(isize n, uint *arrays) @extname("glCreateVertexArrays");
fn void cullFace(int mode) @extname("glCullFace");
fn void debugMessageCallback(void* callback, int* *userParam) @extname("glDebugMessageCallback");
fn void debugMessageControl(int source, int type, int severity, isize count, uint *ids, bool enabled) @extname("glDebugMessageControl");
fn void debugMessageInsert(int source, int type, uint id, int severity, isize length, char *buf) @extname("glDebugMessageInsert");
fn void deleteBuffers(isize n, uint *buffers) @extname("glDeleteBuffers");
fn void deleteFramebuffers(isize n, uint *framebuffers) @extname("glDeleteFramebuffers");
fn void deleteLists(uint list, isize range) @extname("glDeleteLists");
fn void deleteProgram(uint program) @extname("glDeleteProgram");
fn void deleteProgramPipelines(isize n, uint *pipelines) @extname("glDeleteProgramPipelines");
fn void deleteQueries(isize n, uint *ids) @extname("glDeleteQueries");
fn void deleteRenderbuffers(isize n, uint *renderbuffers) @extname("glDeleteRenderbuffers");
fn void deleteSamplers(isize count, uint *samplers) @extname("glDeleteSamplers");
fn void deleteShader(uint shader) @extname("glDeleteShader");
fn void deleteSync(void* sync) @extname("glDeleteSync");
fn void deleteTextures(isize n, uint *textures) @extname("glDeleteTextures");
fn void deleteTransformFeedbacks(isize n, uint *ids) @extname("glDeleteTransformFeedbacks");
fn void deleteVertexArrays(isize n, uint *arrays) @extname("glDeleteVertexArrays");
fn void depthFunc(int func_param) @extname("glDepthFunc");
fn void depthMask(bool flag) @extname("glDepthMask");
fn void depthRange(double n, double f) @extname("glDepthRange");
fn void depthRangeArrayv(uint first, isize count, double *v) @extname("glDepthRangeArrayv");
fn void depthRangeIndexed(uint index, double n, double f) @extname("glDepthRangeIndexed");
fn void depthRangef(float n, float f) @extname("glDepthRangef");
fn void detachShader(uint program, uint shader) @extname("glDetachShader");
fn void disable(int cap) @extname("glDisable");
fn void disableClientState(int array) @extname("glDisableClientState");
fn void disableVertexArrayAttrib(uint vaobj, uint index) @extname("glDisableVertexArrayAttrib");
fn void disableVertexAttribArray(uint index) @extname("glDisableVertexAttribArray");
fn void disablei(int target, uint index) @extname("glDisablei");
fn void dispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z) @extname("glDispatchCompute");
fn void dispatchComputeIndirect(iptr** indirect) @extname("glDispatchComputeIndirect");
fn void drawArrays(int mode, int first, isize count) @extname("glDrawArrays");
fn void drawArraysIndirect(int mode, int* *indirect) @extname("glDrawArraysIndirect");
fn void drawArraysInstanced(int mode, int first, isize count, isize instancecount) @extname("glDrawArraysInstanced");
fn void drawArraysInstancedBaseInstance(int mode, int first, isize count, isize instancecount, uint baseinstance) @extname("glDrawArraysInstancedBaseInstance");
fn void drawBuffer(int buf) @extname("glDrawBuffer");
fn void drawBuffers(isize n, int *bufs) @extname("glDrawBuffers");
fn void drawElements(int mode, isize count, int type, int* *indices) @extname("glDrawElements");
fn void drawElementsBaseVertex(int mode, isize count, int type, int* *indices, int basevertex) @extname("glDrawElementsBaseVertex");
fn void drawElementsIndirect(int mode, int type, int* *indirect) @extname("glDrawElementsIndirect");
fn void drawElementsInstanced(int mode, isize count, int type, int* *indices, isize instancecount) @extname("glDrawElementsInstanced");
fn void drawElementsInstancedBaseInstance(int mode, isize count, int type, int* *indices, isize instancecount, uint baseinstance) @extname("glDrawElementsInstancedBaseInstance");
fn void drawElementsInstancedBaseVertex(int mode, isize count, int type, int* *indices, isize instancecount, int basevertex) @extname("glDrawElementsInstancedBaseVertex");
fn void drawElementsInstancedBaseVertexBaseInstance(int mode, isize count, int type, int* *indices, isize instancecount, int basevertex, uint baseinstance) @extname("glDrawElementsInstancedBaseVertexBaseInstance");
fn void drawPixels(isize width, isize height, int format, int type, int* *pixels) @extname("glDrawPixels");
fn void drawRangeElementsBaseVertex(int mode, uint start, uint end, isize count, int type, int* *indices, int basevertex) @extname("glDrawRangeElementsBaseVertex");
fn void drawTransformFeedback(int mode, uint id) @extname("glDrawTransformFeedback");
fn void drawTransformFeedbackInstanced(int mode, uint id, isize instancecount) @extname("glDrawTransformFeedbackInstanced");
fn void drawTransformFeedbackStream(int mode, uint id, uint stream) @extname("glDrawTransformFeedbackStream");
fn void drawTransformFeedbackStreamInstanced(int mode, uint id, uint stream, isize instancecount) @extname("glDrawTransformFeedbackStreamInstanced");
fn void edgeFlag(bool flag) @extname("glEdgeFlag");
fn void edgeFlagPointer(isize stride, int* *pointer) @extname("glEdgeFlagPointer");
fn void edgeFlagv(bool *flag) @extname("glEdgeFlagv");
fn void enable(int cap) @extname("glEnable");
fn void enableClientState(int array) @extname("glEnableClientState");
fn void enableVertexArrayAttrib(uint vaobj, uint index) @extname("glEnableVertexArrayAttrib");
fn void enableVertexAttribArray(uint index) @extname("glEnableVertexAttribArray");
fn void enablei(int target, uint index) @extname("glEnablei");
fn void end() @extname("glEnd");
fn void endConditionalRender() @extname("glEndConditionalRender");
fn void endList() @extname("glEndList");
fn void endQuery(int target) @extname("glEndQuery");
fn void endQueryIndexed(int target, uint index) @extname("glEndQueryIndexed");
fn void endTransformFeedback() @extname("glEndTransformFeedback");
fn void evalCoord1d(double u) @extname("glEvalCoord1d");
fn void evalCoord1dv(double *u) @extname("glEvalCoord1dv");
fn void evalCoord1f(float u) @extname("glEvalCoord1f");
fn void evalCoord1fv(float *u) @extname("glEvalCoord1fv");
fn void evalCoord2d(double u, double v) @extname("glEvalCoord2d");
fn void evalCoord2dv(double *u) @extname("glEvalCoord2dv");
fn void evalCoord2f(float u, float v) @extname("glEvalCoord2f");
fn void evalCoord2fv(float *u) @extname("glEvalCoord2fv");
fn void evalMesh1(int mode, int i1, int i2) @extname("glEvalMesh1");
fn void evalMesh2(int mode, int i1, int i2, int j1, int j2) @extname("glEvalMesh2");
fn void evalPoint1(int i) @extname("glEvalPoint1");
fn void evalPoint2(int i, int j) @extname("glEvalPoint2");
fn void feedbackBuffer(isize size, int type, float *buffer) @extname("glFeedbackBuffer");
fn void* fenceSync(int condition, int flags) @extname("glFenceSync");
fn void finish() @extname("glFinish");
fn void flush() @extname("glFlush");
fn void flushMappedBufferRange(int target, iptr** offset, int length) @extname("glFlushMappedBufferRange");
fn void flushMappedNamedBufferRange(uint buffer, iptr** offset, int length) @extname("glFlushMappedNamedBufferRange");
fn void fogCoordPointer(int type, isize stride, int* *pointer) @extname("glFogCoordPointer");
fn void fogCoordd(double coord) @extname("glFogCoordd");
fn void fogCoorddv(double *coord) @extname("glFogCoorddv");
fn void fogCoordf(float coord) @extname("glFogCoordf");
fn void fogCoordfv(float *coord) @extname("glFogCoordfv");
fn void fogf(int pname, float param) @extname("glFogf");
fn void fogfv(int pname, float *params) @extname("glFogfv");
fn void fogi(int pname, int param) @extname("glFogi");
fn void fogiv(int pname, int *params) @extname("glFogiv");
fn void framebufferParameteri(int target, int pname, int param) @extname("glFramebufferParameteri");
fn void framebufferRenderbuffer(int target, int attachment, int renderbuffertarget, uint renderbuffer) @extname("glFramebufferRenderbuffer");
fn void framebufferTexture(int target, int attachment, uint texture, int level) @extname("glFramebufferTexture");
fn void framebufferTexture1D(int target, int attachment, int textarget, uint texture, int level) @extname("glFramebufferTexture1D");
fn void framebufferTexture2D(int target, int attachment, int textarget, uint texture, int level) @extname("glFramebufferTexture2D");
fn void framebufferTexture3D(int target, int attachment, int textarget, uint texture, int level, int zoffset) @extname("glFramebufferTexture3D");
fn void framebufferTextureLayer(int target, int attachment, uint texture, int level, int layer) @extname("glFramebufferTextureLayer");
fn void frontFace(int mode) @extname("glFrontFace");
fn void frustum(double left, double right, double bottom, double top, double zNear, double zFar) @extname("glFrustum");
fn void genBuffers(isize n, uint *buffers) @extname("glGenBuffers");
fn void genFramebuffers(isize n, uint *framebuffers) @extname("glGenFramebuffers");
fn uint genLists(isize range) @extname("glGenLists");
fn void genProgramPipelines(isize n, uint *pipelines) @extname("glGenProgramPipelines");
fn void genQueries(isize n, uint *ids) @extname("glGenQueries");
fn void genRenderbuffers(isize n, uint *renderbuffers) @extname("glGenRenderbuffers");
fn void genSamplers(isize count, uint *samplers) @extname("glGenSamplers");
fn void genTextures(isize n, uint *textures) @extname("glGenTextures");
fn void genTransformFeedbacks(isize n, uint *ids) @extname("glGenTransformFeedbacks");
fn void genVertexArrays(isize n, uint *arrays) @extname("glGenVertexArrays");
fn void generateMipmap(int target) @extname("glGenerateMipmap");
fn void generateTextureMipmap(uint texture) @extname("glGenerateTextureMipmap");
fn void getActiveAtomicCounterBufferiv(uint program, uint bufferIndex, int pname, int *params) @extname("glGetActiveAtomicCounterBufferiv");
fn void getActiveAttrib(uint program, uint index, isize bufSize, isize *length, int *size, int *type, char *name) @extname("glGetActiveAttrib");
fn void getActiveSubroutineName(uint program, int shadertype, uint index, isize bufSize, isize *length, char *name) @extname("glGetActiveSubroutineName");
fn void getActiveSubroutineUniformName(uint program, int shadertype, uint index, isize bufSize, isize *length, char *name) @extname("glGetActiveSubroutineUniformName");
fn void getActiveSubroutineUniformiv(uint program, int shadertype, uint index, int pname, int *values) @extname("glGetActiveSubroutineUniformiv");
fn void getActiveUniform(uint program, uint index, isize bufSize, isize *length, int *size, int *type, char *name) @extname("glGetActiveUniform");
fn void getActiveUniformBlockName(uint program, uint uniformBlockIndex, isize bufSize, isize *length, char *uniformBlockName) @extname("glGetActiveUniformBlockName");
fn void getActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int *params) @extname("glGetActiveUniformBlockiv");
fn void getActiveUniformName(uint program, uint uniformIndex, isize bufSize, isize *length, char *uniformName) @extname("glGetActiveUniformName");
fn void getActiveUniformsiv(uint program, isize uniformCount, uint *uniformIndices, int pname, int *params) @extname("glGetActiveUniformsiv");
fn void getAttachedShaders(uint program, isize maxCount, isize *count, uint *shaders) @extname("glGetAttachedShaders");
fn int getAttribLocation(uint program, char *name) @extname("glGetAttribLocation");
fn void getBooleani_v(int target, uint index, bool *data) @extname("glGetBooleani_v");
fn void getBooleanv(int pname, bool *data) @extname("glGetBooleanv");
fn void getBufferParameteri64v(int target, int pname, int *params) @extname("glGetBufferParameteri64v");
fn void getBufferParameteriv(int target, int pname, int *params) @extname("glGetBufferParameteriv");
fn void getBufferPointerv(int target, int pname, void **params) @extname("glGetBufferPointerv");
fn void getBufferSubData(int target, iptr** offset, int size, void *data) @extname("glGetBufferSubData");
fn void getClipPlane(int plane, double *equation) @extname("glGetClipPlane");
fn void getCompressedTextureImage(uint texture, int level, isize bufSize, void *pixels) @extname("glGetCompressedTextureImage");
fn void getCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth, isize bufSize, void *pixels) @extname("glGetCompressedTextureSubImage");
fn uint getDebugMessageLog(uint count, isize bufSize, int *sources, int *types, uint *ids, int *severities, isize *lengths, char *messageLog) @extname("glGetDebugMessageLog");
fn void getDoublei_v(int target, uint index, double *data) @extname("glGetDoublei_v");
fn void getDoublev(int pname, double *data) @extname("glGetDoublev");
fn int getError() @extname("glGetError");
fn void getFloati_v(int target, uint index, float *data) @extname("glGetFloati_v");
fn void getFloatv(int pname, float *data) @extname("glGetFloatv");
fn int getFragDataIndex(uint program, char *name) @extname("glGetFragDataIndex");
fn int getFragDataLocation(uint program, char *name) @extname("glGetFragDataLocation");
fn void getFramebufferAttachmentParameteriv(int target, int attachment, int pname, int *params) @extname("glGetFramebufferAttachmentParameteriv");
fn void getFramebufferParameteriv(int target, int pname, int *params) @extname("glGetFramebufferParameteriv");
fn int getGraphicsResetStatus() @extname("glGetGraphicsResetStatus");
fn void getInteger64i_v(int target, uint index, int *data) @extname("glGetInteger64i_v");
fn void getInteger64v(int pname, int *data) @extname("glGetInteger64v");
fn void getIntegeri_v(int target, uint index, int *data) @extname("glGetIntegeri_v");
fn void getIntegerv(int pname, int *data) @extname("glGetIntegerv");
fn void getInternalformati64v(int target, int internalformat, int pname, isize count, int *params) @extname("glGetInternalformati64v");
fn void getInternalformativ(int target, int internalformat, int pname, isize count, int *params) @extname("glGetInternalformativ");
fn void getLightfv(int light, int pname, float *params) @extname("glGetLightfv");
fn void getLightiv(int light, int pname, int *params) @extname("glGetLightiv");
fn void getMapdv(int target, int query, double *v) @extname("glGetMapdv");
fn void getMapfv(int target, int query, float *v) @extname("glGetMapfv");
fn void getMapiv(int target, int query, int *v) @extname("glGetMapiv");
fn void getMaterialfv(int face, int pname, float *params) @extname("glGetMaterialfv");
fn void getMaterialiv(int face, int pname, int *params) @extname("glGetMaterialiv");
fn void getMultisamplefv(int pname, uint index, float *val) @extname("glGetMultisamplefv");
fn void getNamedBufferParameteri64v(uint buffer, int pname, int *params) @extname("glGetNamedBufferParameteri64v");
fn void getNamedBufferParameteriv(uint buffer, int pname, int *params) @extname("glGetNamedBufferParameteriv");
fn void getNamedBufferPointerv(uint buffer, int pname, void **params) @extname("glGetNamedBufferPointerv");
fn void getNamedBufferSubData(uint buffer, iptr** offset, int size, void *data) @extname("glGetNamedBufferSubData");
fn void getNamedFramebufferAttachmentParameteriv(uint framebuffer, int attachment, int pname, int *params) @extname("glGetNamedFramebufferAttachmentParameteriv");
fn void getNamedFramebufferParameteriv(uint framebuffer, int pname, int *param) @extname("glGetNamedFramebufferParameteriv");
fn void getNamedRenderbufferParameteriv(uint renderbuffer, int pname, int *params) @extname("glGetNamedRenderbufferParameteriv");
fn void getObjectLabel(int identifier, uint name, isize bufSize, isize *length, char *label) @extname("glGetObjectLabel");
fn void getObjectPtrLabel(int* *ptr, isize bufSize, isize *length, char *label) @extname("glGetObjectPtrLabel");
fn void getPixelMapfv(int map, float *values) @extname("glGetPixelMapfv");
fn void getPixelMapuiv(int map, uint *values) @extname("glGetPixelMapuiv");
fn void getPixelMapusv(int map, ushort *values) @extname("glGetPixelMapusv");
fn void getPointerv(int pname, void **params) @extname("glGetPointerv");
fn void getPolygonStipple(uint *mask) @extname("glGetPolygonStipple");
fn void getProgramBinary(uint program, isize bufSize, isize *length, int *binaryFormat, void *binary) @extname("glGetProgramBinary");
fn void getProgramInfoLog(uint program, isize bufSize, isize *length, char *infoLog) @extname("glGetProgramInfoLog");
fn void getProgramInterfaceiv(uint program, int programInterface, int pname, int *params) @extname("glGetProgramInterfaceiv");
fn void getProgramPipelineInfoLog(uint pipeline, isize bufSize, isize *length, char *infoLog) @extname("glGetProgramPipelineInfoLog");
fn void getProgramPipelineiv(uint pipeline, int pname, int *params) @extname("glGetProgramPipelineiv");
fn uint getProgramResourceIndex(uint program, int programInterface, char *name) @extname("glGetProgramResourceIndex");
fn int getProgramResourceLocation(uint program, int programInterface, char *name) @extname("glGetProgramResourceLocation");
fn int getProgramResourceLocationIndex(uint program, int programInterface, char *name) @extname("glGetProgramResourceLocationIndex");
fn void getProgramResourceName(uint program, int programInterface, uint index, isize bufSize, isize *length, char *name) @extname("glGetProgramResourceName");
fn void getProgramResourceiv(uint program, int programInterface, uint index, isize propCount, int *props, isize count, isize *length, int *params) @extname("glGetProgramResourceiv");
fn void getProgramStageiv(uint program, int shadertype, int pname, int *values) @extname("glGetProgramStageiv");
fn void getProgramiv(uint program, int pname, int *params) @extname("glGetProgramiv");
fn void getQueryBufferObjecti64v(uint id, uint buffer, int pname, iptr** offset) @extname("glGetQueryBufferObjecti64v");
fn void getQueryBufferObjectiv(uint id, uint buffer, int pname, iptr** offset) @extname("glGetQueryBufferObjectiv");
fn void getQueryBufferObjectui64v(uint id, uint buffer, int pname, iptr** offset) @extname("glGetQueryBufferObjectui64v");
fn void getQueryBufferObjectuiv(uint id, uint buffer, int pname, iptr** offset) @extname("glGetQueryBufferObjectuiv");
fn void getQueryIndexediv(int target, uint index, int pname, int *params) @extname("glGetQueryIndexediv");
fn void getQueryObjecti64v(uint id, int pname, int *params) @extname("glGetQueryObjecti64v");
fn void getQueryObjectiv(uint id, int pname, int *params) @extname("glGetQueryObjectiv");
fn void getQueryObjectui64v(uint id, int pname, ulong *params) @extname("glGetQueryObjectui64v");
fn void getQueryObjectuiv(uint id, int pname, uint *params) @extname("glGetQueryObjectuiv");
fn void getQueryiv(int target, int pname, int *params) @extname("glGetQueryiv");
fn void getRenderbufferParameteriv(int target, int pname, int *params) @extname("glGetRenderbufferParameteriv");
fn void getSamplerParameterIiv(uint sampler, int pname, int *params) @extname("glGetSamplerParameterIiv");
fn void getSamplerParameterIuiv(uint sampler, int pname, uint *params) @extname("glGetSamplerParameterIuiv");
fn void getSamplerParameterfv(uint sampler, int pname, float *params) @extname("glGetSamplerParameterfv");
fn void getSamplerParameteriv(uint sampler, int pname, int *params) @extname("glGetSamplerParameteriv");
fn void getShaderInfoLog(uint shader, isize bufSize, isize *length, char *infoLog) @extname("glGetShaderInfoLog");
fn void getShaderPrecisionFormat(int shadertype, int precisiontype, int *range, int *precision) @extname("glGetShaderPrecisionFormat");
fn void getShaderSource(uint shader, isize bufSize, isize *length, char *source) @extname("glGetShaderSource");
fn void getShaderiv(uint shader, int pname, int *params) @extname("glGetShaderiv");
fn int* getString(int name) @extname("glGetString");
fn int* getStringi(int name, uint index) @extname("glGetStringi");
fn uint getSubroutineIndex(uint program, int shadertype, char *name) @extname("glGetSubroutineIndex");
fn int getSubroutineUniformLocation(uint program, int shadertype, char *name) @extname("glGetSubroutineUniformLocation");
fn void getSynciv(void* sync, int pname, isize count, isize *length, int *values) @extname("glGetSynciv");
fn void getTexEnvfv(int target, int pname, float *params) @extname("glGetTexEnvfv");
fn void getTexEnviv(int target, int pname, int *params) @extname("glGetTexEnviv");
fn void getTexGendv(int coord, int pname, double *params) @extname("glGetTexGendv");
fn void getTexGenfv(int coord, int pname, float *params) @extname("glGetTexGenfv");
fn void getTexGeniv(int coord, int pname, int *params) @extname("glGetTexGeniv");
fn void getTexImage(int target, int level, int format, int type, void *pixels) @extname("glGetTexImage");
fn void getTexLevelParameterfv(int target, int level, int pname, float *params) @extname("glGetTexLevelParameterfv");
fn void getTexLevelParameteriv(int target, int level, int pname, int *params) @extname("glGetTexLevelParameteriv");
fn void getTexParameterIiv(int target, int pname, int *params) @extname("glGetTexParameterIiv");
fn void getTexParameterIuiv(int target, int pname, uint *params) @extname("glGetTexParameterIuiv");
fn void getTexParameterfv(int target, int pname, float *params) @extname("glGetTexParameterfv");
fn void getTexParameteriv(int target, int pname, int *params) @extname("glGetTexParameteriv");
fn void getTextureImage(uint texture, int level, int format, int type, isize bufSize, void *pixels) @extname("glGetTextureImage");
fn void getTextureLevelParameterfv(uint texture, int level, int pname, float *params) @extname("glGetTextureLevelParameterfv");
fn void getTextureLevelParameteriv(uint texture, int level, int pname, int *params) @extname("glGetTextureLevelParameteriv");
fn void getTextureParameterIiv(uint texture, int pname, int *params) @extname("glGetTextureParameterIiv");
fn void getTextureParameterIuiv(uint texture, int pname, uint *params) @extname("glGetTextureParameterIuiv");
fn void getTextureParameterfv(uint texture, int pname, float *params) @extname("glGetTextureParameterfv");
fn void getTextureParameteriv(uint texture, int pname, int *params) @extname("glGetTextureParameteriv");
fn void getTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth, int format, int type, isize bufSize, void *pixels) @extname("glGetTextureSubImage");
fn void getTransformFeedbackVarying(uint program, uint index, isize bufSize, isize *length, isize *size, int *type, char *name) @extname("glGetTransformFeedbackVarying");
fn void getTransformFeedbacki64_v(uint xfb, int pname, uint index, int *param) @extname("glGetTransformFeedbacki64_v");
fn void getTransformFeedbacki_v(uint xfb, int pname, uint index, int *param) @extname("glGetTransformFeedbacki_v");
fn void getTransformFeedbackiv(uint xfb, int pname, int *param) @extname("glGetTransformFeedbackiv");
fn uint getUniformBlockIndex(uint program, char *uniformBlockName) @extname("glGetUniformBlockIndex");
fn void getUniformIndices(uint program, isize uniformCount, char **uniformNames, uint *uniformIndices) @extname("glGetUniformIndices");
fn int getUniformLocation(uint program, char *name) @extname("glGetUniformLocation");
fn void getUniformSubroutineuiv(int shadertype, int location, uint *params) @extname("glGetUniformSubroutineuiv");
fn void getUniformdv(uint program, int location, double *params) @extname("glGetUniformdv");
fn void getUniformfv(uint program, int location, float *params) @extname("glGetUniformfv");
fn void getUniformiv(uint program, int location, int *params) @extname("glGetUniformiv");
fn void getUniformuiv(uint program, int location, uint *params) @extname("glGetUniformuiv");
fn void getVertexArrayIndexed64iv(uint vaobj, uint index, int pname, int *param) @extname("glGetVertexArrayIndexed64iv");
fn void getVertexArrayIndexediv(uint vaobj, uint index, int pname, int *param) @extname("glGetVertexArrayIndexediv");
fn void getVertexArrayiv(uint vaobj, int pname, int *param) @extname("glGetVertexArrayiv");
fn void getVertexAttribIiv(uint index, int pname, int *params) @extname("glGetVertexAttribIiv");
fn void getVertexAttribIuiv(uint index, int pname, uint *params) @extname("glGetVertexAttribIuiv");
fn void getVertexAttribLdv(uint index, int pname, double *params) @extname("glGetVertexAttribLdv");
fn void getVertexAttribPointerv(uint index, int pname, void **pointer) @extname("glGetVertexAttribPointerv");
fn void getVertexAttribdv(uint index, int pname, double *params) @extname("glGetVertexAttribdv");
fn void getVertexAttribfv(uint index, int pname, float *params) @extname("glGetVertexAttribfv");
fn void getVertexAttribiv(uint index, int pname, int *params) @extname("glGetVertexAttribiv");
fn void getnColorTable(int target, int format, int type, isize bufSize, void *table) @extname("glGetnColorTable");
fn void getnCompressedTexImage(int target, int lod, isize bufSize, void *pixels) @extname("glGetnCompressedTexImage");
fn void getnConvolutionFilter(int target, int format, int type, isize bufSize, void *image) @extname("glGetnConvolutionFilter");
fn void getnHistogram(int target, bool reset, int format, int type, isize bufSize, void *values) @extname("glGetnHistogram");
fn void getnMapdv(int target, int query, isize bufSize, double *v) @extname("glGetnMapdv");
fn void getnMapfv(int target, int query, isize bufSize, float *v) @extname("glGetnMapfv");
fn void getnMapiv(int target, int query, isize bufSize, int *v) @extname("glGetnMapiv");
fn void getnMinmax(int target, bool reset, int format, int type, isize bufSize, void *values) @extname("glGetnMinmax");
fn void getnPixelMapfv(int map, isize bufSize, float *values) @extname("glGetnPixelMapfv");
fn void getnPixelMapuiv(int map, isize bufSize, uint *values) @extname("glGetnPixelMapuiv");
fn void getnPixelMapusv(int map, isize bufSize, ushort *values) @extname("glGetnPixelMapusv");
fn void getnPolygonStipple(isize bufSize, uint *pattern) @extname("glGetnPolygonStipple");
fn void getnSeparableFilter(int target, int format, int type, isize rowBufSize, void *row, isize columnBufSize, void *column, void *span) @extname("glGetnSeparableFilter");
fn void getnTexImage(int target, int level, int format, int type, isize bufSize, void *pixels) @extname("glGetnTexImage");
fn void getnUniformdv(uint program, int location, isize bufSize, double *params) @extname("glGetnUniformdv");
fn void getnUniformfv(uint program, int location, isize bufSize, float *params) @extname("glGetnUniformfv");
fn void getnUniformiv(uint program, int location, isize bufSize, int *params) @extname("glGetnUniformiv");
fn void getnUniformuiv(uint program, int location, isize bufSize, uint *params) @extname("glGetnUniformuiv");
fn void hint(int target, int mode) @extname("glHint");
fn void indexMask(uint mask) @extname("glIndexMask");
fn void indexPointer(int type, isize stride, int* *pointer) @extname("glIndexPointer");
fn void indexd(double c) @extname("glIndexd");
fn void indexdv(double *c) @extname("glIndexdv");
fn void indexf(float c) @extname("glIndexf");
fn void indexfv(float *c) @extname("glIndexfv");
fn void indexi(int c) @extname("glIndexi");
fn void indexiv(int *c) @extname("glIndexiv");
fn void indexs(short c) @extname("glIndexs");
fn void indexsv(short *c) @extname("glIndexsv");
fn void indexub(uint c) @extname("glIndexub");
fn void indexubv(uint *c) @extname("glIndexubv");
fn void initNames() @extname("glInitNames");
fn void interleavedArrays(int format, isize stride, int* *pointer) @extname("glInterleavedArrays");
fn void invalidateBufferData(uint buffer) @extname("glInvalidateBufferData");
fn void invalidateBufferSubData(uint buffer, iptr** offset, int length) @extname("glInvalidateBufferSubData");
fn void invalidateFramebuffer(int target, isize numAttachments, int *attachments) @extname("glInvalidateFramebuffer");
fn void invalidateNamedFramebufferData(uint framebuffer, isize numAttachments, int *attachments) @extname("glInvalidateNamedFramebufferData");
fn void invalidateNamedFramebufferSubData(uint framebuffer, isize numAttachments, int *attachments, int x, int y, isize width, isize height) @extname("glInvalidateNamedFramebufferSubData");
fn void invalidateSubFramebuffer(int target, isize numAttachments, int *attachments, int x, int y, isize width, isize height) @extname("glInvalidateSubFramebuffer");
fn void invalidateTexImage(uint texture, int level) @extname("glInvalidateTexImage");
fn void invalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth) @extname("glInvalidateTexSubImage");
fn bool isBuffer(uint buffer) @extname("glIsBuffer");
fn bool isEnabled(int cap) @extname("glIsEnabled");
fn bool isEnabledi(int target, uint index) @extname("glIsEnabledi");
fn bool isFramebuffer(uint framebuffer) @extname("glIsFramebuffer");
fn bool isList(uint list) @extname("glIsList");
fn bool isProgram(uint program) @extname("glIsProgram");
fn bool isProgramPipeline(uint pipeline) @extname("glIsProgramPipeline");
fn bool isQuery(uint id) @extname("glIsQuery");
fn bool isRenderbuffer(uint renderbuffer) @extname("glIsRenderbuffer");
fn bool isSampler(uint sampler) @extname("glIsSampler");
fn bool isShader(uint shader) @extname("glIsShader");
fn bool isSync(void* sync) @extname("glIsSync");
fn bool isTexture(uint texture) @extname("glIsTexture");
fn bool isTransformFeedback(uint id) @extname("glIsTransformFeedback");
fn bool isVertexArray(uint array) @extname("glIsVertexArray");
fn void lightModelf(int pname, float param) @extname("glLightModelf");
fn void lightModelfv(int pname, float *params) @extname("glLightModelfv");
fn void lightModeli(int pname, int param) @extname("glLightModeli");
fn void lightModeliv(int pname, int *params) @extname("glLightModeliv");
fn void lightf(int light, int pname, float param) @extname("glLightf");
fn void lightfv(int light, int pname, float *params) @extname("glLightfv");
fn void lighti(int light, int pname, int param) @extname("glLighti");
fn void lightiv(int light, int pname, int *params) @extname("glLightiv");
fn void lineStipple(int factor, ushort pattern) @extname("glLineStipple");
fn void lineWidth(float width) @extname("glLineWidth");
fn void linkProgram(uint program) @extname("glLinkProgram");
fn void listBase(uint base) @extname("glListBase");
fn void loadIdentity() @extname("glLoadIdentity");
fn void loadMatrixd(double *m) @extname("glLoadMatrixd");
fn void loadMatrixf(float *m) @extname("glLoadMatrixf");
fn void loadName(uint name) @extname("glLoadName");
fn void loadTransposeMatrixd(double *m) @extname("glLoadTransposeMatrixd");
fn void loadTransposeMatrixf(float *m) @extname("glLoadTransposeMatrixf");
fn void logicOp(int opcode) @extname("glLogicOp");
fn void map1d(int target, double u1, double u2, int stride, int order, double *points) @extname("glMap1d");
fn void map1f(int target, float u1, float u2, int stride, int order, float *points) @extname("glMap1f");
fn void map2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double *points) @extname("glMap2d");
fn void map2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float *points) @extname("glMap2f");
fn void mapBuffer(int target, int access) @extname("glMapBuffer");
fn void mapBufferRange(int target, iptr** offset, int length, int access) @extname("glMapBufferRange");
fn void mapGrid1d(int un, double u1, double u2) @extname("glMapGrid1d");
fn void mapGrid1f(int un, float u1, float u2) @extname("glMapGrid1f");
fn void mapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) @extname("glMapGrid2d");
fn void mapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) @extname("glMapGrid2f");
fn void mapNamedBuffer(uint buffer, int access) @extname("glMapNamedBuffer");
fn void mapNamedBufferRange(uint buffer, iptr** offset, int length, int access) @extname("glMapNamedBufferRange");
fn void materialf(int face, int pname, float param) @extname("glMaterialf");
fn void materialfv(int face, int pname, float *params) @extname("glMaterialfv");
fn void materiali(int face, int pname, int param) @extname("glMateriali");
fn void materialiv(int face, int pname, int *params) @extname("glMaterialiv");
fn void matrixMode(int mode) @extname("glMatrixMode");
fn void memoryBarrier(int barriers) @extname("glMemoryBarrier");
fn void memoryBarrierByRegion(int barriers) @extname("glMemoryBarrierByRegion");
fn void minSampleShading(float value) @extname("glMinSampleShading");
fn void multMatrixd(double *m) @extname("glMultMatrixd");
fn void multMatrixf(float *m) @extname("glMultMatrixf");
fn void multTransposeMatrixd(double *m) @extname("glMultTransposeMatrixd");
fn void multTransposeMatrixf(float *m) @extname("glMultTransposeMatrixf");
fn void multiDrawArraysIndirect(int mode, int* *indirect, isize drawcount, isize stride) @extname("glMultiDrawArraysIndirect");
fn void multiDrawArraysIndirectCount(int mode, int* *indirect, iptr** drawcount, isize maxdrawcount, isize stride) @extname("glMultiDrawArraysIndirectCount");
fn void multiDrawElementsBaseVertex(int mode, isize *count, int type, int* **indices, isize drawcount, int *basevertex) @extname("glMultiDrawElementsBaseVertex");
fn void multiDrawElementsIndirect(int mode, int type, int* *indirect, isize drawcount, isize stride) @extname("glMultiDrawElementsIndirect");
fn void multiDrawElementsIndirectCount(int mode, int type, int* *indirect, iptr** drawcount, isize maxdrawcount, isize stride) @extname("glMultiDrawElementsIndirectCount");
fn void multiTexCoord1d(int target, double s) @extname("glMultiTexCoord1d");
fn void multiTexCoord1dv(int target, double *v) @extname("glMultiTexCoord1dv");
fn void multiTexCoord1f(int target, float s) @extname("glMultiTexCoord1f");
fn void multiTexCoord1fv(int target, float *v) @extname("glMultiTexCoord1fv");
fn void multiTexCoord1i(int target, int s) @extname("glMultiTexCoord1i");
fn void multiTexCoord1iv(int target, int *v) @extname("glMultiTexCoord1iv");
fn void multiTexCoord1s(int target, short s) @extname("glMultiTexCoord1s");
fn void multiTexCoord1sv(int target, short *v) @extname("glMultiTexCoord1sv");
fn void multiTexCoord2d(int target, double s, double t) @extname("glMultiTexCoord2d");
fn void multiTexCoord2dv(int target, double *v) @extname("glMultiTexCoord2dv");
fn void multiTexCoord2f(int target, float s, float t) @extname("glMultiTexCoord2f");
fn void multiTexCoord2fv(int target, float *v) @extname("glMultiTexCoord2fv");
fn void multiTexCoord2i(int target, int s, int t) @extname("glMultiTexCoord2i");
fn void multiTexCoord2iv(int target, int *v) @extname("glMultiTexCoord2iv");
fn void multiTexCoord2s(int target, short s, short t) @extname("glMultiTexCoord2s");
fn void multiTexCoord2sv(int target, short *v) @extname("glMultiTexCoord2sv");
fn void multiTexCoord3d(int target, double s, double t, double r) @extname("glMultiTexCoord3d");
fn void multiTexCoord3dv(int target, double *v) @extname("glMultiTexCoord3dv");
fn void multiTexCoord3f(int target, float s, float t, float r) @extname("glMultiTexCoord3f");
fn void multiTexCoord3fv(int target, float *v) @extname("glMultiTexCoord3fv");
fn void multiTexCoord3i(int target, int s, int t, int r) @extname("glMultiTexCoord3i");
fn void multiTexCoord3iv(int target, int *v) @extname("glMultiTexCoord3iv");
fn void multiTexCoord3s(int target, short s, short t, short r) @extname("glMultiTexCoord3s");
fn void multiTexCoord3sv(int target, short *v) @extname("glMultiTexCoord3sv");
fn void multiTexCoord4d(int target, double s, double t, double r, double q) @extname("glMultiTexCoord4d");
fn void multiTexCoord4dv(int target, double *v) @extname("glMultiTexCoord4dv");
fn void multiTexCoord4f(int target, float s, float t, float r, float q) @extname("glMultiTexCoord4f");
fn void multiTexCoord4fv(int target, float *v) @extname("glMultiTexCoord4fv");
fn void multiTexCoord4i(int target, int s, int t, int r, int q) @extname("glMultiTexCoord4i");
fn void multiTexCoord4iv(int target, int *v) @extname("glMultiTexCoord4iv");
fn void multiTexCoord4s(int target, short s, short t, short r, short q) @extname("glMultiTexCoord4s");
fn void multiTexCoord4sv(int target, short *v) @extname("glMultiTexCoord4sv");
fn void multiTexCoordP1ui(int texture, int type, uint coords) @extname("glMultiTexCoordP1ui");
fn void multiTexCoordP1uiv(int texture, int type, uint *coords) @extname("glMultiTexCoordP1uiv");
fn void multiTexCoordP2ui(int texture, int type, uint coords) @extname("glMultiTexCoordP2ui");
fn void multiTexCoordP2uiv(int texture, int type, uint *coords) @extname("glMultiTexCoordP2uiv");
fn void multiTexCoordP3ui(int texture, int type, uint coords) @extname("glMultiTexCoordP3ui");
fn void multiTexCoordP3uiv(int texture, int type, uint *coords) @extname("glMultiTexCoordP3uiv");
fn void multiTexCoordP4ui(int texture, int type, uint coords) @extname("glMultiTexCoordP4ui");
fn void multiTexCoordP4uiv(int texture, int type, uint *coords) @extname("glMultiTexCoordP4uiv");
fn void namedBufferData(uint buffer, int size, double[] data, int usage) @extname("glNamedBufferData");
fn void namedBufferStorage(uint buffer, int size, double[] data, int flags) @extname("glNamedBufferStorage");
fn void namedBufferSubData(uint buffer, iptr** offset, int size, double[] data) @extname("glNamedBufferSubData");
fn void namedFramebufferDrawBuffer(uint framebuffer, int buf) @extname("glNamedFramebufferDrawBuffer");
fn void namedFramebufferDrawBuffers(uint framebuffer, isize n, int *bufs) @extname("glNamedFramebufferDrawBuffers");
fn void namedFramebufferParameteri(uint framebuffer, int pname, int param) @extname("glNamedFramebufferParameteri");
fn void namedFramebufferReadBuffer(uint framebuffer, int src) @extname("glNamedFramebufferReadBuffer");
fn void namedFramebufferRenderbuffer(uint framebuffer, int attachment, int renderbuffertarget, uint renderbuffer) @extname("glNamedFramebufferRenderbuffer");
fn void namedFramebufferTexture(uint framebuffer, int attachment, uint texture, int level) @extname("glNamedFramebufferTexture");
fn void namedFramebufferTextureLayer(uint framebuffer, int attachment, uint texture, int level, int layer) @extname("glNamedFramebufferTextureLayer");
fn void namedRenderbufferStorage(uint renderbuffer, int internalformat, isize width, isize height) @extname("glNamedRenderbufferStorage");
fn void namedRenderbufferStorageMultisample(uint renderbuffer, isize samples, int internalformat, isize width, isize height) @extname("glNamedRenderbufferStorageMultisample");
fn void newList(uint list, int mode) @extname("glNewList");
fn void normal3b(ushort nx, ushort ny, ushort nz) @extname("glNormal3b");
fn void normal3bv(ushort *v) @extname("glNormal3bv");
fn void normal3d(double nx, double ny, double nz) @extname("glNormal3d");
fn void normal3dv(double *v) @extname("glNormal3dv");
fn void normal3f(float nx, float ny, float nz) @extname("glNormal3f");
fn void normal3fv(float *v) @extname("glNormal3fv");
fn void normal3i(int nx, int ny, int nz) @extname("glNormal3i");
fn void normal3iv(int *v) @extname("glNormal3iv");
fn void normal3s(short nx, short ny, short nz) @extname("glNormal3s");
fn void normal3sv(short *v) @extname("glNormal3sv");
fn void normalP3ui(int type, uint coords) @extname("glNormalP3ui");
fn void normalP3uiv(int type, uint *coords) @extname("glNormalP3uiv");
fn void normalPointer(int type, isize stride, int* *pointer) @extname("glNormalPointer");
fn void objectLabel(int identifier, uint name, isize length, char *label) @extname("glObjectLabel");
fn void objectPtrLabel(int* *ptr, isize length, char *label) @extname("glObjectPtrLabel");
fn void ortho(double left, double right, double bottom, double top, double zNear, double zFar) @extname("glOrtho");
fn void passThrough(float token) @extname("glPassThrough");
fn void patchParameterfv(int pname, float *values) @extname("glPatchParameterfv");
fn void patchParameteri(int pname, int value) @extname("glPatchParameteri");
fn void pauseTransformFeedback() @extname("glPauseTransformFeedback");
fn void pixelMapfv(int map, isize mapsize, float *values) @extname("glPixelMapfv");
fn void pixelMapuiv(int map, isize mapsize, uint *values) @extname("glPixelMapuiv");
fn void pixelMapusv(int map, isize mapsize, ushort *values) @extname("glPixelMapusv");
fn void pixelStoref(int pname, float param) @extname("glPixelStoref");
fn void pixelStorei(int pname, int param) @extname("glPixelStorei");
fn void pixelTransferf(int pname, float param) @extname("glPixelTransferf");
fn void pixelTransferi(int pname, int param) @extname("glPixelTransferi");
fn void pixelZoom(float xfactor, float yfactor) @extname("glPixelZoom");
fn void pointSize(float size) @extname("glPointSize");
fn void polygonMode(int face, int mode) @extname("glPolygonMode");
fn void polygonOffset(float factor, float units) @extname("glPolygonOffset");
fn void polygonOffsetClamp(float factor, float units, float clamp) @extname("glPolygonOffsetClamp");
fn void polygonStipple(uint *mask) @extname("glPolygonStipple");
fn void popAttrib() @extname("glPopAttrib");
fn void popClientAttrib() @extname("glPopClientAttrib");
fn void popDebugGroup() @extname("glPopDebugGroup");
fn void popMatrix() @extname("glPopMatrix");
fn void popName() @extname("glPopName");
fn void primitiveRestartIndex(uint index) @extname("glPrimitiveRestartIndex");
fn void prioritizeTextures(isize n, uint *textures, float *priorities) @extname("glPrioritizeTextures");
fn void programBinary(uint program, int binaryFormat, int* *binary, isize length) @extname("glProgramBinary");
fn void programParameteri(uint program, int pname, int value) @extname("glProgramParameteri");
fn void programUniform1d(uint program, int location, double v0) @extname("glProgramUniform1d");
fn void programUniform1dv(uint program, int location, isize count, double *value) @extname("glProgramUniform1dv");
fn void programUniform1f(uint program, int location, float v0) @extname("glProgramUniform1f");
fn void programUniform1fv(uint program, int location, isize count, float *value) @extname("glProgramUniform1fv");
fn void programUniform1i(uint program, int location, int v0) @extname("glProgramUniform1i");
fn void programUniform1iv(uint program, int location, isize count, int *value) @extname("glProgramUniform1iv");
fn void programUniform1ui(uint program, int location, uint v0) @extname("glProgramUniform1ui");
fn void programUniform1uiv(uint program, int location, isize count, uint *value) @extname("glProgramUniform1uiv");
fn void programUniform2d(uint program, int location, double v0, double v1) @extname("glProgramUniform2d");
fn void programUniform2dv(uint program, int location, isize count, double *value) @extname("glProgramUniform2dv");
fn void programUniform2f(uint program, int location, float v0, float v1) @extname("glProgramUniform2f");
fn void programUniform2fv(uint program, int location, isize count, float *value) @extname("glProgramUniform2fv");
fn void programUniform2i(uint program, int location, int v0, int v1) @extname("glProgramUniform2i");
fn void programUniform2iv(uint program, int location, isize count, int *value) @extname("glProgramUniform2iv");
fn void programUniform2ui(uint program, int location, uint v0, uint v1) @extname("glProgramUniform2ui");
fn void programUniform2uiv(uint program, int location, isize count, uint *value) @extname("glProgramUniform2uiv");
fn void programUniform3d(uint program, int location, double v0, double v1, double v2) @extname("glProgramUniform3d");
fn void programUniform3dv(uint program, int location, isize count, double *value) @extname("glProgramUniform3dv");
fn void programUniform3f(uint program, int location, float v0, float v1, float v2) @extname("glProgramUniform3f");
fn void programUniform3fv(uint program, int location, isize count, float *value) @extname("glProgramUniform3fv");
fn void programUniform3i(uint program, int location, int v0, int v1, int v2) @extname("glProgramUniform3i");
fn void programUniform3iv(uint program, int location, isize count, int *value) @extname("glProgramUniform3iv");
fn void programUniform3ui(uint program, int location, uint v0, uint v1, uint v2) @extname("glProgramUniform3ui");
fn void programUniform3uiv(uint program, int location, isize count, uint *value) @extname("glProgramUniform3uiv");
fn void programUniform4d(uint program, int location, double v0, double v1, double v2, double v3) @extname("glProgramUniform4d");
fn void programUniform4dv(uint program, int location, isize count, double *value) @extname("glProgramUniform4dv");
fn void programUniform4f(uint program, int location, float v0, float v1, float v2, float v3) @extname("glProgramUniform4f");
fn void programUniform4fv(uint program, int location, isize count, float *value) @extname("glProgramUniform4fv");
fn void programUniform4i(uint program, int location, int v0, int v1, int v2, int v3) @extname("glProgramUniform4i");
fn void programUniform4iv(uint program, int location, isize count, int *value) @extname("glProgramUniform4iv");
fn void programUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3) @extname("glProgramUniform4ui");
fn void programUniform4uiv(uint program, int location, isize count, uint *value) @extname("glProgramUniform4uiv");
fn void programUniformMatrix2dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix2dv");
fn void programUniformMatrix2fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix2fv");
fn void programUniformMatrix2x3dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix2x3dv");
fn void programUniformMatrix2x3fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix2x3fv");
fn void programUniformMatrix2x4dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix2x4dv");
fn void programUniformMatrix2x4fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix2x4fv");
fn void programUniformMatrix3dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix3dv");
fn void programUniformMatrix3fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix3fv");
fn void programUniformMatrix3x2dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix3x2dv");
fn void programUniformMatrix3x2fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix3x2fv");
fn void programUniformMatrix3x4dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix3x4dv");
fn void programUniformMatrix3x4fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix3x4fv");
fn void programUniformMatrix4dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix4dv");
fn void programUniformMatrix4fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix4fv");
fn void programUniformMatrix4x2dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix4x2dv");
fn void programUniformMatrix4x2fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix4x2fv");
fn void programUniformMatrix4x3dv(uint program, int location, isize count, bool transpose, double *value) @extname("glProgramUniformMatrix4x3dv");
fn void programUniformMatrix4x3fv(uint program, int location, isize count, bool transpose, float *value) @extname("glProgramUniformMatrix4x3fv");
fn void provokingVertex(int mode) @extname("glProvokingVertex");
fn void pushAttrib(int mask) @extname("glPushAttrib");
fn void pushClientAttrib(int mask) @extname("glPushClientAttrib");
fn void pushDebugGroup(int source, uint id, isize length, char *message) @extname("glPushDebugGroup");
fn void pushMatrix() @extname("glPushMatrix");
fn void pushName(uint name) @extname("glPushName");
fn void queryCounter(uint id, int target) @extname("glQueryCounter");
fn void rasterPos2d(double x, double y) @extname("glRasterPos2d");
fn void rasterPos2dv(double *v) @extname("glRasterPos2dv");
fn void rasterPos2f(float x, float y) @extname("glRasterPos2f");
fn void rasterPos2fv(float *v) @extname("glRasterPos2fv");
fn void rasterPos2i(int x, int y) @extname("glRasterPos2i");
fn void rasterPos2iv(int *v) @extname("glRasterPos2iv");
fn void rasterPos2s(short x, short y) @extname("glRasterPos2s");
fn void rasterPos2sv(short *v) @extname("glRasterPos2sv");
fn void rasterPos3d(double x, double y, double z) @extname("glRasterPos3d");
fn void rasterPos3dv(double *v) @extname("glRasterPos3dv");
fn void rasterPos3f(float x, float y, float z) @extname("glRasterPos3f");
fn void rasterPos3fv(float *v) @extname("glRasterPos3fv");
fn void rasterPos3i(int x, int y, int z) @extname("glRasterPos3i");
fn void rasterPos3iv(int *v) @extname("glRasterPos3iv");
fn void rasterPos3s(short x, short y, short z) @extname("glRasterPos3s");
fn void rasterPos3sv(short *v) @extname("glRasterPos3sv");
fn void rasterPos4d(double x, double y, double z, double w) @extname("glRasterPos4d");
fn void rasterPos4dv(double *v) @extname("glRasterPos4dv");
fn void rasterPos4f(float x, float y, float z, float w) @extname("glRasterPos4f");
fn void rasterPos4fv(float *v) @extname("glRasterPos4fv");
fn void rasterPos4i(int x, int y, int z, int w) @extname("glRasterPos4i");
fn void rasterPos4iv(int *v) @extname("glRasterPos4iv");
fn void rasterPos4s(short x, short y, short z, short w) @extname("glRasterPos4s");
fn void rasterPos4sv(short *v) @extname("glRasterPos4sv");
fn void readBuffer(int src) @extname("glReadBuffer");
fn void readPixels(int x, int y, isize width, isize height, int format, int type, void *pixels) @extname("glReadPixels");
fn void readnPixels(int x, int y, isize width, isize height, int format, int type, isize bufSize, void *data) @extname("glReadnPixels");
fn void rectd(double x1, double y1, double x2, double y2) @extname("glRectd");
fn void rectdv(double *v1, double *v2) @extname("glRectdv");
fn void rectf(float x1, float y1, float x2, float y2) @extname("glRectf");
fn void rectfv(float *v1, float *v2) @extname("glRectfv");
fn void recti(int x1, int y1, int x2, int y2) @extname("glRecti");
fn void rectiv(int *v1, int *v2) @extname("glRectiv");
fn void rects(short x1, short y1, short x2, short y2) @extname("glRects");
fn void rectsv(short *v1, short *v2) @extname("glRectsv");
fn void releaseShaderCompiler() @extname("glReleaseShaderCompiler");
fn int renderMode(int mode) @extname("glRenderMode");
fn void renderbufferStorage(int target, int internalformat, isize width, isize height) @extname("glRenderbufferStorage");
fn void renderbufferStorageMultisample(int target, isize samples, int internalformat, isize width, isize height) @extname("glRenderbufferStorageMultisample");
fn void resumeTransformFeedback() @extname("glResumeTransformFeedback");
fn void rotated(double angle, double x, double y, double z) @extname("glRotated");
fn void rotatef(float angle, float x, float y, float z) @extname("glRotatef");
fn void sampleMaski(uint maskNumber, int mask) @extname("glSampleMaski");
fn void samplerParameterIiv(uint sampler, int pname, int *param) @extname("glSamplerParameterIiv");
fn void samplerParameterIuiv(uint sampler, int pname, uint *param) @extname("glSamplerParameterIuiv");
fn void samplerParameterf(uint sampler, int pname, float param) @extname("glSamplerParameterf");
fn void samplerParameterfv(uint sampler, int pname, float *param) @extname("glSamplerParameterfv");
fn void samplerParameteri(uint sampler, int pname, int param) @extname("glSamplerParameteri");
fn void samplerParameteriv(uint sampler, int pname, int *param) @extname("glSamplerParameteriv");
fn void scaled(double x, double y, double z) @extname("glScaled");
fn void scalef(float x, float y, float z) @extname("glScalef");
fn void scissor(int x, int y, isize width, isize height) @extname("glScissor");
fn void scissorArrayv(uint first, isize count, int *v) @extname("glScissorArrayv");
fn void scissorIndexed(uint index, int left, int bottom, isize width, isize height) @extname("glScissorIndexed");
fn void scissorIndexedv(uint index, int *v) @extname("glScissorIndexedv");
fn void secondaryColor3b(ushort red, ushort green, ushort blue) @extname("glSecondaryColor3b");
fn void secondaryColor3bv(ushort *v) @extname("glSecondaryColor3bv");
fn void secondaryColor3d(double red, double green, double blue) @extname("glSecondaryColor3d");
fn void secondaryColor3dv(double *v) @extname("glSecondaryColor3dv");
fn void secondaryColor3f(float red, float green, float blue) @extname("glSecondaryColor3f");
fn void secondaryColor3fv(float *v) @extname("glSecondaryColor3fv");
fn void secondaryColor3i(int red, int green, int blue) @extname("glSecondaryColor3i");
fn void secondaryColor3iv(int *v) @extname("glSecondaryColor3iv");
fn void secondaryColor3s(short red, short green, short blue) @extname("glSecondaryColor3s");
fn void secondaryColor3sv(short *v) @extname("glSecondaryColor3sv");
fn void secondaryColor3ub(uint red, uint green, uint blue) @extname("glSecondaryColor3ub");
fn void secondaryColor3ubv(uint *v) @extname("glSecondaryColor3ubv");
fn void secondaryColor3ui(uint red, uint green, uint blue) @extname("glSecondaryColor3ui");
fn void secondaryColor3uiv(uint *v) @extname("glSecondaryColor3uiv");
fn void secondaryColor3us(ushort red, ushort green, ushort blue) @extname("glSecondaryColor3us");
fn void secondaryColor3usv(ushort *v) @extname("glSecondaryColor3usv");
fn void secondaryColorP3ui(int type, uint color) @extname("glSecondaryColorP3ui");
fn void secondaryColorP3uiv(int type, uint *color) @extname("glSecondaryColorP3uiv");
fn void secondaryColorPointer(int size, int type, isize stride, int* *pointer) @extname("glSecondaryColorPointer");
fn void selectBuffer(isize size, uint *buffer) @extname("glSelectBuffer");
fn void shadeModel(int mode) @extname("glShadeModel");
fn void shaderBinary(isize count, uint *shaders, int binaryFormat, int* *binary, isize length) @extname("glShaderBinary");
fn void shaderSource(uint shader, isize count, char **string, int *length) @extname("glShaderSource");
fn void shaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding) @extname("glShaderStorageBlockBinding");
fn void specializeShader(uint shader, char *pEntryPoint, uint numSpecializationConstants, uint *pConstantIndex, uint *pConstantValue) @extname("glSpecializeShader");
fn void stencilFunc(int func_param, int ref, uint mask) @extname("glStencilFunc");
fn void stencilFuncSeparate(int face, int func_param, int ref, uint mask) @extname("glStencilFuncSeparate");
fn void stencilMask(uint mask) @extname("glStencilMask");
fn void stencilMaskSeparate(int face, uint mask) @extname("glStencilMaskSeparate");
fn void stencilOp(int fail, int zfail, int zpass) @extname("glStencilOp");
fn void stencilOpSeparate(int face, int sfail, int dpfail, int dppass) @extname("glStencilOpSeparate");
fn void texBuffer(int target, int internalformat, uint buffer) @extname("glTexBuffer");
fn void texBufferRange(int target, int internalformat, uint buffer, iptr** offset, int size) @extname("glTexBufferRange");
fn void texCoord1d(double s) @extname("glTexCoord1d");
fn void texCoord1dv(double *v) @extname("glTexCoord1dv");
fn void texCoord1f(float s) @extname("glTexCoord1f");
fn void texCoord1fv(float *v) @extname("glTexCoord1fv");
fn void texCoord1i(int s) @extname("glTexCoord1i");
fn void texCoord1iv(int *v) @extname("glTexCoord1iv");
fn void texCoord1s(short s) @extname("glTexCoord1s");
fn void texCoord1sv(short *v) @extname("glTexCoord1sv");
fn void texCoord2d(double s, double t) @extname("glTexCoord2d");
fn void texCoord2dv(double *v) @extname("glTexCoord2dv");
fn void texCoord2f(float s, float t) @extname("glTexCoord2f");
fn void texCoord2fv(float *v) @extname("glTexCoord2fv");
fn void texCoord2i(int s, int t) @extname("glTexCoord2i");
fn void texCoord2iv(int *v) @extname("glTexCoord2iv");
fn void texCoord2s(short s, short t) @extname("glTexCoord2s");
fn void texCoord2sv(short *v) @extname("glTexCoord2sv");
fn void texCoord3d(double s, double t, double r) @extname("glTexCoord3d");
fn void texCoord3dv(double *v) @extname("glTexCoord3dv");
fn void texCoord3f(float s, float t, float r) @extname("glTexCoord3f");
fn void texCoord3fv(float *v) @extname("glTexCoord3fv");
fn void texCoord3i(int s, int t, int r) @extname("glTexCoord3i");
fn void texCoord3iv(int *v) @extname("glTexCoord3iv");
fn void texCoord3s(short s, short t, short r) @extname("glTexCoord3s");
fn void texCoord3sv(short *v) @extname("glTexCoord3sv");
fn void texCoord4d(double s, double t, double r, double q) @extname("glTexCoord4d");
fn void texCoord4dv(double *v) @extname("glTexCoord4dv");
fn void texCoord4f(float s, float t, float r, float q) @extname("glTexCoord4f");
fn void texCoord4fv(float *v) @extname("glTexCoord4fv");
fn void texCoord4i(int s, int t, int r, int q) @extname("glTexCoord4i");
fn void texCoord4iv(int *v) @extname("glTexCoord4iv");
fn void texCoord4s(short s, short t, short r, short q) @extname("glTexCoord4s");
fn void texCoord4sv(short *v) @extname("glTexCoord4sv");
fn void texCoordP1ui(int type, uint coords) @extname("glTexCoordP1ui");
fn void texCoordP1uiv(int type, uint *coords) @extname("glTexCoordP1uiv");
fn void texCoordP2ui(int type, uint coords) @extname("glTexCoordP2ui");
fn void texCoordP2uiv(int type, uint *coords) @extname("glTexCoordP2uiv");
fn void texCoordP3ui(int type, uint coords) @extname("glTexCoordP3ui");
fn void texCoordP3uiv(int type, uint *coords) @extname("glTexCoordP3uiv");
fn void texCoordP4ui(int type, uint coords) @extname("glTexCoordP4ui");
fn void texCoordP4uiv(int type, uint *coords) @extname("glTexCoordP4uiv");
fn void texCoordPointer(int size, int type, isize stride, int* *pointer) @extname("glTexCoordPointer");
fn void texEnvf(int target, int pname, float param) @extname("glTexEnvf");
fn void texEnvfv(int target, int pname, float *params) @extname("glTexEnvfv");
fn void texEnvi(int target, int pname, int param) @extname("glTexEnvi");
fn void texEnviv(int target, int pname, int *params) @extname("glTexEnviv");
fn void texGend(int coord, int pname, double param) @extname("glTexGend");
fn void texGendv(int coord, int pname, double *params) @extname("glTexGendv");
fn void texGenf(int coord, int pname, float param) @extname("glTexGenf");
fn void texGenfv(int coord, int pname, float *params) @extname("glTexGenfv");
fn void texGeni(int coord, int pname, int param) @extname("glTexGeni");
fn void texGeniv(int coord, int pname, int *params) @extname("glTexGeniv");
fn void texImage1D(int target, int level, int internalformat, isize width, int border, int format, int type, int* *pixels) @extname("glTexImage1D");
fn void texImage2D(int target, int level, int internalformat, isize width, isize height, int border, int format, int type, int* *pixels) @extname("glTexImage2D");
fn void texImage2DMultisample(int target, isize samples, int internalformat, isize width, isize height, bool fixedsamplelocations) @extname("glTexImage2DMultisample");
fn void texImage3DMultisample(int target, isize samples, int internalformat, isize width, isize height, isize depth, bool fixedsamplelocations) @extname("glTexImage3DMultisample");
fn void texParameterIiv(int target, int pname, int *params) @extname("glTexParameterIiv");
fn void texParameterIuiv(int target, int pname, uint *params) @extname("glTexParameterIuiv");
fn void texParameterf(int target, int pname, float param) @extname("glTexParameterf");
fn void texParameterfv(int target, int pname, float *params) @extname("glTexParameterfv");
fn void texParameteri(int target, int pname, int param) @extname("glTexParameteri");
fn void texParameteriv(int target, int pname, int *params) @extname("glTexParameteriv");
fn void texStorage1D(int target, isize levels, int internalformat, isize width) @extname("glTexStorage1D");
fn void texStorage2D(int target, isize levels, int internalformat, isize width, isize height) @extname("glTexStorage2D");
fn void texStorage2DMultisample(int target, isize samples, int internalformat, isize width, isize height, bool fixedsamplelocations) @extname("glTexStorage2DMultisample");
fn void texStorage3D(int target, isize levels, int internalformat, isize width, isize height, isize depth) @extname("glTexStorage3D");
fn void texStorage3DMultisample(int target, isize samples, int internalformat, isize width, isize height, isize depth, bool fixedsamplelocations) @extname("glTexStorage3DMultisample");
fn void texSubImage1D(int target, int level, int xoffset, isize width, int format, int type, int* *pixels) @extname("glTexSubImage1D");
fn void texSubImage2D(int target, int level, int xoffset, int yoffset, isize width, isize height, int format, int type, int* *pixels) @extname("glTexSubImage2D");
fn void textureBarrier() @extname("glTextureBarrier");
fn void textureBuffer(uint texture, int internalformat, uint buffer) @extname("glTextureBuffer");
fn void textureBufferRange(uint texture, int internalformat, uint buffer, iptr** offset, int size) @extname("glTextureBufferRange");
fn void textureParameterIiv(uint texture, int pname, int *params) @extname("glTextureParameterIiv");
fn void textureParameterIuiv(uint texture, int pname, uint *params) @extname("glTextureParameterIuiv");
fn void textureParameterf(uint texture, int pname, float param) @extname("glTextureParameterf");
fn void textureParameterfv(uint texture, int pname, float *param) @extname("glTextureParameterfv");
fn void textureParameteri(uint texture, int pname, int param) @extname("glTextureParameteri");
fn void textureParameteriv(uint texture, int pname, int *param) @extname("glTextureParameteriv");
fn void textureStorage1D(uint texture, isize levels, int internalformat, isize width) @extname("glTextureStorage1D");
fn void textureStorage2D(uint texture, isize levels, int internalformat, isize width, isize height) @extname("glTextureStorage2D");
fn void textureStorage2DMultisample(uint texture, isize samples, int internalformat, isize width, isize height, bool fixedsamplelocations) @extname("glTextureStorage2DMultisample");
fn void textureStorage3D(uint texture, isize levels, int internalformat, isize width, isize height, isize depth) @extname("glTextureStorage3D");
fn void textureStorage3DMultisample(uint texture, isize samples, int internalformat, isize width, isize height, isize depth, bool fixedsamplelocations) @extname("glTextureStorage3DMultisample");
fn void textureSubImage1D(uint texture, int level, int xoffset, isize width, int format, int type, int* *pixels) @extname("glTextureSubImage1D");
fn void textureSubImage2D(uint texture, int level, int xoffset, int yoffset, isize width, isize height, int format, int type, int* *pixels) @extname("glTextureSubImage2D");
fn void textureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, isize width, isize height, isize depth, int format, int type, int* *pixels) @extname("glTextureSubImage3D");
fn void textureView(uint texture, int target, uint origtexture, int internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) @extname("glTextureView");
fn void transformFeedbackBufferBase(uint xfb, uint index, uint buffer) @extname("glTransformFeedbackBufferBase");
fn void transformFeedbackBufferRange(uint xfb, uint index, uint buffer, iptr** offset, int size) @extname("glTransformFeedbackBufferRange");
fn void transformFeedbackVaryings(uint program, isize count, char **varyings, int bufferMode) @extname("glTransformFeedbackVaryings");
fn void translated(double x, double y, double z) @extname("glTranslated");
fn void translatef(float x, float y, float z) @extname("glTranslatef");
fn void uniform1d(int location, double x) @extname("glUniform1d");
fn void uniform1dv(int location, isize count, double *value) @extname("glUniform1dv");
fn void uniform1f(int location, float v0) @extname("glUniform1f");
fn void uniform1fv(int location, isize count, float *value) @extname("glUniform1fv");
fn void uniform1i(int location, int v0) @extname("glUniform1i");
fn void uniform1iv(int location, isize count, int *value) @extname("glUniform1iv");
fn void uniform1ui(int location, uint v0) @extname("glUniform1ui");
fn void uniform1uiv(int location, isize count, uint *value) @extname("glUniform1uiv");
fn void uniform2d(int location, double x, double y) @extname("glUniform2d");
fn void uniform2dv(int location, isize count, double *value) @extname("glUniform2dv");
fn void uniform2f(int location, float v0, float v1) @extname("glUniform2f");
fn void uniform2fv(int location, isize count, float *value) @extname("glUniform2fv");
fn void uniform2i(int location, int v0, int v1) @extname("glUniform2i");
fn void uniform2iv(int location, isize count, int *value) @extname("glUniform2iv");
fn void uniform2ui(int location, uint v0, uint v1) @extname("glUniform2ui");
fn void uniform2uiv(int location, isize count, uint *value) @extname("glUniform2uiv");
fn void uniform3d(int location, double x, double y, double z) @extname("glUniform3d");
fn void uniform3dv(int location, isize count, double *value) @extname("glUniform3dv");
fn void uniform3f(int location, float v0, float v1, float v2) @extname("glUniform3f");
fn void uniform3fv(int location, isize count, float *value) @extname("glUniform3fv");
fn void uniform3i(int location, int v0, int v1, int v2) @extname("glUniform3i");
fn void uniform3iv(int location, isize count, int *value) @extname("glUniform3iv");
fn void uniform3ui(int location, uint v0, uint v1, uint v2) @extname("glUniform3ui");
fn void uniform3uiv(int location, isize count, uint *value) @extname("glUniform3uiv");
fn void uniform4d(int location, double x, double y, double z, double w) @extname("glUniform4d");
fn void uniform4dv(int location, isize count, double *value) @extname("glUniform4dv");
fn void uniform4f(int location, float v0, float v1, float v2, float v3) @extname("glUniform4f");
fn void uniform4fv(int location, isize count, float *value) @extname("glUniform4fv");
fn void uniform4i(int location, int v0, int v1, int v2, int v3) @extname("glUniform4i");
fn void uniform4iv(int location, isize count, int *value) @extname("glUniform4iv");
fn void uniform4ui(int location, uint v0, uint v1, uint v2, uint v3) @extname("glUniform4ui");
fn void uniform4uiv(int location, isize count, uint *value) @extname("glUniform4uiv");
fn void uniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) @extname("glUniformBlockBinding");
fn void uniformMatrix2dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix2dv");
fn void uniformMatrix2fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix2fv");
fn void uniformMatrix2x3dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix2x3dv");
fn void uniformMatrix2x3fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix2x3fv");
fn void uniformMatrix2x4dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix2x4dv");
fn void uniformMatrix2x4fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix2x4fv");
fn void uniformMatrix3dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix3dv");
fn void uniformMatrix3fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix3fv");
fn void uniformMatrix3x2dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix3x2dv");
fn void uniformMatrix3x2fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix3x2fv");
fn void uniformMatrix3x4dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix3x4dv");
fn void uniformMatrix3x4fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix3x4fv");
fn void uniformMatrix4dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix4dv");
fn void uniformMatrix4fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix4fv");
fn void uniformMatrix4x2dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix4x2dv");
fn void uniformMatrix4x2fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix4x2fv");
fn void uniformMatrix4x3dv(int location, isize count, bool transpose, double *value) @extname("glUniformMatrix4x3dv");
fn void uniformMatrix4x3fv(int location, isize count, bool transpose, float *value) @extname("glUniformMatrix4x3fv");
fn void uniformSubroutinesuiv(int shadertype, isize count, uint *indices) @extname("glUniformSubroutinesuiv");
fn bool unmapBuffer(int target) @extname("glUnmapBuffer");
fn bool unmapNamedBuffer(uint buffer) @extname("glUnmapNamedBuffer");
fn void useProgram(uint program) @extname("glUseProgram");
fn void useProgramStages(uint pipeline, int stages, uint program) @extname("glUseProgramStages");
fn void validateProgram(uint program) @extname("glValidateProgram");
fn void validateProgramPipeline(uint pipeline) @extname("glValidateProgramPipeline");
fn void vertex2d(double x, double y) @extname("glVertex2d");
fn void vertex2dv(double *v) @extname("glVertex2dv");
fn void vertex2f(float x, float y) @extname("glVertex2f");
fn void vertex2fv(float *v) @extname("glVertex2fv");
fn void vertex2i(int x, int y) @extname("glVertex2i");
fn void vertex2iv(int *v) @extname("glVertex2iv");
fn void vertex2s(short x, short y) @extname("glVertex2s");
fn void vertex2sv(short *v) @extname("glVertex2sv");
fn void vertex3d(double x, double y, double z) @extname("glVertex3d");
fn void vertex3dv(double *v) @extname("glVertex3dv");
fn void vertex3f(float x, float y, float z) @extname("glVertex3f");
fn void vertex3fv(float *v) @extname("glVertex3fv");
fn void vertex3i(int x, int y, int z) @extname("glVertex3i");
fn void vertex3iv(int *v) @extname("glVertex3iv");
fn void vertex3s(short x, short y, short z) @extname("glVertex3s");
fn void vertex3sv(short *v) @extname("glVertex3sv");
fn void vertex4d(double x, double y, double z, double w) @extname("glVertex4d");
fn void vertex4dv(double *v) @extname("glVertex4dv");
fn void vertex4f(float x, float y, float z, float w) @extname("glVertex4f");
fn void vertex4fv(float *v) @extname("glVertex4fv");
fn void vertex4i(int x, int y, int z, int w) @extname("glVertex4i");
fn void vertex4iv(int *v) @extname("glVertex4iv");
fn void vertex4s(short x, short y, short z, short w) @extname("glVertex4s");
fn void vertex4sv(short *v) @extname("glVertex4sv");
fn void vertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) @extname("glVertexArrayAttribBinding");
fn void vertexArrayAttribFormat(uint vaobj, uint attribindex, int size, int type, bool normalized, uint relativeoffset) @extname("glVertexArrayAttribFormat");
fn void vertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) @extname("glVertexArrayAttribIFormat");
fn void vertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, int type, uint relativeoffset) @extname("glVertexArrayAttribLFormat");
fn void vertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) @extname("glVertexArrayBindingDivisor");
fn void vertexArrayElementBuffer(uint vaobj, uint buffer) @extname("glVertexArrayElementBuffer");
fn void vertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, iptr** offset, isize stride) @extname("glVertexArrayVertexBuffer");
fn void vertexArrayVertexBuffers(uint vaobj, uint first, isize count, uint *buffers, iptr** *offsets, isize *strides) @extname("glVertexArrayVertexBuffers");
fn void vertexAttrib1d(uint index, double x) @extname("glVertexAttrib1d");
fn void vertexAttrib1dv(uint index, double *v) @extname("glVertexAttrib1dv");
fn void vertexAttrib1f(uint index, float x) @extname("glVertexAttrib1f");
fn void vertexAttrib1fv(uint index, float *v) @extname("glVertexAttrib1fv");
fn void vertexAttrib1s(uint index, short x) @extname("glVertexAttrib1s");
fn void vertexAttrib1sv(uint index, short *v) @extname("glVertexAttrib1sv");
fn void vertexAttrib2d(uint index, double x, double y) @extname("glVertexAttrib2d");
fn void vertexAttrib2dv(uint index, double *v) @extname("glVertexAttrib2dv");
fn void vertexAttrib2f(uint index, float x, float y) @extname("glVertexAttrib2f");
fn void vertexAttrib2fv(uint index, float *v) @extname("glVertexAttrib2fv");
fn void vertexAttrib2s(uint index, short x, short y) @extname("glVertexAttrib2s");
fn void vertexAttrib2sv(uint index, short *v) @extname("glVertexAttrib2sv");
fn void vertexAttrib3d(uint index, double x, double y, double z) @extname("glVertexAttrib3d");
fn void vertexAttrib3dv(uint index, double *v) @extname("glVertexAttrib3dv");
fn void vertexAttrib3f(uint index, float x, float y, float z) @extname("glVertexAttrib3f");
fn void vertexAttrib3fv(uint index, float *v) @extname("glVertexAttrib3fv");
fn void vertexAttrib3s(uint index, short x, short y, short z) @extname("glVertexAttrib3s");
fn void vertexAttrib3sv(uint index, short *v) @extname("glVertexAttrib3sv");
fn void vertexAttrib4Nbv(uint index, ushort *v) @extname("glVertexAttrib4Nbv");
fn void vertexAttrib4Niv(uint index, int *v) @extname("glVertexAttrib4Niv");
fn void vertexAttrib4Nsv(uint index, short *v) @extname("glVertexAttrib4Nsv");
fn void vertexAttrib4Nub(uint index, uint x, uint y, uint z, uint w) @extname("glVertexAttrib4Nub");
fn void vertexAttrib4Nubv(uint index, uint *v) @extname("glVertexAttrib4Nubv");
fn void vertexAttrib4Nuiv(uint index, uint *v) @extname("glVertexAttrib4Nuiv");
fn void vertexAttrib4Nusv(uint index, ushort *v) @extname("glVertexAttrib4Nusv");
fn void vertexAttrib4bv(uint index, ushort *v) @extname("glVertexAttrib4bv");
fn void vertexAttrib4d(uint index, double x, double y, double z, double w) @extname("glVertexAttrib4d");
fn void vertexAttrib4dv(uint index, double *v) @extname("glVertexAttrib4dv");
fn void vertexAttrib4f(uint index, float x, float y, float z, float w) @extname("glVertexAttrib4f");
fn void vertexAttrib4fv(uint index, float *v) @extname("glVertexAttrib4fv");
fn void vertexAttrib4iv(uint index, int *v) @extname("glVertexAttrib4iv");
fn void vertexAttrib4s(uint index, short x, short y, short z, short w) @extname("glVertexAttrib4s");
fn void vertexAttrib4sv(uint index, short *v) @extname("glVertexAttrib4sv");
fn void vertexAttrib4ubv(uint index, uint *v) @extname("glVertexAttrib4ubv");
fn void vertexAttrib4uiv(uint index, uint *v) @extname("glVertexAttrib4uiv");
fn void vertexAttrib4usv(uint index, ushort *v) @extname("glVertexAttrib4usv");
fn void vertexAttribBinding(uint attribindex, uint bindingindex) @extname("glVertexAttribBinding");
fn void vertexAttribDivisor(uint index, uint divisor) @extname("glVertexAttribDivisor");
fn void vertexAttribFormat(uint attribindex, int size, int type, bool normalized, uint relativeoffset) @extname("glVertexAttribFormat");
fn void vertexAttribI1i(uint index, int x) @extname("glVertexAttribI1i");
fn void vertexAttribI1iv(uint index, int *v) @extname("glVertexAttribI1iv");
fn void vertexAttribI1ui(uint index, uint x) @extname("glVertexAttribI1ui");
fn void vertexAttribI1uiv(uint index, uint *v) @extname("glVertexAttribI1uiv");
fn void vertexAttribI2i(uint index, int x, int y) @extname("glVertexAttribI2i");
fn void vertexAttribI2iv(uint index, int *v) @extname("glVertexAttribI2iv");
fn void vertexAttribI2ui(uint index, uint x, uint y) @extname("glVertexAttribI2ui");
fn void vertexAttribI2uiv(uint index, uint *v) @extname("glVertexAttribI2uiv");
fn void vertexAttribI3i(uint index, int x, int y, int z) @extname("glVertexAttribI3i");
fn void vertexAttribI3iv(uint index, int *v) @extname("glVertexAttribI3iv");
fn void vertexAttribI3ui(uint index, uint x, uint y, uint z) @extname("glVertexAttribI3ui");
fn void vertexAttribI3uiv(uint index, uint *v) @extname("glVertexAttribI3uiv");
fn void vertexAttribI4bv(uint index, ushort *v) @extname("glVertexAttribI4bv");
fn void vertexAttribI4i(uint index, int x, int y, int z, int w) @extname("glVertexAttribI4i");
fn void vertexAttribI4iv(uint index, int *v) @extname("glVertexAttribI4iv");
fn void vertexAttribI4sv(uint index, short *v) @extname("glVertexAttribI4sv");
fn void vertexAttribI4ubv(uint index, uint *v) @extname("glVertexAttribI4ubv");
fn void vertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) @extname("glVertexAttribI4ui");
fn void vertexAttribI4uiv(uint index, uint *v) @extname("glVertexAttribI4uiv");
fn void vertexAttribI4usv(uint index, ushort *v) @extname("glVertexAttribI4usv");
fn void vertexAttribIFormat(uint attribindex, int size, int type, uint relativeoffset) @extname("glVertexAttribIFormat");
fn void vertexAttribIPointer(uint index, int size, int type, isize stride, int* *pointer) @extname("glVertexAttribIPointer");
fn void vertexAttribL1d(uint index, double x) @extname("glVertexAttribL1d");
fn void vertexAttribL1dv(uint index, double *v) @extname("glVertexAttribL1dv");
fn void vertexAttribL2d(uint index, double x, double y) @extname("glVertexAttribL2d");
fn void vertexAttribL2dv(uint index, double *v) @extname("glVertexAttribL2dv");
fn void vertexAttribL3d(uint index, double x, double y, double z) @extname("glVertexAttribL3d");
fn void vertexAttribL3dv(uint index, double *v) @extname("glVertexAttribL3dv");
fn void vertexAttribL4d(uint index, double x, double y, double z, double w) @extname("glVertexAttribL4d");
fn void vertexAttribL4dv(uint index, double *v) @extname("glVertexAttribL4dv");
fn void vertexAttribLFormat(uint attribindex, int size, int type, uint relativeoffset) @extname("glVertexAttribLFormat");
fn void vertexAttribLPointer(uint index, int size, int type, isize stride, int* *pointer) @extname("glVertexAttribLPointer");
fn void vertexAttribP1ui(uint index, int type, bool normalized, uint value) @extname("glVertexAttribP1ui");
fn void vertexAttribP1uiv(uint index, int type, bool normalized, uint *value) @extname("glVertexAttribP1uiv");
fn void vertexAttribP2ui(uint index, int type, bool normalized, uint value) @extname("glVertexAttribP2ui");
fn void vertexAttribP2uiv(uint index, int type, bool normalized, uint *value) @extname("glVertexAttribP2uiv");
fn void vertexAttribP3ui(uint index, int type, bool normalized, uint value) @extname("glVertexAttribP3ui");
fn void vertexAttribP3uiv(uint index, int type, bool normalized, uint *value) @extname("glVertexAttribP3uiv");
fn void vertexAttribP4ui(uint index, int type, bool normalized, uint value) @extname("glVertexAttribP4ui");
fn void vertexAttribP4uiv(uint index, int type, bool normalized, uint *value) @extname("glVertexAttribP4uiv");
fn void vertexAttribPointer(uint index, int size, int type, bool normalized, isize stride, int* *pointer) @extname("glVertexAttribPointer");
fn void vertexBindingDivisor(uint bindingindex, uint divisor) @extname("glVertexBindingDivisor");
fn void vertexP2ui(int type, uint value) @extname("glVertexP2ui");
fn void vertexP2uiv(int type, uint *value) @extname("glVertexP2uiv");
fn void vertexP3ui(int type, uint value) @extname("glVertexP3ui");
fn void vertexP3uiv(int type, uint *value) @extname("glVertexP3uiv");
fn void vertexP4ui(int type, uint value) @extname("glVertexP4ui");
fn void vertexP4uiv(int type, uint *value) @extname("glVertexP4uiv");
fn void vertexPointer(int size, int type, isize stride, int* *pointer) @extname("glVertexPointer");
fn void viewport(int x, int y, isize width, isize height) @extname("glViewport");
fn void viewportArrayv(uint first, isize count, float *v) @extname("glViewportArrayv");
fn void viewportIndexedf(uint index, float x, float y, float w, float h) @extname("glViewportIndexedf");
fn void viewportIndexedfv(uint index, float *v) @extname("glViewportIndexedfv");
fn void waitSync(void* sync, int flags, ulong timeout) @extname("glWaitSync");
fn void windowPos2d(double x, double y) @extname("glWindowPos2d");
fn void windowPos2dv(double *v) @extname("glWindowPos2dv");
fn void windowPos2f(float x, float y) @extname("glWindowPos2f");
fn void windowPos2fv(float *v) @extname("glWindowPos2fv");
fn void windowPos2i(int x, int y) @extname("glWindowPos2i");
fn void windowPos2iv(int *v) @extname("glWindowPos2iv");
fn void windowPos2s(short x, short y) @extname("glWindowPos2s");
fn void windowPos2sv(short *v) @extname("glWindowPos2sv");
fn void windowPos3d(double x, double y, double z) @extname("glWindowPos3d");
fn void windowPos3dv(double *v) @extname("glWindowPos3dv");
fn void windowPos3f(float x, float y, float z) @extname("glWindowPos3f");
fn void windowPos3fv(float *v) @extname("glWindowPos3fv");
fn void windowPos3i(int x, int y, int z) @extname("glWindowPos3i");
fn void windowPos3iv(int *v) @extname("glWindowPos3iv");
fn void windowPos3s(short x, short y, short z) @extname("glWindowPos3s");
fn void windowPos3sv(short *v) @extname("glWindowPos3sv");
 
// Constants 
 
const GL_CURRENT_BIT = 0x00000001;
const GL_POINT_BIT = 0x00000002;
const GL_LINE_BIT = 0x00000004;
const GL_POLYGON_BIT = 0x00000008;
const GL_POLYGON_STIPPLE_BIT = 0x00000010;
const GL_PIXEL_MODE_BIT = 0x00000020;
const GL_LIGHTING_BIT = 0x00000040;
const GL_FOG_BIT = 0x00000080;
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_ACCUM_BUFFER_BIT = 0x00000200;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_VIEWPORT_BIT = 0x00000800;
const GL_TRANSFORM_BIT = 0x00001000;
const GL_ENABLE_BIT = 0x00002000;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_HINT_BIT = 0x00008000;
const GL_EVAL_BIT = 0x00010000;
const GL_LIST_BIT = 0x00020000;
const GL_TEXTURE_BIT = 0x00040000;
const GL_SCISSOR_BIT = 0x00080000;
const GL_MULTISAMPLE_BIT = 0x20000000;
const GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_DYNAMIC_STORAGE_BIT = 0x0100;
const GL_CLIENT_STORAGE_BIT = 0x0200;
const GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
const GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
const GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const GL_MAP_READ_BIT = 0x0001;
const GL_MAP_WRITE_BIT = 0x0002;
const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const GL_MAP_PERSISTENT_BIT = 0x0040;
const GL_MAP_COHERENT_BIT = 0x0080;
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const GL_UNIFORM_BARRIER_BIT = 0x00000004;
const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GL_COMMAND_BARRIER_BIT = 0x00000040;
const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const GL_VERTEX_SHADER_BIT = 0x00000001;
const GL_FRAGMENT_SHADER_BIT = 0x00000002;
const GL_GEOMETRY_SHADER_BIT = 0x00000004;
const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const GL_COMPUTE_SHADER_BIT = 0x00000020;
const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const GL_FALSE = 0;
const GL_NO_ERROR = 0;
const GL_ZERO = 0;
const GL_NONE = 0;
const GL_TRUE = 1;
const GL_ONE = 1;
const GL_INVALID_INDEX = 0xFFFFFFFF;
const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
const GL_POINTS = 0x0000;
const GL_LINES = 0x0001;
const GL_LINE_LOOP = 0x0002;
const GL_LINE_STRIP = 0x0003;
const GL_TRIANGLES = 0x0004;
const GL_TRIANGLE_STRIP = 0x0005;
const GL_TRIANGLE_FAN = 0x0006;
const GL_QUADS = 0x0007;
const GL_QUAD_STRIP = 0x0008;
const GL_POLYGON = 0x0009;
const GL_LINES_ADJACENCY = 0x000A;
const GL_LINE_STRIP_ADJACENCY = 0x000B;
const GL_TRIANGLES_ADJACENCY = 0x000C;
const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const GL_PATCHES = 0x000E;
const GL_ACCUM = 0x0100;
const GL_LOAD = 0x0101;
const GL_RETURN = 0x0102;
const GL_MULT = 0x0103;
const GL_ADD = 0x0104;
const GL_NEVER = 0x0200;
const GL_LESS = 0x0201;
const GL_EQUAL = 0x0202;
const GL_LEQUAL = 0x0203;
const GL_GREATER = 0x0204;
const GL_NOTEQUAL = 0x0205;
const GL_GEQUAL = 0x0206;
const GL_ALWAYS = 0x0207;
const GL_SRC_COLOR = 0x0300;
const GL_ONE_MINUS_SRC_COLOR = 0x0301;
const GL_SRC_ALPHA = 0x0302;
const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const GL_DST_ALPHA = 0x0304;
const GL_ONE_MINUS_DST_ALPHA = 0x0305;
const GL_DST_COLOR = 0x0306;
const GL_ONE_MINUS_DST_COLOR = 0x0307;
const GL_SRC_ALPHA_SATURATE = 0x0308;
const GL_FRONT_LEFT = 0x0400;
const GL_FRONT_RIGHT = 0x0401;
const GL_BACK_LEFT = 0x0402;
const GL_BACK_RIGHT = 0x0403;
const GL_FRONT = 0x0404;
const GL_BACK = 0x0405;
const GL_LEFT = 0x0406;
const GL_RIGHT = 0x0407;
const GL_FRONT_AND_BACK = 0x0408;
const GL_AUX0 = 0x0409;
const GL_AUX1 = 0x040A;
const GL_AUX2 = 0x040B;
const GL_AUX3 = 0x040C;
const GL_INVALID_ENUM = 0x0500;
const GL_INVALID_VALUE = 0x0501;
const GL_INVALID_OPERATION = 0x0502;
const GL_STACK_OVERFLOW = 0x0503;
const GL_STACK_UNDERFLOW = 0x0504;
const GL_OUT_OF_MEMORY = 0x0505;
const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const GL_CONTEXT_LOST = 0x0507;
const GL_2D = 0x0600;
const GL_3D = 0x0601;
const GL_3D_COLOR = 0x0602;
const GL_3D_COLOR_TEXTURE = 0x0603;
const GL_4D_COLOR_TEXTURE = 0x0604;
const GL_PASS_THROUGH_TOKEN = 0x0700;
const GL_POINT_TOKEN = 0x0701;
const GL_LINE_TOKEN = 0x0702;
const GL_POLYGON_TOKEN = 0x0703;
const GL_BITMAP_TOKEN = 0x0704;
const GL_DRAW_PIXEL_TOKEN = 0x0705;
const GL_COPY_PIXEL_TOKEN = 0x0706;
const GL_LINE_RESET_TOKEN = 0x0707;
const GL_EXP = 0x0800;
const GL_EXP2 = 0x0801;
const GL_CW = 0x0900;
const GL_CCW = 0x0901;
const GL_COEFF = 0x0A00;
const GL_ORDER = 0x0A01;
const GL_DOMAIN = 0x0A02;
const GL_CURRENT_COLOR = 0x0B00;
const GL_CURRENT_INDEX = 0x0B01;
const GL_CURRENT_NORMAL = 0x0B02;
const GL_CURRENT_TEXTURE_COORDS = 0x0B03;
const GL_CURRENT_RASTER_COLOR = 0x0B04;
const GL_CURRENT_RASTER_INDEX = 0x0B05;
const GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
const GL_CURRENT_RASTER_POSITION = 0x0B07;
const GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
const GL_CURRENT_RASTER_DISTANCE = 0x0B09;
const GL_POINT_SMOOTH = 0x0B10;
const GL_POINT_SIZE = 0x0B11;
const GL_POINT_SIZE_RANGE = 0x0B12;
const GL_POINT_SIZE_GRANULARITY = 0x0B13;
const GL_LINE_SMOOTH = 0x0B20;
const GL_LINE_WIDTH = 0x0B21;
const GL_LINE_WIDTH_RANGE = 0x0B22;
const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const GL_LINE_STIPPLE = 0x0B24;
const GL_LINE_STIPPLE_PATTERN = 0x0B25;
const GL_LINE_STIPPLE_REPEAT = 0x0B26;
const GL_LIST_MODE = 0x0B30;
const GL_MAX_LIST_NESTING = 0x0B31;
const GL_LIST_BASE = 0x0B32;
const GL_LIST_INDEX = 0x0B33;
const GL_POLYGON_MODE = 0x0B40;
const GL_POLYGON_SMOOTH = 0x0B41;
const GL_POLYGON_STIPPLE = 0x0B42;
const GL_EDGE_FLAG = 0x0B43;
const GL_CULL_FACE = 0x0B44;
const GL_CULL_FACE_MODE = 0x0B45;
const GL_FRONT_FACE = 0x0B46;
const GL_LIGHTING = 0x0B50;
const GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
const GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
const GL_LIGHT_MODEL_AMBIENT = 0x0B53;
const GL_SHADE_MODEL = 0x0B54;
const GL_COLOR_MATERIAL_FACE = 0x0B55;
const GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
const GL_COLOR_MATERIAL = 0x0B57;
const GL_FOG = 0x0B60;
const GL_FOG_INDEX = 0x0B61;
const GL_FOG_DENSITY = 0x0B62;
const GL_FOG_START = 0x0B63;
const GL_FOG_END = 0x0B64;
const GL_FOG_MODE = 0x0B65;
const GL_FOG_COLOR = 0x0B66;
const GL_DEPTH_RANGE = 0x0B70;
const GL_DEPTH_TEST = 0x0B71;
const GL_DEPTH_WRITEMASK = 0x0B72;
const GL_DEPTH_CLEAR_VALUE = 0x0B73;
const GL_DEPTH_FUNC = 0x0B74;
const GL_ACCUM_CLEAR_VALUE = 0x0B80;
const GL_STENCIL_TEST = 0x0B90;
const GL_STENCIL_CLEAR_VALUE = 0x0B91;
const GL_STENCIL_FUNC = 0x0B92;
const GL_STENCIL_VALUE_MASK = 0x0B93;
const GL_STENCIL_FAIL = 0x0B94;
const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const GL_STENCIL_REF = 0x0B97;
const GL_STENCIL_WRITEMASK = 0x0B98;
const GL_MATRIX_MODE = 0x0BA0;
const GL_NORMALIZE = 0x0BA1;
const GL_VIEWPORT = 0x0BA2;
const GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
const GL_PROJECTION_STACK_DEPTH = 0x0BA4;
const GL_TEXTURE_STACK_DEPTH = 0x0BA5;
const GL_MODELVIEW_MATRIX = 0x0BA6;
const GL_PROJECTION_MATRIX = 0x0BA7;
const GL_TEXTURE_MATRIX = 0x0BA8;
const GL_ATTRIB_STACK_DEPTH = 0x0BB0;
const GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
const GL_ALPHA_TEST = 0x0BC0;
const GL_ALPHA_TEST_FUNC = 0x0BC1;
const GL_ALPHA_TEST_REF = 0x0BC2;
const GL_DITHER = 0x0BD0;
const GL_BLEND_DST = 0x0BE0;
const GL_BLEND_SRC = 0x0BE1;
const GL_BLEND = 0x0BE2;
const GL_LOGIC_OP_MODE = 0x0BF0;
const GL_INDEX_LOGIC_OP = 0x0BF1;
const GL_LOGIC_OP = 0x0BF1;
const GL_COLOR_LOGIC_OP = 0x0BF2;
const GL_AUX_BUFFERS = 0x0C00;
const GL_DRAW_BUFFER = 0x0C01;
const GL_READ_BUFFER = 0x0C02;
const GL_SCISSOR_BOX = 0x0C10;
const GL_SCISSOR_TEST = 0x0C11;
const GL_INDEX_CLEAR_VALUE = 0x0C20;
const GL_INDEX_WRITEMASK = 0x0C21;
const GL_COLOR_CLEAR_VALUE = 0x0C22;
const GL_COLOR_WRITEMASK = 0x0C23;
const GL_INDEX_MODE = 0x0C30;
const GL_RGBA_MODE = 0x0C31;
const GL_DOUBLEBUFFER = 0x0C32;
const GL_STEREO = 0x0C33;
const GL_RENDER_MODE = 0x0C40;
const GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
const GL_POINT_SMOOTH_HINT = 0x0C51;
const GL_LINE_SMOOTH_HINT = 0x0C52;
const GL_POLYGON_SMOOTH_HINT = 0x0C53;
const GL_FOG_HINT = 0x0C54;
const GL_TEXTURE_GEN_S = 0x0C60;
const GL_TEXTURE_GEN_T = 0x0C61;
const GL_TEXTURE_GEN_R = 0x0C62;
const GL_TEXTURE_GEN_Q = 0x0C63;
const GL_PIXEL_MAP_I_TO_I = 0x0C70;
const GL_PIXEL_MAP_S_TO_S = 0x0C71;
const GL_PIXEL_MAP_I_TO_R = 0x0C72;
const GL_PIXEL_MAP_I_TO_G = 0x0C73;
const GL_PIXEL_MAP_I_TO_B = 0x0C74;
const GL_PIXEL_MAP_I_TO_A = 0x0C75;
const GL_PIXEL_MAP_R_TO_R = 0x0C76;
const GL_PIXEL_MAP_G_TO_G = 0x0C77;
const GL_PIXEL_MAP_B_TO_B = 0x0C78;
const GL_PIXEL_MAP_A_TO_A = 0x0C79;
const GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
const GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
const GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
const GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
const GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
const GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
const GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
const GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
const GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
const GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
const GL_UNPACK_SWAP_BYTES = 0x0CF0;
const GL_UNPACK_LSB_FIRST = 0x0CF1;
const GL_UNPACK_ROW_LENGTH = 0x0CF2;
const GL_UNPACK_SKIP_ROWS = 0x0CF3;
const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const GL_UNPACK_ALIGNMENT = 0x0CF5;
const GL_PACK_SWAP_BYTES = 0x0D00;
const GL_PACK_LSB_FIRST = 0x0D01;
const GL_PACK_ROW_LENGTH = 0x0D02;
const GL_PACK_SKIP_ROWS = 0x0D03;
const GL_PACK_SKIP_PIXELS = 0x0D04;
const GL_PACK_ALIGNMENT = 0x0D05;
const GL_MAP_COLOR = 0x0D10;
const GL_MAP_STENCIL = 0x0D11;
const GL_INDEX_SHIFT = 0x0D12;
const GL_INDEX_OFFSET = 0x0D13;
const GL_RED_SCALE = 0x0D14;
const GL_RED_BIAS = 0x0D15;
const GL_ZOOM_X = 0x0D16;
const GL_ZOOM_Y = 0x0D17;
const GL_GREEN_SCALE = 0x0D18;
const GL_GREEN_BIAS = 0x0D19;
const GL_BLUE_SCALE = 0x0D1A;
const GL_BLUE_BIAS = 0x0D1B;
const GL_ALPHA_SCALE = 0x0D1C;
const GL_ALPHA_BIAS = 0x0D1D;
const GL_DEPTH_SCALE = 0x0D1E;
const GL_DEPTH_BIAS = 0x0D1F;
const GL_MAX_EVAL_ORDER = 0x0D30;
const GL_MAX_LIGHTS = 0x0D31;
const GL_MAX_CLIP_PLANES = 0x0D32;
const GL_MAX_CLIP_DISTANCES = 0x0D32;
const GL_MAX_TEXTURE_SIZE = 0x0D33;
const GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
const GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
const GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
const GL_MAX_NAME_STACK_DEPTH = 0x0D37;
const GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
const GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
const GL_SUBPIXEL_BITS = 0x0D50;
const GL_INDEX_BITS = 0x0D51;
const GL_RED_BITS = 0x0D52;
const GL_GREEN_BITS = 0x0D53;
const GL_BLUE_BITS = 0x0D54;
const GL_ALPHA_BITS = 0x0D55;
const GL_DEPTH_BITS = 0x0D56;
const GL_STENCIL_BITS = 0x0D57;
const GL_ACCUM_RED_BITS = 0x0D58;
const GL_ACCUM_GREEN_BITS = 0x0D59;
const GL_ACCUM_BLUE_BITS = 0x0D5A;
const GL_ACCUM_ALPHA_BITS = 0x0D5B;
const GL_NAME_STACK_DEPTH = 0x0D70;
const GL_AUTO_NORMAL = 0x0D80;
const GL_MAP1_COLOR_4 = 0x0D90;
const GL_MAP1_INDEX = 0x0D91;
const GL_MAP1_NORMAL = 0x0D92;
const GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
const GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
const GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
const GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
const GL_MAP1_VERTEX_3 = 0x0D97;
const GL_MAP1_VERTEX_4 = 0x0D98;
const GL_MAP2_COLOR_4 = 0x0DB0;
const GL_MAP2_INDEX = 0x0DB1;
const GL_MAP2_NORMAL = 0x0DB2;
const GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
const GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
const GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
const GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
const GL_MAP2_VERTEX_3 = 0x0DB7;
const GL_MAP2_VERTEX_4 = 0x0DB8;
const GL_MAP1_GRID_DOMAIN = 0x0DD0;
const GL_MAP1_GRID_SEGMENTS = 0x0DD1;
const GL_MAP2_GRID_DOMAIN = 0x0DD2;
const GL_MAP2_GRID_SEGMENTS = 0x0DD3;
const GL_TEXTURE_1D = 0x0DE0;
const GL_TEXTURE_2D = 0x0DE1;
const GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
const GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
const GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
const GL_SELECTION_BUFFER_POINTER = 0x0DF3;
const GL_SELECTION_BUFFER_SIZE = 0x0DF4;
const GL_TEXTURE_WIDTH = 0x1000;
const GL_TEXTURE_HEIGHT = 0x1001;
const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const GL_TEXTURE_COMPONENTS = 0x1003;
const GL_TEXTURE_BORDER_COLOR = 0x1004;
const GL_TEXTURE_BORDER = 0x1005;
const GL_TEXTURE_TARGET = 0x1006;
const GL_DONT_CARE = 0x1100;
const GL_FASTEST = 0x1101;
const GL_NICEST = 0x1102;
const GL_AMBIENT = 0x1200;
const GL_DIFFUSE = 0x1201;
const GL_SPECULAR = 0x1202;
const GL_POSITION = 0x1203;
const GL_SPOT_DIRECTION = 0x1204;
const GL_SPOT_EXPONENT = 0x1205;
const GL_SPOT_CUTOFF = 0x1206;
const GL_CONSTANT_ATTENUATION = 0x1207;
const GL_LINEAR_ATTENUATION = 0x1208;
const GL_QUADRATIC_ATTENUATION = 0x1209;
const GL_COMPILE = 0x1300;
const GL_COMPILE_AND_EXECUTE = 0x1301;
const GL_BYTE = 0x1400;
const GL_UNSIGNED_BYTE = 0x1401;
const GL_SHORT = 0x1402;
const GL_UNSIGNED_SHORT = 0x1403;
const GL_INT = 0x1404;
const GL_UNSIGNED_INT = 0x1405;
const GL_FLOAT = 0x1406;
const GL_2_BYTES = 0x1407;
const GL_3_BYTES = 0x1408;
const GL_4_BYTES = 0x1409;
const GL_DOUBLE = 0x140A;
const GL_HALF_FLOAT = 0x140B;
const GL_FIXED = 0x140C;
const GL_CLEAR = 0x1500;
const GL_AND = 0x1501;
const GL_AND_REVERSE = 0x1502;
const GL_COPY = 0x1503;
const GL_AND_INVERTED = 0x1504;
const GL_NOOP = 0x1505;
const GL_XOR = 0x1506;
const GL_OR = 0x1507;
const GL_NOR = 0x1508;
const GL_EQUIV = 0x1509;
const GL_INVERT = 0x150A;
const GL_OR_REVERSE = 0x150B;
const GL_COPY_INVERTED = 0x150C;
const GL_OR_INVERTED = 0x150D;
const GL_NAND = 0x150E;
const GL_SET = 0x150F;
const GL_EMISSION = 0x1600;
const GL_SHININESS = 0x1601;
const GL_AMBIENT_AND_DIFFUSE = 0x1602;
const GL_COLOR_INDEXES = 0x1603;
const GL_MODELVIEW = 0x1700;
const GL_PROJECTION = 0x1701;
const GL_TEXTURE = 0x1702;
const GL_COLOR = 0x1800;
const GL_DEPTH = 0x1801;
const GL_STENCIL = 0x1802;
const GL_COLOR_INDEX = 0x1900;
const GL_STENCIL_INDEX = 0x1901;
const GL_DEPTH_COMPONENT = 0x1902;
const GL_RED = 0x1903;
const GL_GREEN = 0x1904;
const GL_BLUE = 0x1905;
const GL_ALPHA = 0x1906;
const GL_RGB = 0x1907;
const GL_RGBA = 0x1908;
const GL_LUMINANCE = 0x1909;
const GL_LUMINANCE_ALPHA = 0x190A;
const GL_BITMAP = 0x1A00;
const GL_POINT = 0x1B00;
const GL_LINE = 0x1B01;
const GL_FILL = 0x1B02;
const GL_RENDER = 0x1C00;
const GL_FEEDBACK = 0x1C01;
const GL_SELECT = 0x1C02;
const GL_FLAT = 0x1D00;
const GL_SMOOTH = 0x1D01;
const GL_KEEP = 0x1E00;
const GL_REPLACE = 0x1E01;
const GL_INCR = 0x1E02;
const GL_DECR = 0x1E03;
const GL_VENDOR = 0x1F00;
const GL_RENDERER = 0x1F01;
const GL_VERSION = 0x1F02;
const GL_EXTENSIONS = 0x1F03;
const GL_S = 0x2000;
const GL_T = 0x2001;
const GL_R = 0x2002;
const GL_Q = 0x2003;
const GL_MODULATE = 0x2100;
const GL_DECAL = 0x2101;
const GL_TEXTURE_ENV_MODE = 0x2200;
const GL_TEXTURE_ENV_COLOR = 0x2201;
const GL_TEXTURE_ENV = 0x2300;
const GL_EYE_LINEAR = 0x2400;
const GL_OBJECT_LINEAR = 0x2401;
const GL_SPHERE_MAP = 0x2402;
const GL_TEXTURE_GEN_MODE = 0x2500;
const GL_OBJECT_PLANE = 0x2501;
const GL_EYE_PLANE = 0x2502;
const GL_NEAREST = 0x2600;
const GL_LINEAR = 0x2601;
const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const GL_TEXTURE_MAG_FILTER = 0x2800;
const GL_TEXTURE_MIN_FILTER = 0x2801;
const GL_TEXTURE_WRAP_S = 0x2802;
const GL_TEXTURE_WRAP_T = 0x2803;
const GL_CLAMP = 0x2900;
const GL_REPEAT = 0x2901;
const GL_POLYGON_OFFSET_UNITS = 0x2A00;
const GL_POLYGON_OFFSET_POINT = 0x2A01;
const GL_POLYGON_OFFSET_LINE = 0x2A02;
const GL_R3_G3_B2 = 0x2A10;
const GL_V2F = 0x2A20;
const GL_V3F = 0x2A21;
const GL_C4UB_V2F = 0x2A22;
const GL_C4UB_V3F = 0x2A23;
const GL_C3F_V3F = 0x2A24;
const GL_N3F_V3F = 0x2A25;
const GL_C4F_N3F_V3F = 0x2A26;
const GL_T2F_V3F = 0x2A27;
const GL_T4F_V4F = 0x2A28;
const GL_T2F_C4UB_V3F = 0x2A29;
const GL_T2F_C3F_V3F = 0x2A2A;
const GL_T2F_N3F_V3F = 0x2A2B;
const GL_T2F_C4F_N3F_V3F = 0x2A2C;
const GL_T4F_C4F_N3F_V4F = 0x2A2D;
const GL_CLIP_PLANE0 = 0x3000;
const GL_CLIP_DISTANCE0 = 0x3000;
const GL_CLIP_PLANE1 = 0x3001;
const GL_CLIP_DISTANCE1 = 0x3001;
const GL_CLIP_PLANE2 = 0x3002;
const GL_CLIP_DISTANCE2 = 0x3002;
const GL_CLIP_PLANE3 = 0x3003;
const GL_CLIP_DISTANCE3 = 0x3003;
const GL_CLIP_PLANE4 = 0x3004;
const GL_CLIP_DISTANCE4 = 0x3004;
const GL_CLIP_PLANE5 = 0x3005;
const GL_CLIP_DISTANCE5 = 0x3005;
const GL_CLIP_DISTANCE6 = 0x3006;
const GL_CLIP_DISTANCE7 = 0x3007;
const GL_LIGHT0 = 0x4000;
const GL_LIGHT1 = 0x4001;
const GL_LIGHT2 = 0x4002;
const GL_LIGHT3 = 0x4003;
const GL_LIGHT4 = 0x4004;
const GL_LIGHT5 = 0x4005;
const GL_LIGHT6 = 0x4006;
const GL_LIGHT7 = 0x4007;
const GL_BLEND_EQUATION_RGB = 0x8009;
const GL_CONVOLUTION_1D = 0x8010;
const GL_CONVOLUTION_2D = 0x8011;
const GL_SEPARABLE_2D = 0x8012;
const GL_HISTOGRAM = 0x8024;
const GL_PROXY_HISTOGRAM = 0x8025;
const GL_MINMAX = 0x802E;
const GL_POLYGON_OFFSET_FILL = 0x8037;
const GL_POLYGON_OFFSET_FACTOR = 0x8038;
const GL_RESCALE_NORMAL = 0x803A;
const GL_ALPHA4 = 0x803B;
const GL_ALPHA8 = 0x803C;
const GL_ALPHA12 = 0x803D;
const GL_ALPHA16 = 0x803E;
const GL_LUMINANCE4 = 0x803F;
const GL_LUMINANCE8 = 0x8040;
const GL_LUMINANCE12 = 0x8041;
const GL_LUMINANCE16 = 0x8042;
const GL_LUMINANCE4_ALPHA4 = 0x8043;
const GL_LUMINANCE6_ALPHA2 = 0x8044;
const GL_LUMINANCE8_ALPHA8 = 0x8045;
const GL_LUMINANCE12_ALPHA4 = 0x8046;
const GL_LUMINANCE12_ALPHA12 = 0x8047;
const GL_LUMINANCE16_ALPHA16 = 0x8048;
const GL_INTENSITY = 0x8049;
const GL_INTENSITY4 = 0x804A;
const GL_INTENSITY8 = 0x804B;
const GL_INTENSITY12 = 0x804C;
const GL_INTENSITY16 = 0x804D;
const GL_RGB4 = 0x804F;
const GL_RGB5 = 0x8050;
const GL_RGB8 = 0x8051;
const GL_RGB10 = 0x8052;
const GL_RGB12 = 0x8053;
const GL_RGB16 = 0x8054;
const GL_RGBA2 = 0x8055;
const GL_RGBA4 = 0x8056;
const GL_RGB5_A1 = 0x8057;
const GL_RGBA8 = 0x8058;
const GL_RGB10_A2 = 0x8059;
const GL_RGBA12 = 0x805A;
const GL_RGBA16 = 0x805B;
const GL_TEXTURE_RED_SIZE = 0x805C;
const GL_TEXTURE_GREEN_SIZE = 0x805D;
const GL_TEXTURE_BLUE_SIZE = 0x805E;
const GL_TEXTURE_ALPHA_SIZE = 0x805F;
const GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
const GL_TEXTURE_INTENSITY_SIZE = 0x8061;
const GL_PROXY_TEXTURE_1D = 0x8063;
const GL_PROXY_TEXTURE_2D = 0x8064;
const GL_TEXTURE_PRIORITY = 0x8066;
const GL_TEXTURE_RESIDENT = 0x8067;
const GL_TEXTURE_BINDING_1D = 0x8068;
const GL_TEXTURE_BINDING_2D = 0x8069;
const GL_TEXTURE_BINDING_3D = 0x806A;
const GL_VERTEX_ARRAY = 0x8074;
const GL_NORMAL_ARRAY = 0x8075;
const GL_COLOR_ARRAY = 0x8076;
const GL_INDEX_ARRAY = 0x8077;
const GL_TEXTURE_COORD_ARRAY = 0x8078;
const GL_EDGE_FLAG_ARRAY = 0x8079;
const GL_VERTEX_ARRAY_SIZE = 0x807A;
const GL_VERTEX_ARRAY_TYPE = 0x807B;
const GL_VERTEX_ARRAY_STRIDE = 0x807C;
const GL_NORMAL_ARRAY_TYPE = 0x807E;
const GL_NORMAL_ARRAY_STRIDE = 0x807F;
const GL_COLOR_ARRAY_SIZE = 0x8081;
const GL_COLOR_ARRAY_TYPE = 0x8082;
const GL_COLOR_ARRAY_STRIDE = 0x8083;
const GL_INDEX_ARRAY_TYPE = 0x8085;
const GL_INDEX_ARRAY_STRIDE = 0x8086;
const GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
const GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
const GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
const GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
const GL_VERTEX_ARRAY_POINTER = 0x808E;
const GL_NORMAL_ARRAY_POINTER = 0x808F;
const GL_COLOR_ARRAY_POINTER = 0x8090;
const GL_INDEX_ARRAY_POINTER = 0x8091;
const GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
const GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
const GL_COLOR_TABLE = 0x80D0;
const GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
const GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
const GL_PROXY_COLOR_TABLE = 0x80D3;
const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
const GL_PARAMETER_BUFFER = 0x80EE;
const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
const GL_POINT_SIZE_MIN = 0x8126;
const GL_POINT_SIZE_MAX = 0x8127;
const GL_POINT_DISTANCE_ATTENUATION = 0x8129;
const GL_GENERATE_MIPMAP = 0x8191;
const GL_GENERATE_MIPMAP_HINT = 0x8192;
const GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
const GL_SINGLE_COLOR = 0x81F9;
const GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GL_FRAMEBUFFER_DEFAULT = 0x8218;
const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const GL_MAJOR_VERSION = 0x821B;
const GL_MINOR_VERSION = 0x821C;
const GL_NUM_EXTENSIONS = 0x821D;
const GL_CONTEXT_FLAGS = 0x821E;
const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
const GL_BUFFER_STORAGE_FLAGS = 0x8220;
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
const GL_INDEX = 0x8222;
const GL_COMPRESSED_RED = 0x8225;
const GL_COMPRESSED_RG = 0x8226;
const GL_RG = 0x8227;
const GL_RG_INTEGER = 0x8228;
const GL_R8 = 0x8229;
const GL_R16 = 0x822A;
const GL_RG8 = 0x822B;
const GL_RG16 = 0x822C;
const GL_R16F = 0x822D;
const GL_R32F = 0x822E;
const GL_RG16F = 0x822F;
const GL_RG32F = 0x8230;
const GL_R8I = 0x8231;
const GL_R8UI = 0x8232;
const GL_R16I = 0x8233;
const GL_R16UI = 0x8234;
const GL_R32I = 0x8235;
const GL_R32UI = 0x8236;
const GL_RG8I = 0x8237;
const GL_RG8UI = 0x8238;
const GL_RG16I = 0x8239;
const GL_RG16UI = 0x823A;
const GL_RG32I = 0x823B;
const GL_RG32UI = 0x823C;
const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const GL_DEBUG_SOURCE_API = 0x8246;
const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const GL_DEBUG_SOURCE_OTHER = 0x824B;
const GL_DEBUG_TYPE_ERROR = 0x824C;
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const GL_DEBUG_TYPE_OTHER = 0x8251;
const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
const GL_GUILTY_CONTEXT_RESET = 0x8253;
const GL_INNOCENT_CONTEXT_RESET = 0x8254;
const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GL_PROGRAM_SEPARABLE = 0x8258;
const GL_ACTIVE_PROGRAM = 0x8259;
const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const GL_MAX_VIEWPORTS = 0x825B;
const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const GL_LAYER_PROVOKING_VERTEX = 0x825E;
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GL_UNDEFINED_VERTEX = 0x8260;
const GL_NO_RESET_NOTIFICATION = 0x8261;
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const GL_DEBUG_TYPE_MARKER = 0x8268;
const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const GL_INTERNALFORMAT_PREFERRED = 0x8270;
const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const GL_MAX_WIDTH = 0x827E;
const GL_MAX_HEIGHT = 0x827F;
const GL_MAX_DEPTH = 0x8280;
const GL_MAX_LAYERS = 0x8281;
const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const GL_COLOR_COMPONENTS = 0x8283;
const GL_DEPTH_COMPONENTS = 0x8284;
const GL_STENCIL_COMPONENTS = 0x8285;
const GL_COLOR_RENDERABLE = 0x8286;
const GL_DEPTH_RENDERABLE = 0x8287;
const GL_STENCIL_RENDERABLE = 0x8288;
const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GL_FRAMEBUFFER_BLEND = 0x828B;
const GL_READ_PIXELS = 0x828C;
const GL_READ_PIXELS_FORMAT = 0x828D;
const GL_READ_PIXELS_TYPE = 0x828E;
const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const GL_TEXTURE_IMAGE_TYPE = 0x8290;
const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const GL_MIPMAP = 0x8293;
const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const GL_AUTO_GENERATE_MIPMAP = 0x8295;
const GL_COLOR_ENCODING = 0x8296;
const GL_SRGB_READ = 0x8297;
const GL_SRGB_WRITE = 0x8298;
const GL_FILTER = 0x829A;
const GL_VERTEX_TEXTURE = 0x829B;
const GL_TESS_CONTROL_TEXTURE = 0x829C;
const GL_TESS_EVALUATION_TEXTURE = 0x829D;
const GL_GEOMETRY_TEXTURE = 0x829E;
const GL_FRAGMENT_TEXTURE = 0x829F;
const GL_COMPUTE_TEXTURE = 0x82A0;
const GL_TEXTURE_SHADOW = 0x82A1;
const GL_TEXTURE_GATHER = 0x82A2;
const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const GL_SHADER_IMAGE_LOAD = 0x82A4;
const GL_SHADER_IMAGE_STORE = 0x82A5;
const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const GL_IMAGE_TEXEL_SIZE = 0x82A7;
const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const GL_IMAGE_PIXEL_TYPE = 0x82AA;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const GL_CLEAR_BUFFER = 0x82B4;
const GL_TEXTURE_VIEW = 0x82B5;
const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const GL_FULL_SUPPORT = 0x82B7;
const GL_CAVEAT_SUPPORT = 0x82B8;
const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const GL_VIEW_CLASS_128_BITS = 0x82C4;
const GL_VIEW_CLASS_96_BITS = 0x82C5;
const GL_VIEW_CLASS_64_BITS = 0x82C6;
const GL_VIEW_CLASS_48_BITS = 0x82C7;
const GL_VIEW_CLASS_32_BITS = 0x82C8;
const GL_VIEW_CLASS_24_BITS = 0x82C9;
const GL_VIEW_CLASS_16_BITS = 0x82CA;
const GL_VIEW_CLASS_8_BITS = 0x82CB;
const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const GL_VERTEX_BINDING_OFFSET = 0x82D7;
const GL_VERTEX_BINDING_STRIDE = 0x82D8;
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const GL_BUFFER = 0x82E0;
const GL_SHADER = 0x82E1;
const GL_PROGRAM = 0x82E2;
const GL_QUERY = 0x82E3;
const GL_PROGRAM_PIPELINE = 0x82E4;
const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
const GL_SAMPLER = 0x82E6;
const GL_DISPLAY_LIST = 0x82E7;
const GL_MAX_LABEL_LENGTH = 0x82E8;
const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const GL_QUERY_TARGET = 0x82EA;
const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
const GL_VERTICES_SUBMITTED = 0x82EE;
const GL_PRIMITIVES_SUBMITTED = 0x82EF;
const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
const GL_MAX_CULL_DISTANCES = 0x82F9;
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
const GL_FOG_COORDINATE_SOURCE = 0x8450;
const GL_FOG_COORD_SRC = 0x8450;
const GL_FOG_COORDINATE = 0x8451;
const GL_FOG_COORD = 0x8451;
const GL_FRAGMENT_DEPTH = 0x8452;
const GL_CURRENT_FOG_COORDINATE = 0x8453;
const GL_CURRENT_FOG_COORD = 0x8453;
const GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
const GL_FOG_COORD_ARRAY_TYPE = 0x8454;
const GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
const GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
const GL_FOG_COORD_ARRAY_POINTER = 0x8456;
const GL_FOG_COORDINATE_ARRAY = 0x8457;
const GL_FOG_COORD_ARRAY = 0x8457;
const GL_COLOR_SUM = 0x8458;
const GL_CURRENT_SECONDARY_COLOR = 0x8459;
const GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
const GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
const GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
const GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
const GL_SECONDARY_COLOR_ARRAY = 0x845E;
const GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
const GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
const GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
const GL_MAX_TEXTURE_UNITS = 0x84E2;
const GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
const GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
const GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
const GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
const GL_SUBTRACT = 0x84E7;
const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const GL_COMPRESSED_ALPHA = 0x84E9;
const GL_COMPRESSED_LUMINANCE = 0x84EA;
const GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
const GL_COMPRESSED_INTENSITY = 0x84EC;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const GL_TEXTURE_RECTANGLE = 0x84F5;
const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const GL_DEPTH_STENCIL = 0x84F9;
const GL_UNSIGNED_INT_24_8 = 0x84FA;
const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
const GL_TEXTURE_FILTER_CONTROL = 0x8500;
const GL_NORMAL_MAP = 0x8511;
const GL_REFLECTION_MAP = 0x8512;
const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const GL_COMBINE = 0x8570;
const GL_COMBINE_RGB = 0x8571;
const GL_COMBINE_ALPHA = 0x8572;
const GL_RGB_SCALE = 0x8573;
const GL_ADD_SIGNED = 0x8574;
const GL_INTERPOLATE = 0x8575;
const GL_CONSTANT = 0x8576;
const GL_PRIMARY_COLOR = 0x8577;
const GL_PREVIOUS = 0x8578;
const GL_SOURCE0_RGB = 0x8580;
const GL_SRC0_RGB = 0x8580;
const GL_SOURCE1_RGB = 0x8581;
const GL_SRC1_RGB = 0x8581;
const GL_SOURCE2_RGB = 0x8582;
const GL_SRC2_RGB = 0x8582;
const GL_SOURCE0_ALPHA = 0x8588;
const GL_SRC0_ALPHA = 0x8588;
const GL_SOURCE1_ALPHA = 0x8589;
const GL_SRC1_ALPHA = 0x8589;
const GL_SOURCE2_ALPHA = 0x858A;
const GL_SRC2_ALPHA = 0x858A;
const GL_OPERAND0_RGB = 0x8590;
const GL_OPERAND1_RGB = 0x8591;
const GL_OPERAND2_RGB = 0x8592;
const GL_OPERAND0_ALPHA = 0x8598;
const GL_OPERAND1_ALPHA = 0x8599;
const GL_OPERAND2_ALPHA = 0x859A;
const GL_VERTEX_ARRAY_BINDING = 0x85B5;
const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const GL_PROGRAM_POINT_SIZE = 0x8642;
const GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const GL_DEPTH_CLAMP = 0x864F;
const GL_DOT3_RGB = 0x86AE;
const GL_DOT3_RGBA = 0x86AF;
const GL_PROGRAM_BINARY_LENGTH = 0x8741;
const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const GL_BUFFER_SIZE = 0x8764;
const GL_BUFFER_USAGE = 0x8765;
const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const GL_STENCIL_BACK_FUNC = 0x8800;
const GL_STENCIL_BACK_FAIL = 0x8801;
const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const GL_RGBA32F = 0x8814;
const GL_RGB32F = 0x8815;
const GL_RGBA16F = 0x881A;
const GL_RGB16F = 0x881B;
const GL_MAX_DRAW_BUFFERS = 0x8824;
const GL_DRAW_BUFFER0 = 0x8825;
const GL_DRAW_BUFFER1 = 0x8826;
const GL_DRAW_BUFFER2 = 0x8827;
const GL_DRAW_BUFFER3 = 0x8828;
const GL_DRAW_BUFFER4 = 0x8829;
const GL_DRAW_BUFFER5 = 0x882A;
const GL_DRAW_BUFFER6 = 0x882B;
const GL_DRAW_BUFFER7 = 0x882C;
const GL_DRAW_BUFFER8 = 0x882D;
const GL_DRAW_BUFFER9 = 0x882E;
const GL_DRAW_BUFFER10 = 0x882F;
const GL_DRAW_BUFFER11 = 0x8830;
const GL_DRAW_BUFFER12 = 0x8831;
const GL_DRAW_BUFFER13 = 0x8832;
const GL_DRAW_BUFFER14 = 0x8833;
const GL_DRAW_BUFFER15 = 0x8834;
const GL_BLEND_EQUATION_ALPHA = 0x883D;
const GL_DEPTH_TEXTURE_MODE = 0x884B;
const GL_COMPARE_R_TO_TEXTURE = 0x884E;
const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const GL_POINT_SPRITE = 0x8861;
const GL_COORD_REPLACE = 0x8862;
const GL_QUERY_COUNTER_BITS = 0x8864;
const GL_CURRENT_QUERY = 0x8865;
const GL_QUERY_RESULT = 0x8866;
const GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GL_MAX_VERTEX_ATTRIBS = 0x8869;
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const GL_MAX_TEXTURE_COORDS = 0x8871;
const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const GL_ARRAY_BUFFER = 0x8892;
const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const GL_ARRAY_BUFFER_BINDING = 0x8894;
const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
const GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
const GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
const GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
const GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GL_READ_ONLY = 0x88B8;
const GL_WRITE_ONLY = 0x88B9;
const GL_READ_WRITE = 0x88BA;
const GL_BUFFER_ACCESS = 0x88BB;
const GL_BUFFER_MAPPED = 0x88BC;
const GL_BUFFER_MAP_POINTER = 0x88BD;
const GL_TIME_ELAPSED = 0x88BF;
const GL_STREAM_DRAW = 0x88E0;
const GL_STREAM_READ = 0x88E1;
const GL_STREAM_COPY = 0x88E2;
const GL_STATIC_DRAW = 0x88E4;
const GL_STATIC_READ = 0x88E5;
const GL_STATIC_COPY = 0x88E6;
const GL_DYNAMIC_DRAW = 0x88E8;
const GL_DYNAMIC_READ = 0x88E9;
const GL_DYNAMIC_COPY = 0x88EA;
const GL_PIXEL_PACK_BUFFER = 0x88EB;
const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const GL_DEPTH24_STENCIL8 = 0x88F0;
const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const GL_SRC1_COLOR = 0x88F9;
const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const GL_SAMPLES_PASSED = 0x8914;
const GL_GEOMETRY_VERTICES_OUT = 0x8916;
const GL_GEOMETRY_INPUT_TYPE = 0x8917;
const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const GL_SAMPLER_BINDING = 0x8919;
const GL_CLAMP_VERTEX_COLOR = 0x891A;
const GL_CLAMP_FRAGMENT_COLOR = 0x891B;
const GL_CLAMP_READ_COLOR = 0x891C;
const GL_FIXED_ONLY = 0x891D;
const GL_UNIFORM_BUFFER = 0x8A11;
const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const GL_UNIFORM_BUFFER_START = 0x8A29;
const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const GL_UNIFORM_TYPE = 0x8A37;
const GL_UNIFORM_SIZE = 0x8A38;
const GL_UNIFORM_NAME_LENGTH = 0x8A39;
const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const GL_UNIFORM_OFFSET = 0x8A3B;
const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GL_FRAGMENT_SHADER = 0x8B30;
const GL_VERTEX_SHADER = 0x8B31;
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const GL_MAX_VARYING_FLOATS = 0x8B4B;
const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GL_SHADER_TYPE = 0x8B4F;
const GL_FLOAT_VEC2 = 0x8B50;
const GL_FLOAT_VEC3 = 0x8B51;
const GL_FLOAT_VEC4 = 0x8B52;
const GL_INT_VEC2 = 0x8B53;
const GL_INT_VEC3 = 0x8B54;
const GL_INT_VEC4 = 0x8B55;
const GL_BOOL = 0x8B56;
const GL_BOOL_VEC2 = 0x8B57;
const GL_BOOL_VEC3 = 0x8B58;
const GL_BOOL_VEC4 = 0x8B59;
const GL_FLOAT_MAT2 = 0x8B5A;
const GL_FLOAT_MAT3 = 0x8B5B;
const GL_FLOAT_MAT4 = 0x8B5C;
const GL_SAMPLER_1D = 0x8B5D;
const GL_SAMPLER_2D = 0x8B5E;
const GL_SAMPLER_3D = 0x8B5F;
const GL_SAMPLER_CUBE = 0x8B60;
const GL_SAMPLER_1D_SHADOW = 0x8B61;
const GL_SAMPLER_2D_SHADOW = 0x8B62;
const GL_SAMPLER_2D_RECT = 0x8B63;
const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const GL_FLOAT_MAT2X3 = 0x8B65;
const GL_FLOAT_MAT2X4 = 0x8B66;
const GL_FLOAT_MAT3X2 = 0x8B67;
const GL_FLOAT_MAT3X4 = 0x8B68;
const GL_FLOAT_MAT4X2 = 0x8B69;
const GL_FLOAT_MAT4X3 = 0x8B6A;
const GL_DELETE_STATUS = 0x8B80;
const GL_COMPILE_STATUS = 0x8B81;
const GL_LINK_STATUS = 0x8B82;
const GL_VALIDATE_STATUS = 0x8B83;
const GL_INFO_LOG_LENGTH = 0x8B84;
const GL_ATTACHED_SHADERS = 0x8B85;
const GL_ACTIVE_UNIFORMS = 0x8B86;
const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const GL_SHADER_SOURCE_LENGTH = 0x8B88;
const GL_ACTIVE_ATTRIBUTES = 0x8B89;
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const GL_CURRENT_PROGRAM = 0x8B8D;
const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GL_TEXTURE_RED_TYPE = 0x8C10;
const GL_TEXTURE_GREEN_TYPE = 0x8C11;
const GL_TEXTURE_BLUE_TYPE = 0x8C12;
const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
const GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const GL_UNSIGNED_NORMALIZED = 0x8C17;
const GL_TEXTURE_1D_ARRAY = 0x8C18;
const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const GL_TEXTURE_2D_ARRAY = 0x8C1A;
const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const GL_TEXTURE_BUFFER = 0x8C2A;
const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const GL_ANY_SAMPLES_PASSED = 0x8C2F;
const GL_SAMPLE_SHADING = 0x8C36;
const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const GL_R11F_G11F_B10F = 0x8C3A;
const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const GL_RGB9_E5 = 0x8C3D;
const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const GL_SRGB = 0x8C40;
const GL_SRGB8 = 0x8C41;
const GL_SRGB_ALPHA = 0x8C42;
const GL_SRGB8_ALPHA8 = 0x8C43;
const GL_SLUMINANCE_ALPHA = 0x8C44;
const GL_SLUMINANCE8_ALPHA8 = 0x8C45;
const GL_SLUMINANCE = 0x8C46;
const GL_SLUMINANCE8 = 0x8C47;
const GL_COMPRESSED_SRGB = 0x8C48;
const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const GL_COMPRESSED_SLUMINANCE = 0x8C4A;
const GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GL_PRIMITIVES_GENERATED = 0x8C87;
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GL_RASTERIZER_DISCARD = 0x8C89;
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const GL_SEPARATE_ATTRIBS = 0x8C8D;
const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const GL_LOWER_LEFT = 0x8CA1;
const GL_UPPER_LEFT = 0x8CA2;
const GL_STENCIL_BACK_REF = 0x8CA3;
const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_FRAMEBUFFER_BINDING = 0x8CA6;
const GL_RENDERBUFFER_BINDING = 0x8CA7;
const GL_READ_FRAMEBUFFER = 0x8CA8;
const GL_DRAW_FRAMEBUFFER = 0x8CA9;
const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const GL_DEPTH_COMPONENT32F = 0x8CAC;
const GL_DEPTH32F_STENCIL8 = 0x8CAD;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const GL_COLOR_ATTACHMENT0 = 0x8CE0;
const GL_COLOR_ATTACHMENT1 = 0x8CE1;
const GL_COLOR_ATTACHMENT2 = 0x8CE2;
const GL_COLOR_ATTACHMENT3 = 0x8CE3;
const GL_COLOR_ATTACHMENT4 = 0x8CE4;
const GL_COLOR_ATTACHMENT5 = 0x8CE5;
const GL_COLOR_ATTACHMENT6 = 0x8CE6;
const GL_COLOR_ATTACHMENT7 = 0x8CE7;
const GL_COLOR_ATTACHMENT8 = 0x8CE8;
const GL_COLOR_ATTACHMENT9 = 0x8CE9;
const GL_COLOR_ATTACHMENT10 = 0x8CEA;
const GL_COLOR_ATTACHMENT11 = 0x8CEB;
const GL_COLOR_ATTACHMENT12 = 0x8CEC;
const GL_COLOR_ATTACHMENT13 = 0x8CED;
const GL_COLOR_ATTACHMENT14 = 0x8CEE;
const GL_COLOR_ATTACHMENT15 = 0x8CEF;
const GL_COLOR_ATTACHMENT16 = 0x8CF0;
const GL_COLOR_ATTACHMENT17 = 0x8CF1;
const GL_COLOR_ATTACHMENT18 = 0x8CF2;
const GL_COLOR_ATTACHMENT19 = 0x8CF3;
const GL_COLOR_ATTACHMENT20 = 0x8CF4;
const GL_COLOR_ATTACHMENT21 = 0x8CF5;
const GL_COLOR_ATTACHMENT22 = 0x8CF6;
const GL_COLOR_ATTACHMENT23 = 0x8CF7;
const GL_COLOR_ATTACHMENT24 = 0x8CF8;
const GL_COLOR_ATTACHMENT25 = 0x8CF9;
const GL_COLOR_ATTACHMENT26 = 0x8CFA;
const GL_COLOR_ATTACHMENT27 = 0x8CFB;
const GL_COLOR_ATTACHMENT28 = 0x8CFC;
const GL_COLOR_ATTACHMENT29 = 0x8CFD;
const GL_COLOR_ATTACHMENT30 = 0x8CFE;
const GL_COLOR_ATTACHMENT31 = 0x8CFF;
const GL_DEPTH_ATTACHMENT = 0x8D00;
const GL_STENCIL_ATTACHMENT = 0x8D20;
const GL_FRAMEBUFFER = 0x8D40;
const GL_RENDERBUFFER = 0x8D41;
const GL_RENDERBUFFER_WIDTH = 0x8D42;
const GL_RENDERBUFFER_HEIGHT = 0x8D43;
const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const GL_STENCIL_INDEX1 = 0x8D46;
const GL_STENCIL_INDEX4 = 0x8D47;
const GL_STENCIL_INDEX8 = 0x8D48;
const GL_STENCIL_INDEX16 = 0x8D49;
const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GL_MAX_SAMPLES = 0x8D57;
const GL_RGB565 = 0x8D62;
const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GL_MAX_ELEMENT_INDEX = 0x8D6B;
const GL_RGBA32UI = 0x8D70;
const GL_RGB32UI = 0x8D71;
const GL_RGBA16UI = 0x8D76;
const GL_RGB16UI = 0x8D77;
const GL_RGBA8UI = 0x8D7C;
const GL_RGB8UI = 0x8D7D;
const GL_RGBA32I = 0x8D82;
const GL_RGB32I = 0x8D83;
const GL_RGBA16I = 0x8D88;
const GL_RGB16I = 0x8D89;
const GL_RGBA8I = 0x8D8E;
const GL_RGB8I = 0x8D8F;
const GL_RED_INTEGER = 0x8D94;
const GL_GREEN_INTEGER = 0x8D95;
const GL_BLUE_INTEGER = 0x8D96;
const GL_ALPHA_INTEGER = 0x8D97;
const GL_RGB_INTEGER = 0x8D98;
const GL_RGBA_INTEGER = 0x8D99;
const GL_BGR_INTEGER = 0x8D9A;
const GL_BGRA_INTEGER = 0x8D9B;
const GL_INT_2_10_10_10_REV = 0x8D9F;
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GL_FRAMEBUFFER_SRGB = 0x8DB9;
const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const GL_SAMPLER_1D_ARRAY = 0x8DC0;
const GL_SAMPLER_2D_ARRAY = 0x8DC1;
const GL_SAMPLER_BUFFER = 0x8DC2;
const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const GL_INT_SAMPLER_1D = 0x8DC9;
const GL_INT_SAMPLER_2D = 0x8DCA;
const GL_INT_SAMPLER_3D = 0x8DCB;
const GL_INT_SAMPLER_CUBE = 0x8DCC;
const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const GL_INT_SAMPLER_BUFFER = 0x8DD0;
const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const GL_GEOMETRY_SHADER = 0x8DD9;
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const GL_ACTIVE_SUBROUTINES = 0x8DE5;
const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const GL_MAX_SUBROUTINES = 0x8DE7;
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const GL_LOW_FLOAT = 0x8DF0;
const GL_MEDIUM_FLOAT = 0x8DF1;
const GL_HIGH_FLOAT = 0x8DF2;
const GL_LOW_INT = 0x8DF3;
const GL_MEDIUM_INT = 0x8DF4;
const GL_HIGH_INT = 0x8DF5;
const GL_SHADER_BINARY_FORMATS = 0x8DF8;
const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const GL_SHADER_COMPILER = 0x8DFA;
const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const GL_MAX_VARYING_VECTORS = 0x8DFC;
const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const GL_QUERY_WAIT = 0x8E13;
const GL_QUERY_NO_WAIT = 0x8E14;
const GL_QUERY_BY_REGION_WAIT = 0x8E15;
const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const GL_QUERY_WAIT_INVERTED = 0x8E17;
const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const GL_TRANSFORM_FEEDBACK = 0x8E22;
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const GL_TIMESTAMP = 0x8E28;
const GL_TEXTURE_SWIZZLE_R = 0x8E42;
const GL_TEXTURE_SWIZZLE_G = 0x8E43;
const GL_TEXTURE_SWIZZLE_B = 0x8E44;
const GL_TEXTURE_SWIZZLE_A = 0x8E45;
const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const GL_PROVOKING_VERTEX = 0x8E4F;
const GL_SAMPLE_POSITION = 0x8E50;
const GL_SAMPLE_MASK = 0x8E51;
const GL_SAMPLE_MASK_VALUE = 0x8E52;
const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const GL_MAX_VERTEX_STREAMS = 0x8E71;
const GL_PATCH_VERTICES = 0x8E72;
const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const GL_TESS_GEN_MODE = 0x8E76;
const GL_TESS_GEN_SPACING = 0x8E77;
const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const GL_TESS_GEN_POINT_MODE = 0x8E79;
const GL_ISOLINES = 0x8E7A;
const GL_FRACTIONAL_ODD = 0x8E7B;
const GL_FRACTIONAL_EVEN = 0x8E7C;
const GL_MAX_PATCH_VERTICES = 0x8E7D;
const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const GL_TESS_EVALUATION_SHADER = 0x8E87;
const GL_TESS_CONTROL_SHADER = 0x8E88;
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GL_COPY_READ_BUFFER = 0x8F36;
const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
const GL_COPY_WRITE_BUFFER = 0x8F37;
const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
const GL_MAX_IMAGE_UNITS = 0x8F38;
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GL_IMAGE_BINDING_NAME = 0x8F3A;
const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const GL_IMAGE_BINDING_LAYER = 0x8F3D;
const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const GL_DOUBLE_MAT2 = 0x8F46;
const GL_DOUBLE_MAT3 = 0x8F47;
const GL_DOUBLE_MAT4 = 0x8F48;
const GL_DOUBLE_MAT2X3 = 0x8F49;
const GL_DOUBLE_MAT2X4 = 0x8F4A;
const GL_DOUBLE_MAT3X2 = 0x8F4B;
const GL_DOUBLE_MAT3X4 = 0x8F4C;
const GL_DOUBLE_MAT4X2 = 0x8F4D;
const GL_DOUBLE_MAT4X3 = 0x8F4E;
const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
const GL_R8_SNORM = 0x8F94;
const GL_RG8_SNORM = 0x8F95;
const GL_RGB8_SNORM = 0x8F96;
const GL_RGBA8_SNORM = 0x8F97;
const GL_R16_SNORM = 0x8F98;
const GL_RG16_SNORM = 0x8F99;
const GL_RGB16_SNORM = 0x8F9A;
const GL_RGBA16_SNORM = 0x8F9B;
const GL_SIGNED_NORMALIZED = 0x8F9C;
const GL_PRIMITIVE_RESTART = 0x8F9D;
const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const GL_DOUBLE_VEC2 = 0x8FFC;
const GL_DOUBLE_VEC3 = 0x8FFD;
const GL_DOUBLE_VEC4 = 0x8FFE;
const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const GL_IMAGE_1D = 0x904C;
const GL_IMAGE_2D = 0x904D;
const GL_IMAGE_3D = 0x904E;
const GL_IMAGE_2D_RECT = 0x904F;
const GL_IMAGE_CUBE = 0x9050;
const GL_IMAGE_BUFFER = 0x9051;
const GL_IMAGE_1D_ARRAY = 0x9052;
const GL_IMAGE_2D_ARRAY = 0x9053;
const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const GL_INT_IMAGE_1D = 0x9057;
const GL_INT_IMAGE_2D = 0x9058;
const GL_INT_IMAGE_3D = 0x9059;
const GL_INT_IMAGE_2D_RECT = 0x905A;
const GL_INT_IMAGE_CUBE = 0x905B;
const GL_INT_IMAGE_BUFFER = 0x905C;
const GL_INT_IMAGE_1D_ARRAY = 0x905D;
const GL_INT_IMAGE_2D_ARRAY = 0x905E;
const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GL_MAX_IMAGE_SAMPLES = 0x906D;
const GL_IMAGE_BINDING_FORMAT = 0x906E;
const GL_RGB10_A2UI = 0x906F;
const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const GL_SHADER_STORAGE_BUFFER = 0x90D2;
const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const GL_TEXTURE_SAMPLES = 0x9106;
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const GL_MAX_INTEGER_SAMPLES = 0x9110;
const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const GL_OBJECT_TYPE = 0x9112;
const GL_SYNC_CONDITION = 0x9113;
const GL_SYNC_STATUS = 0x9114;
const GL_SYNC_FLAGS = 0x9115;
const GL_SYNC_FENCE = 0x9116;
const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const GL_UNSIGNALED = 0x9118;
const GL_SIGNALED = 0x9119;
const GL_ALREADY_SIGNALED = 0x911A;
const GL_TIMEOUT_EXPIRED = 0x911B;
const GL_CONDITION_SATISFIED = 0x911C;
const GL_WAIT_FAILED = 0x911D;
const GL_BUFFER_ACCESS_FLAGS = 0x911F;
const GL_BUFFER_MAP_LENGTH = 0x9120;
const GL_BUFFER_MAP_OFFSET = 0x9121;
const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const GL_CONTEXT_PROFILE_MASK = 0x9126;
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const GL_DEBUG_SEVERITY_HIGH = 0x9146;
const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const GL_DEBUG_SEVERITY_LOW = 0x9148;
const GL_QUERY_BUFFER = 0x9192;
const GL_QUERY_BUFFER_BINDING = 0x9193;
const GL_QUERY_RESULT_NO_WAIT = 0x9194;
const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const GL_TEXTURE_BUFFER_SIZE = 0x919E;
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GL_COMPUTE_SHADER = 0x91B9;
const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const GL_COMPRESSED_R11_EAC = 0x9270;
const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const GL_COMPRESSED_RG11_EAC = 0x9272;
const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GL_DEBUG_OUTPUT = 0x92E0;
const GL_UNIFORM = 0x92E1;
const GL_UNIFORM_BLOCK = 0x92E2;
const GL_PROGRAM_INPUT = 0x92E3;
const GL_PROGRAM_OUTPUT = 0x92E4;
const GL_BUFFER_VARIABLE = 0x92E5;
const GL_SHADER_STORAGE_BLOCK = 0x92E6;
const GL_IS_PER_PATCH = 0x92E7;
const GL_VERTEX_SUBROUTINE = 0x92E8;
const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const GL_GEOMETRY_SUBROUTINE = 0x92EB;
const GL_FRAGMENT_SUBROUTINE = 0x92EC;
const GL_COMPUTE_SUBROUTINE = 0x92ED;
const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const GL_ACTIVE_RESOURCES = 0x92F5;
const GL_MAX_NAME_LENGTH = 0x92F6;
const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GL_NAME_LENGTH = 0x92F9;
const GL_TYPE = 0x92FA;
const GL_ARRAY_SIZE = 0x92FB;
const GL_OFFSET = 0x92FC;
const GL_BLOCK_INDEX = 0x92FD;
const GL_ARRAY_STRIDE = 0x92FE;
const GL_MATRIX_STRIDE = 0x92FF;
const GL_IS_ROW_MAJOR = 0x9300;
const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const GL_BUFFER_BINDING = 0x9302;
const GL_BUFFER_DATA_SIZE = 0x9303;
const GL_NUM_ACTIVE_VARIABLES = 0x9304;
const GL_ACTIVE_VARIABLES = 0x9305;
const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const GL_LOCATION = 0x930E;
const GL_LOCATION_INDEX = 0x930F;
const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const GL_LOCATION_COMPONENT = 0x934A;
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
const GL_CLIP_ORIGIN = 0x935C;
const GL_CLIP_DEPTH_MODE = 0x935D;
const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
const GL_ZERO_TO_ONE = 0x935F;
const GL_CLEAR_TEXTURE = 0x9365;
const GL_NUM_SAMPLE_COUNTS = 0x9380;
const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
const GL_SPIR_V_BINARY = 0x9552;
const GL_SPIR_V_EXTENSIONS = 0x9553;
const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
